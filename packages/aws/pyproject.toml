[tool.poetry]
name = "rpaframework-aws"
version = "4.0.0"
description = "AWS library for RPA Framework"
authors = ["RPA Framework <rpafw@robocorp.com>"]
license = "Apache-2.0"
readme = "README.rst"

homepage = "https://rpaframework.org/"
documentation = "https://rpaframework.org/"
repository = "https://github.com/robocorp/rpaframework"

keywords = ["robotframework", "rpa", "automation", "aws"]
classifiers = [
	"License :: OSI Approved :: Apache Software License",
	"Development Status :: 3 - Alpha",
	"Operating System :: OS Independent",
	"Intended Audience :: Developers",
	"Topic :: Software Development :: Libraries :: Python Modules",
	"Topic :: Software Development :: Libraries",
	"Framework :: Robot Framework :: Library",
	"Framework :: Robot Framework",
	"Programming Language :: Python :: 3.7",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
]

include = ["*.libspec"]

packages = [{ include = "RPA", from = "src" }]

[tool.poetry.dependencies]
python = "^3.7"
rpaframework-core = "^10.0.0"
robotframework = ">=4.0.0,!=4.0.1,<6.0.0"
robotframework-pythonlibcore = "^3.0.0"
boto3 = "^1.13.4"
amazon-textract-response-parser = "^0.1.1"

[tool.poetry.dev-dependencies]
black = "^22.3.0"
flake8 = "^3.7.9"
pylint = "^2.4.4, <2.13"
pytest = "^6.1.2"
mock = "^4.0.2"
pytest-cov = "^2.10.1"
invoke = "^1.6.0"
sphinx = "^2.3.1"
sphinx_rtd_theme = "^0.4.3"
toml = "^0.10.2"
sphinx-markdown-builder = "^0.5.4"
robotframework-docgen = "^0.15.0"
sphinx-issues = "^1.2.0"
docutils = "0.16"
moto = "3.1.8"
colorama = "^0.4.5"

# Groups starting with 'local-' are used by
# invocations to install other local packages
# in editable mode when needed by developers.
[tool.poetry.group.local-main]
optional = true

[tool.poetry.group.local-main.dependencies]
rpaframework = { path = "../main", develop = true }
rpaframework-pdf = { path = "../pdf", develop = true }
rpaframework-dialogs = { path = "../dialogs", develop = true }
rpaframework-windows = { path = "../windows", develop = true }

[tool.poetry.group.local-dialogs]
optional = true

[tool.poetry.group.local-dialogs.dependencies]
rpaframework-dialogs = { path = "../dialogs", develop = true }

[tool.poetry.group.local-google]
optional = true

[tool.poetry.group.local-google.dependencies]
rpaframework-google = { path = "../google", develop = true }

[tool.poetry.group.local-pdf]
optional = true

[tool.poetry.group.local-pdf.dependencies]
rpaframework-pdf = { path = "../pdf", develop = true }

[tool.poetry.group.local-recognition]
optional = true

[tool.poetry.group.local-recognition.dependencies]
rpaframework-recognition = { path = "../recognition", develop = true }

[tool.poetry.group.local-windows]
optional = true

[tool.poetry.group.local-windows.dependencies]
rpaframework-windows = { path = "../windows", develop = true }

[tool.black]
target-version = ["py37", "py38", "py39"]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
addopts = "-v --cov=src --cov-report term-missing --cov-branch"
testpaths = ["tests"]
