[
  {
    "module": "RPA.Archive.Archive",
    "markdown": "# Python API\n\n## Archive\n\n### *class* RPA.Archive.Archive\n\nArchive is a library for operating with ZIP and TAR packages.\n\n**Examples**\n\n```robotframework\n*** Settings ***\nLibrary  RPA.Archive\n\n*** Tasks ***\nCreating a ZIP archive\n   Archive Folder With ZIP   ${CURDIR}${/}tasks  tasks.zip   recursive=True  include=*.robot  exclude=/.*\n   @{files}                  List Archive             tasks.zip\n   FOR  ${file}  IN  ${files}\n      Log  ${file}\n   END\n   Add To Archive            .${/}..${/}missing.robot  tasks.zip\n   &{info}                   Get Archive Info\n```\n\n```python\nfrom RPA.Archive import Archive\n\nlib = Archive()\nlib.archive_folder_with_tar('./tasks', 'tasks.tar', recursive=True)\nfiles = lib.list_archive('tasks.tar')\nfor file in files:\n   print(file)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_to_archive(files: List | str, archive_name: str, folder: str | None = None) \u2192 None\n\nAdd file(s) to the archive\n\n* **Parameters:**\n  * **files** \u2013 name of the file, or list of files, to add\n  * **archive_name** \u2013 filename of the archive\n  * **folder** \u2013 name of the folder where the file will be added, relative path within the archive\n* **Returns:**\n  None\n\nThis keyword adds a file or list of files into an existing archive. Files\ncan be added to archive structure with relative path using argument folder.\n\nExample:\n\n```robotframework\nAdd To Archive  extrafile.txt  myfiles.zip\nAdd To Archive  stat.png       archive.tar.gz  images\n@{files}        Create List    filename1.txt   filename2.txt\nAdd To Archive  ${files}       files.tar\n```\n\n#### archive_folder_with_tar(folder: str, archive_name: str, recursive: bool = False, include: str | None = None, exclude: str | None = None) \u2192 None\n\nCreate a tar/tar.gz archive of a folder\n\n* **Parameters:**\n  * **folder** \u2013 name of the folder to archive\n  * **archive_name** \u2013 filename of the archive\n  * **recursive** \u2013 should sub directories be included, default is False\n  * **include** \u2013 define file pattern to include in the package, default is None which means all files are included\n  * **exclude** \u2013 define file pattern to exclude from the package, default is None\n* **Returns:**\n  None\n\nThis keyword creates an TAR or TAR.GZ archive of a local folder. Type of archive\nis determined by the file extension. By default subdirectories are not\nincluded, but they can included using recursive argument.\n\nTo include only certain files, like TXT files, the argument include can be used.\nSimilarly to exclude certain file, like dotfiles, the argument exclude can be used.\n\nExample:\n\n```robotframework\nArchive Folder With TAR  ${CURDIR}${/}documents  documents.tar\nArchive Folder With TAR  ${CURDIR}${/}tasks      tasks.tar.gz   include=*.robot\nArchive Folder With TAR  ${CURDIR}${/}tasks      tasks.tar      exclude=/.*\nArchive Folder With TAR  ${CURDIR}${/}documents  documents.tar  recursive=True\n```\n\n#### archive_folder_with_zip(folder: str, archive_name: str, recursive: bool = False, include: str | None = None, exclude: str | None = None, compression: str = 'stored') \u2192 None\n\nCreate a zip archive of a folder\n\n* **Parameters:**\n  * **folder** \u2013 name of the folder to archive\n  * **archive_name** \u2013 filename of the archive\n  * **recursive** \u2013 should sub directories be included, default is False\n  * **include** \u2013 define file pattern to include in the package, default is None which means all files are included\n  * **exclude** \u2013 define file pattern to exclude from the package, default is None\n  * **compression** \u2013 type of package compression method, default is \u201cstored\u201d\n* **Returns:**\n  None\n\nThis keyword creates an ZIP archive of a local folder. By default subdirectories are not\nincluded, but they can be included using the recursive argument.\n\nTo include only certain files, like TXT files, the argument include can be used.\nSimilarly to exclude certain files, like dotfiles, the argument exclude can be used.\n\nCompression methods:\n\n- stored, default\n- deflated\n- bzip2\n- lzma\n\nExample:\n\n```robotframework\nArchive Folder With Zip  ${CURDIR}${/}documents  mydocs.zip\nArchive Folder With Zip  ${CURDIR}${/}tasks      robottasks.zip   include=*.robot\nArchive Folder With Zip  ${CURDIR}${/}tasks      no_dotfiles.zip  exclude=/.*\nArchive Folder With Zip  ${CURDIR}${/}documents  documents.zip    recursive=True\nArchive Folder With Zip  ${CURDIR}               packagelzma.zip  compression=lzma\nArchive Folder With Zip  ${CURDIR}               bzipped.zip      compression=bzip2\n```\n\n```python\nfrom RPA.Archive import Archive\n\nlib = Archive()\nlib.archive_folder_with_zip('./documents', 'mydocs.zip')\nlib.archive_folder_with_zip('./tasks', 'robottasks.zip', include='*.robot')\nlib.archive_folder_with_zip('./tasks', 'no_dotfiles.zip', exclude='/.*')\nlib.archive_folder_with_zip('./documents', 'documents.zip', recursive=True)\nlib.archive_folder_with_zip('./', 'packagelzma.zip', compression='lzma')\nlib.archive_folder_with_zip('./', 'bzipped.zip', compression='bzip2')\n```\n\n#### extract_archive(archive_name: str, path: str | None = None, members: List | str | None = None) \u2192 None\n\nExtract files from archive into local directory\n\n* **Parameters:**\n  * **archive_name** \u2013 filename of the archive\n  * **path** \u2013 filepath to extract file into, default is current working directory\n  * **members** \u2013 list of files to extract from archive, by default\n    all files in archive are extracted\n* **Returns:**\n  None\n\nThis keyword supports extracting files from zip, tar and tar.gz archives.\n\nBy default file is extracted into current working directory, but path argument\ncan be set to define extraction path.\n\nExample:\n\n```robotframework\nExtract Archive    myfiles.zip   ${CURDIR}${/}extracted\n@{files}           Create List   filename1.txt    filename2.txt\nExtract Archive    archive.tar   C:${/}myfiles${/}  ${files}\n```\n\n#### extract_file_from_archive(filename: str, archive_name: str, path: str | None = None) \u2192 None\n\nExtract a file from archive into local directory\n\n* **Parameters:**\n  * **filename** \u2013 name of the file to extract\n  * **archive_name** \u2013 filename of the archive\n  * **path** \u2013 filepath to extract file into,\n    default is current working directory\n* **Returns:**\n  None\n\nThis keyword supports extracting a file from zip, tar and tar.gz archives.\n\nBy default file is extracted into current working directory,\nbut path argument can be set to define extraction path.\n\nExample:\n\n```robotframework\nExtract File From Archive    extrafile.txt   myfiles.zip\nExtract File From Archive    background.png  images.tar.gz  ${CURDIR}${/}extracted\n```\n\n#### get_archive_info(archive_name: str) \u2192 dict\n\nGet information about the archive\n\n* **Parameters:**\n  **archive_name** \u2013 filename of the archive\n* **Returns:**\n  dictionary variable containing the keys filename, filemode, size, mtime, modified\n\nReturns following file attributes in a dictionary:\n\n- filename\n- filemode\n- size\n- mtime\n- last modification time in format %d.%m.%Y %H:%M:%S\n\nExample:\n\n```robotframework\n&{archiveinfo}   Get Archive Info    myfiles.zip\n```\n\n#### list_archive(archive_name: str) \u2192 list\n\nList files in an archive\n\n* **Parameters:**\n  **archive_name** \u2013 filename of the archive\n* **Returns:**\n  dictionary variable containing the keys name, size, mtime, modified\n\nReturns list of files, where each file in a list is a dictionary\nwith following attributes:\n\n- name\n- size\n- mtime\n- last modification time in format %d.%m.%Y %H:%M:%S\n\nExample:\n\n```robotframework\n@{files}   List Archive    myfiles.zip\nFOR  ${file}  IN   ${files}\n    Log  ${file}[filename]\n    Log  ${file}[size]\n    Log  ${file}[mtime]\nEND\n```\n"
  },
  {
    "module": "RPA.Assistant.Assistant",
    "markdown": "# Python API\n\n## Assistant\n\n### *class* RPA.Assistant.Assistant\n\nThe Assistant library provides a way to display information to a user\nand request input while a robot is running. It allows building processes\nthat require human interaction. Also it offers capabilities of running\nother robots inside the current one and determine what to display to the\nuser based on his previous responses.\n\nIt is not included in the rpaframework package, so in order to use it\nyou have to add rpaframework-assistant with the desired version in your\n*conda.yaml* file\n\nSome examples of use-cases could be the following:\n\n- Displaying generated files after an execution is finished\n- Displaying dynamic and user-friendly error messages\n- Requesting passwords or other personal information\n- Running Keywords based on user\u2019s actions\n- Displaying dynamic content based on user\u2019s actions\n- Automating based on files created by the user\n\n**Workflow**\n\nThe library is used to create dialogs, i.e. windows, that can be composed\non-the-fly based on the current state of the execution.\n\nThe content of the dialog is defined by calling relevant keywords\nsuch as `Add text` or `Add file input`. When the dialog is opened\nthe content is generated based on the previous keywords.\n\nDepending on the way the dialog is started, the execution will either\nblock or continue while the dialog is open. During this time the user\ncan freely edit any possible input fields or handle other tasks.\n\nAfter the user has successfully submitted the dialog, any possible\nentered input will be returned as a result. The user also has the option\nto abort by closing the dialog window forcefully.\n\n**Results**\n\nEach input field has a required `name` argument that controls what\nthe value will be called in the result object. Each input name should be\nunique, and must not be called `submit` as that is reserved for the submit\nbutton value.\n\nA result object is a Robot Framework DotDict, where each key\nis the name of the input field and the value is what the user entered.\nThe data type of each field depends on the input. For instance,\na text input will have a string, a checkbox will have a boolean, and\na file input will have a list of paths.\n\nIf the user closed the window before submitting or there was an internal\nerror, the results object returned by Run Dialog or Ask User won\u2019t have a \u201csubmit\u201d\nkey.\n\n**Layouting**\n\nBy default elements are added to the assistant dialog from top to bottom, with a bit\nof margin around each element to add spaciousness. This margin is added as a\n`Container` you can manually use `Open Container` to override the default\ncontainer. You can use it to set smaller margins.\n\nYou can combine layouting elements with each other. Layouting elements need to be\nclosed with the corresponding `Close` keyword. (So `Open Row` and then\n`Close Row`.)\n\n`Open Row` can be used to layout elements in the same row.\n\n`Open Column` can be used to layout elements in columns.\n\n`Open Stack` and multiple `Open Container`\u2019s inside it can be used to set\npositions like Center, Topleft, BottomRight, or coordinate tuples likes (0, 0),\n(100, 100) and such.\n\n`Open Container` can bse used for absolute positioning inside a Stack, or anywhere\nfor setting background color or margins and paddings.\n\n`Open Navbar` can be used to make a navigation bar that will stay at the top of\nthe dialog. Its contents won\u2019t be cleared when.\n\n**Examples**\n\n```robotframework\n*** Keywords ***\nSuccess dialog\n    Add icon      Success\n    Add heading   Your orders have been processed\n    Add files     *.txt\n    Run dialog    title=Success\n\nFailure dialog\n    Add icon      Failure\n    Add heading   There was an error\n    Add text      The assistant failed to login to the Enterprise portal\n    Add link      https://robocorp.com/docs    label=Troubleshooting guide\n    Run dialog    title=Failure\n\nLarge dialog\n    Add heading    A real chonker   size=large\n    Add image      fat-cat.jpeg\n    Run dialog     title=Large    height=1024    width=1024\n\nConfirmation dialog\n    Add icon      Warning\n    Add heading   Delete user ${username}?\n    Add submit buttons    buttons=No,Yes    default=Yes\n    ${result}=    Run dialog\n    IF   $result.submit == \"Yes\"\n        Delete user    ${username}\n    END\n\nInput form dialog\n    Add heading       Send feedback\n    Add text input    email    label=E-mail address\n    Add text input    message\n    ...    label=Feedback\n    ...    placeholder=Enter feedback here\n    ...    maximum_rows=5\n    ${result}=    Run dialog\n    Send feedback message    ${result.email}  ${result.message}\n```\n\n```python\ndef success_dialog():\n    assistant = Assistant()\n    assistant.add_icon(\"success\")\n    assistant.add_heading(\"Your orders have been processed\")\n    assistant.add_files(\"*.txt\")\n    assistant.run_dialog(title=\"Success\")\n\ndef failure_dialog():\n    assistant = Assistant()\n    assistant.add_icon(\"failure\")\n    assistant.add_heading(\"There was an error\")\n    assistant.add_text(\"The assistant failed to login to the Enterprise portal\")\n    assistant.add_link(\"https://robocorp.com/docs\", label=\"Troubleshooting guide\")\n    assistant.add_files(\"*.txt\")\n    assistant.run_dialog(title=\"Failure\")\n\ndef large_dialog():\n    assistant = Assistant()\n    assistant.add_heading(\"A real chonker\", size=\"large\")\n    assistant.add_image(\"fat-cat.jpeg\")\n    assistant.run_dialog(title=\"Large\", height=1024, width=1024)\n\ndef confirmation_dialog():\n    assistant = Assistant()\n    assistant.add_icon(\"warning\")\n    assistant.add_heading(\"Delete user ${username}?\")\n    assistant.add_submit_buttons(buttons=\"No, Yes\", default=\"Yes\")\n    result = assistant.run_dialog()\n    if result.submit == \"Yes\":\n        delete_user(username)\n\ndef input_from_dialog():\n    assistant = Assistant()\n    assistant.add_heading(\"Send feedback\")\n    assistant.add_text_input(\"email\", label=\"E-mail address\")\n    assistant.add_text_input(\"message\", label=\"Feedback\", placeholder=\"Enter feedback here\", maximum_rows=5)\n    assistant.add_submit_buttons(\"Submit\", default=\"Submit\")\n    result = assistant.run_dialog()\n    send_feedback_message(result.email, result.message)\n```\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_button(label: str, function: Callable | str, \\*args, location: VerticalLocation = VerticalLocation.Left, \\*\\*kwargs) \u2192 None\n\nCreate a button and execute the function as a callback when pressed.\n\n* **Parameters:**\n  * **label** \u2013 Text for the button\n  * **function** \u2013 Python function or Robot Keyword name, that will get `*args`\n    and `**kwargs` passed into it\n\nExample:\n\n```robotframework\n*** Keywords ***\nFirst View\n    Add Heading  Here is the first view of the app\n    Add Button  Change View  Second View\n\nSecond View\n    Add Heading  Let's build an infinite loop\n    Add Button  Change View  First View\n```\n\n```python\ndef first_view():\n    assistant = Assistant()\n    assistant.add_heading(\"Here is the first view of the app\")\n    assistant.add_button(\"Change view\", second_view)\n    assistant.run_dialog()\n\ndef second_view():\n    assistant = Assistant()\n    assistant.add_heading(\"Let's build an infinite loop\")\n    assistant.add_button(\"Change view\", first_view)\n    assistant.run_dialog()\n```\n\n#### add_checkbox(name: str, label: str, default: bool = False) \u2192 None\n\nAdd a checkbox element\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **label** \u2013 Label text for checkbox\n  * **default** \u2013 Default checked state\n\nAdds a checkbox that indicates a true or false value.\nThe selection will be available in the `name` field of the result,\nand the `label` text will be shown next to the checkbox.\n\nThe boolean `default` value will define the initial checked\nstate of the element.\n\nExample:\n\n```robotframework\n*** Keywords ***\nSelect checkboxes\n    Add heading     Enable features\n    Add checkbox    name=vault        label=Enable vault       default=True\n    Add checkbox    name=triggers     label=Enable triggers    default=False\n    Add checkbox    name=assistants   label=Enable assistants  default=True\n    ${result}=      Run dialog\n    IF    $result.vault\n        Enable vault\n    END\n```\n\n```python\ndef select_checkboxes():\n    assistant = Assistant()\n    assistant.add_heading(\"Enable features\")\n    assistant.add_checkbox(name=\"vault\", label=\"Enable vault\", default=True)\n    assistant.add_checkbox(name=\"triggers\", label=\"Enable triggers\", default=False)\n    assistant.add_checkbox(name=\"assistants\", label=\"Enable assistants\", default=True)\n    result = assistant.run_dialog()\n    if(result.vault):\n        enable_vault()\n```\n\n#### add_date_input(name: str, default: date | str | None = None, label: str | None = None) \u2192 None\n\nAdd a date input element.\n\n* **Parameters:**\n  * **name** \u2013 Name of the result field\n  * **default** \u2013 The default set date\n  * **label** \u2013 Label for the date input field\n\nDisplays a date input. The selection the user makes will be available\nas a `date` object in the `name` field of the result.\nThe `default` argument can be a pre-set date as object or string in\n\u201cYYYY-MM-DD\u201d format, otherwise the current date is used.\n\nExample:\n\n```robotframework\n*** Keywords ***\nSelect birthdate\n    Add heading       Enter your birthdate\n    Add Date Input    birthdate    default=1993-04-26\n    ${result} =       Run dialog\n    Log To Console    User birthdate year should be: ${result.birthdate.year}\n```\n\n```python\ndef select_birthdate():\n    assistant = Assistant()\n    assistant.add_heading(\"Enter your birthdate\")\n    assistant.add_date_input(\"birthdate\", default=\"1993-04-26\")\n    result = assistant.run_dialog()\n    print(\"User birthdate year should be: \", result.birthdate.year)\n```\n\n#### add_drop_down(name: str, options: List[str] | str, default: str | None = None, label: str | None = None) \u2192 None\n\nAdd a drop-down element\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **options** \u2013 List of drop-down options\n  * **default** \u2013 The default selection\n  * **label** \u2013 Label for input field\n\nCreates a drop-down menu with the given `options`. The selection\nthe user makes will be available in the `name` field of the result.\n\nThe `default` argument can be one of the defined options,\nand the dialog automatically selects that option for the input.\n\nA custom `label` text can also be added.\n\nExample:\n\n```robotframework\n*** Keywords ***\nSelect user type from drop down\n    Add heading     Select user type\n    Add drop-down\n    ...    name=user_type\n    ...    options=Admin,Maintainer,Operator\n    ...    default=Operator\n    ...    label=User type\n    ${result}=      Run dialog\n    Log    User type should be: ${result.user_type}\n```\n\n```python\ndef select_user_type_from_drop_down():\n    assistant = Assistant()\n    assistant.add_heading(\"Select user type\")\n    assistant.add_drop_down(\n        name=\"user_type\",\n        options=\"Admin,Maintainer,Operator\",\n        default=\"Operator\",\n        label=\"User type\"\n    )\n    result = assistant.run_dialog()\n    print(\"User type should be: \", result.user_type)\n```\n\n#### add_file(path: str, label: str | None = None) \u2192 None\n\nAdd a file element, which links to a local file\n\n* **Parameters:**\n  * **path** \u2013 The path to the file\n  * **label** \u2013 A custom label text for the file\n\nAdds a button which opens a local file with the corresponding\ndefault application. Can be used for instance to display generated\nfiles from the robot to the end-user.\n\nOptionally a custom `label` can be given for the button text.\nBy default uses the filename of the linked file.\n\nExample:\n\n```robotframework\n*** Keywords ***\nOpen file button\n    ${path}=   Generate order files\n    Add heading    Current orders\n    Add file    ${path}    label=Current\n    Run dialog\n```\n\n```python\ndef open_file_button():\n    path = generate_order_files()\n    assistant = Assistant()\n    assistant.add_heading(\"Current orders\")\n    assistant.add_file(path, label=\"Current\")\n    assistant.run_dialog()\n```\n\n#### add_file_input(name: str, label: str | None = None, source: str | None = None, file_type: str | None = None, multiple: bool = False) \u2192 None\n\nAdd a file input element\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **label** \u2013 Label for input field\n  * **source** \u2013 Default source directory\n  * **file_type** \u2013 Accepted file types\n  * **multiple** \u2013 Allow selecting multiple files\n\nAdds a native file selection dialog for inputting one or more files.\nThe list of selected files will be available in the `name` field\nof the result.\n\nBy default opens up in the user\u2019s home directory, but it can be\nset to a custom path with the `source` argument.\n\nThe argument `file_type` restricts the possible file extensions\nthat the user can select. The format of the argument is as follows:\n`pdf,png,svg`. For instance, an argument\nto limit options to Excel files could be: `xls,xlsx`.\n\nTo allow selecting more than one file, the `multiple` argument\ncan be enabled.\n\nExample:\n\n```robotframework\n*** Keywords ***\nMultiple file selections\n    # This can be any one file\n    Add file input    name=anything\n\n    # This can be multiple files\n    Add file input    name=multiple  multiple=True\n\n    # This opens the select dialog to a custom folder\n    Add file input    name=src       source=C:\\Temp\\Output\\\n\n    # This restricts files to certain types\n    Add file input    name=types     file_type=pdf\n\n    # Every file input result is a list of paths\n    ${result}=    Run dialog\n    FOR    ${path}    IN    @{result.multiple}\n        Log    Selected file: ${path}\n    END\n```\n\n```python\ndef multiple_file_selections():\n    assistant = Assistant()\n    # This can be any one file\n    assistant.add_file_input(name=\"anything\")\n\n    # This can be multiple files\n    assistant.add_file_input(name=\"multiple\", multiple=True)\n\n    # This opens the select dialog to a custom folder\n    assistant.add_file_input(name=\"src\", source=\"C:\\Temp\\Output\")\n\n    # This restricts files to certain types\n    assistant.add_file_input(name=\"types\", file_type=\"pdf\")\n\n    # Every file input result is a list of paths\n    result = assistant.run_dialog()\n    for path in result.multiple:\n        print(\"Selected file: \", path)\n```\n\n#### add_files(pattern: str) \u2192 None\n\nAdd multiple file elements according to the given file pattern\n\n* **Parameters:**\n  **pattern** \u2013 File matching pattern\n\nSee the keyword `Add file` for information about the inserted\nelement itself.\n\nThe keyword uses Unix-style glob patterns for finding matching files,\nand the supported pattern expressions are as follow:\n\n| Pattern   | Meaning                                          |\n|-----------|--------------------------------------------------|\n| `*`       | Match everything                                 |\n| `?`       | Match any single character                       |\n| `[seq]`   | Match any character in seq                       |\n| `[!seq]`  | Match any character not in seq                   |\n| `**`      | Match all files, directories, and subdirectories |\n\nIf a filename has any of these special characters, they\ncan be escaped by wrapping them with square brackets.\n\nExample:\n\n```robotframework\n*** Keywords ***\nOpen multiple files buttons\n    # Add all excel files\n    Add files    *.xlsx\n\n    # Add all log files in any subdirectory\n    Add files    **/*.log\n\n    # Add all PDFs between order0 and order9\n    Add files    order[0-9].pdf\n```\n\n```python\ndef open_multiple_files_buttons():\n    assistant = Assistant()\n    # Add all excel files\n    assistant.add_file(\"*.xlsx\")\n    # Add all log files in any subdirectory\n    assistant.add_file(\"**/*.log\")\n    # Add all PDFs between order0 and order9\n    assistant.add_file(\"order[0-9].pdf\")\n    assistant.run_dialog()\n```\n\n#### add_flet_icon(icon: str, color: str | None = None, size: int | None = 24)\n\nAdd an icon from a large gallery of icons.\n\n* **Parameters:**\n  * **icon** \u2013 Corresponding flet icon name. Check\n    [https://gallery.flet.dev/icons-browser/](https://gallery.flet.dev/icons-browser/) for a list of icons.\n    Write the name in `lower_case`\n  * **color** \u2013 Color for the icon. Default depends on icon. Allowed values\n    are colors from\n    [https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors.py#L37](https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors.py#L37)\n    or ARGB/RGB (#FFXXYYZZ or #XXYYZZ).\n  * **size** \u2013 Integer size for the icon.\n\nExample:\n\n```robotframework\n*** Keywords ***\nAdd custom icon\n    Add Heading    Check icon\n    Add Flet Icon  icon_name=check_circle_rounded  color=FF00FF  size=48\n    Run Dialog\n```\n\n```python\ndef add_custom_icon()\n    assistant = Assistant()\n    assistant.add_heading(\"Check icon\")\n    assistant.add_flet_icon(icon=\"check_circle_rounded\", color=\"FF00FF\", size=\"48\")\n    assistant.run_dialog()\n```\n\n#### add_heading(heading: str, size: Size = Size.Medium) \u2192 None\n\nAdd a centered heading text element\n\n* **Parameters:**\n  * **heading** \u2013 The text content for the heading\n  * **size** \u2013 The size of the heading\n\nSupported `size` values are Small, Medium, and Large. By default uses\nthe value Medium.\n\nExample:\n\n```robotframework\n*** Keywords ***\nAdd dialog heading\n    Add heading     User information  size=Large\n    Add heading     Location          size=Small\n    Add text input  address           label=User address\n    Run dialog\n```\n\n```python\ndef add_dialog_heading():\n    assistant = Assistant()\n    assistant.add_heading(\"User information\", size=\"large\")\n    assistant.add_heading(\"Location\", size=\"small\")\n    assistant.add_text_input(\"address\", label=\"User address\")\n    assistant.run_dialog()\n```\n\n#### add_hidden_input(name: str, value: str) \u2192 None\n\nAdd a hidden input element\n\n* **Parameters:**\n  * **name** \u2013 Name of result feild\n  * **value** \u2013 Value for input\n\nAdds a special hidden result field that is not visible\nto the user and always contains the given static value.\n\nCan be used to keep user input together with already known\nvalues such as user IDs, or to ensure that dialogs with differing\nelements all have the same fields in results.\n\nExample:\n\n```robotframework\n*** Keywords ***\nGet user information\n    Add hidden input   user_id   ${USER_ID}\n    Add text input     username\n    ${result}=         Run dialog\n    Enter user information    ${result.user_id}    ${result.username}\n```\n\n```python\ndef get_user_information():\n    assistant = Assistant()\n    user_id = \"Your user value\"\n    assistant.add_hidden_input(\"user_id\", user_id)\n    assistant.add_text_input(\"username\")\n    result = assistant.run_dialog()\n    enter_user_information(result.user_id, result.username)\n```\n\n#### add_icon(variant: Icon, size: int = 48) \u2192 None\n\nAdd an icon element from RPA.Assistant\u2019s short icon list.\n\n* **Parameters:**\n  * **variant** \u2013 The icon type\n  * **size** \u2013 The size of the icon\n\nAdds an icon which can be used to indicate status\nor the type of dialog being presented.\n\nThe currently supported icon types are:\n\n| Name    | Description                |\n|---------|----------------------------|\n| Success | A green check mark         |\n| Warning | An orange warning triangle |\n| Failure | A red cross or X mark      |\n\nThe `size` of the icon can also be changed,\nto a given height/width of pixels.\n\nExample:\n\n```robotframework\n*** Keywords ***\nConfirmation dialog\n    Add icon              Warning    size=64\n    Add heading           Do you want to delete this order?\n    Add submit buttons    buttons=No,Yes\n    ${result}=    Run dialog\n```\n\n```python\ndef confirmation_dialog():\n    assistant = Assistant()\n    assistant.add_icon(\"warning\", size=\"64\")\n    assistant.add_heading(\"Do you want to delete this order?\")\n    assistant.add_submit_buttons(buttons=\"No, Yes\")\n    result = assistant.run_dialog()\n```\n\n#### add_image(url_or_path: str, width: int | None = None, height: int | None = None) \u2192 None\n\nAdd an image element, from a local file or remote URL\n\n* **Parameters:**\n  * **url_or_path** \u2013 The location of the image\n  * **width** \u2013 The static width of the image, in pixels\n  * **height** \u2013 The static height of the image, in pixels\n\nAdds an inline image to the dialog, which can either\npoint to a local file path on the executing machine or to\na remote URL. If it\u2019s a local file path it has to be absolute path.\n\nBy default the image is resized to fit the width of the dialog\nwindow, but the width and/or height can be explicitly defined\nto a custom value. If only one of the dimensions is given,\nthe other is automatically changed to maintain the correct aspect ratio.\n\nExample:\n\n```robotframework\n*** Keywords ***\nDisplay image\n    Add image      C:\\Users\\me\\company-logo.png\n    Add heading    To start, please press the Continue button   size=Small\n    Add submit buttons    Continue\n    Run dialog\n```\n\n#### add_link(url: str, label: str | None = None) \u2192 None\n\nAdd an external URL link element\n\n* **Parameters:**\n  * **url** \u2013 The URL for the link\n  * **label** \u2013 A custom label text for the link\n\nAdds a clickable link element, which opens the user\u2019s default\nbrowser to the given `url`. Optionally a `label` can be given\nwhich is shown as the link text, instead of the raw URL.\n\nExample:\n\n```robotframework\n*** Keywords ***\nDisplay troubleshoot link\n    Add heading    An error occurred\n    Add text       See link for documentation\n    Add link       https://robocorp.com/docs    label=Troubleshooting\n    Run dialog\n```\n\n```python\ndef add_troubleshoot_link():\n    assistant = Assistant()\n    assistant.add_heading(\"An error occurred\")\n    assistant.add_text(\"See link for documentation\")\n    assistant.add_link(\"https://robocorp.com/docs\", label=\"Troubleshooting\")\n    assistant.run_dialog()\n```\n\n#### add_loading_bar(name: str, width: int = 16, bar_height: int = 16, color: str | None = None, tooltip: str | None = None, value: float | None = None)\n\nAdd a loading bar.\n\n* **Parameters:**\n  * **name** \u2013 Name of the element\n  * **width** \u2013 Width of the bar\n  * **bar_height** \u2013 Height of the bar\n  * **color** \u2013 Color of the bar\u2019s stroke.\n    Allowed values are colors from\n    [[https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors](https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors).py#L37|Flet Documentation] (in the format `black12`, `red500`)\n    or ARGB/RGB (#FFXXYYZZ or #XXYYZZ).XXYYZZ\n  * **tooltip** \u2013 Tooltip to be displayed on mouse hover.\n  * **value** \u2013 Between 0.0 and 1.0 if you want to manually control it\u2019s completion.\n    Use None for indeterminate progress indicator.\n\n#### add_loading_spinner(name: str, width: int = 16, height: int = 16, stroke_width: int = 2, color: str | None = None, tooltip: str | None = None, value: float | None = None)\n\nAdd a loading spinner.\n\n* **Parameters:**\n  * **name** \u2013 Name of the element\n  * **width** \u2013 Width of the spinner\n  * **height** \u2013 Height of the spinner\n  * **stroke_width** \u2013 Width of the spinner\u2019s stroke\n  * **color** \u2013 Color of the spinner\u2019s stroke.\n    Allowed values are colors from\n    [[https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors](https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors).py#L37|Flet Documentation] (in the format `black12`, `red500`)\n    or ARGB/RGB (#FFXXYYZZ or #XXYYZZ).XXYYZZ\n  * **tooltip** \u2013 Tooltip to be displayed\n    on mouse hover.\n  * **value** \u2013 Between 0.0 and 1.0 if you want to manually control it\u2019s completion.\n    If None it will spin endlessy.\n\n#### add_next_ui_button(label: str, function: Callable | str)\n\nCreate a button that leads to the next UI page, calling the passed\nkeyword or function, and passing current form results as first positional\nargument to it.\n\n* **Parameters:**\n  * **label** \u2013 Text for the button\n  * **function** \u2013 Python function or Robot Keyword name, that will take form\n    results as its first argument\n\nExample:\n\n```robotframework\n*** Keywords ***\nRetrieve User Data\n    # Retrieves advanced data that needs to be displayed\n\nMain Form\n    Add Heading  Username input\n    Add Text Input  name=username_1  placeholder=username\n    Add Next Ui Button        Show customer details  Customer Details\n\nCustomer Details\n    [Arguments]  ${form}\n    ${user_data}=  Retrieve User Data  ${form}[username_1]\n    Add Heading  Retrieved Data\n    Add Text  ${user_data}[phone_number]\n    Add Text  ${user_data}[address]\n```\n\n```python\ndef main_form():\n    assistant = Assistant()\n    assistant.add_heading(\"Username input\")\n    assistant.add_text_input(\"username_1\", placeholder=\"username\")\n    assistant.add_next_ui_button(\"Show customer details\", customer_details)\n    assistant.run_dialog()\n\ndef customer_details(form):\n    assistant = Assistant()\n    user_data = retrieve_user_data(form.username_1)\n    assistant.add_heading(\"Retrieved Data\")\n    assistant.add_text(user_data[phone_number])\n    assistant.add_text(user_data[address])\n    assistant.run_dialog()\n```\n\n#### add_password_input(name: str, label: str | None = None, placeholder: str | None = None) \u2192 None\n\nAdd a password input element\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **label** \u2013 Label for field\n  * **placeholder** \u2013 Placeholder text in input field\n\nAdds a text field that hides the user\u2019s input. The entered\ncontent will be available in the `name` field of the result.\n\nFor customizing the look of the input, the `label` text can be given\nto add a descriptive label and the `placholder` text can be given\nto act as an example of the input value.\n\nExample:\n\n```robotframework\n*** Keywords ***\nChange password\n    Add heading    Change password\n    Add text input        username    label=Current username\n    Add password input    password    label=New password\n    Add submit buttons    buttons=Submit\n    ${result}=    Run dialog\n    Change user password    ${result.username}  ${result.password}\n```\n\n```python\ndef change_password():\n    assistant = Assistant()\n    assistant.add_heading(\"Change password\")\n    assistant.add_text_input(\"username\", label=\"Current username\")\n    assistant.add_password_input(\"password\", label=\"New password\")\n    assistant.add_submit_buttons(buttons=\"Submit\")\n    result = assistant.run_dialog()\n    change_user_password(result.username, result.password)\n```\n\n#### add_radio_buttons(name: str, options: List[str] | str, default: str | None = None, label: str | None = None) \u2192 None\n\nAdd radio button elements\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **options** \u2013 List of drop-down options\n  * **default** \u2013 The default selection\n  * **label** \u2013 Label for input field\n\nCreates a set of radio buttons with the given `options`. The selection\nthe user makes will be available in the `name` field of the result.\n\nThe `default` argument can be one of the defined options,\nand the dialog automatically selects that option for the input.\n\nA custom `label` text can also be added.\n\nExample:\n\n```robotframework\n*** Keywords ***\nSelect user type from radio buttons\n    Add heading     Select user type\n    Add radio buttons\n    ...    name=user_type\n    ...    options=Admin,Maintainer,Operator\n    ...    default=Operator\n    ...    label=User type\n    ${result}=      Run dialog\n    Log    User type should be: ${result.user_type}\n```\n\n```python\ndef select_user_type_from_radio_buttons():\n    assistant = Assistant()\n    assistant.add_heading(\"Select user type\")\n    assistant.add_radio_buttons(\n        name=\"user_type\",\n        options=\"Admin,Maintainer,Operator\",\n        default=\"Operator\",\n        label=\"User type\"\n    )\n    result = assistant.run_dialog()\n    print(\"User type should be: \", result.user_type)\n```\n\n#### add_slider(name: str, slider_min: int | float = 0, slider_max: int | float = 100, thumb_text='{value}', steps: int | None = None, default: int | float | None = None, decimals: int | None = 1)\n\nAdd a slider input.\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **slider_min** \u2013 Minimum value of the slider\n  * **slider_max** \u2013 Maximum value of the slider\n  * **thumb_label** \u2013 Text to display when the slider is being slided. Use the\n    placeholder {value} for the number. (thumb text {value%}\n    will display values: 0%, 100%)\n  * **steps** \u2013 Amount of steps for the slider. If None, the slider will be\n    continuous.\n    For integer output, specify a steps value where all the\n    steps will be integers, or implement rounding when\n    retrieving the result.\n  * **default** \u2013 Default value for the slider. Must be between min and max.\n  * **decimals** \u2013 How many decimals should the value have and show.\n\n```robotframework\n*** Keywords ***\nCreate Percentage Slider\n    Add Text    Percentage slider\n    Add Slider  name=percentage  slider_min=0  slider_max=100\n                thumb_text={value}%  steps=100  round=1\n```\n\n```python\ndef create_percentage_slider():\n    assistant = Assistant()\n    assistant.add_text(\"Percentage slider\")\n    assistant.add_slider(\n        name=\"percentage\",\n        slider_min=0,\n        slider_max=100,\n        thumb_text=\"{value}%\",\n        steps=100,\n        decimals=1\n    )\n    assistant.run_dialog()\n```\n\n#### add_submit_buttons(buttons: List[str] | str, default: str | None = None) \u2192 None\n\nAdd custom submit buttons\n\n* **Parameters:**\n  * **buttons** \u2013 Submit button options\n  * **default** \u2013 The primary button\n\nThe result field will always be called `submit` and will contain\nthe pressed button text as a value.\n\nIf one of the custom `options` should be the preferred option,\nthe `default` argument controls which one is highlighted with\nan accent color.\n\nExample:\n\n```robotframework\n*** Keywords ***\nDelete user warning\n    Add icon      Warning\n    Add heading   Delete user ${username}?\n    Add submit buttons    buttons=No,Yes    default=Yes\n    ${result}=    Run dialog\n    IF   $result.submit == \"Yes\"\n        Delete user    ${username}\n    END\n```\n\n```python\ndef delete_user_warning():\n    assistant = Assistant()\n    username = \"user_01\"\n    assistant.add_icon(\"warning\")\n    assistant.add_heading(f\"Delete user {username}?\")\n    assistant.add_submit_buttons(buttons=\"No, Yes\", default=\"Yes\")\n    result = assistant.run_dialog()\n    if result.submit == \"Yes\":\n        delete_user(username)\n```\n\n#### add_text(text: str, size: Size = Size.Medium) \u2192 None\n\nAdd a text paragraph element, for larger bodies of text\n\n* **Parameters:**\n  * **text** \u2013 The text content for the paragraph\n  * **size** \u2013 The size of the text\n\nSupported `size` values are Small, Medium, and Large. By default uses\nthe value Medium.\n\nExample:\n\n```robotframework\n*** Keywords ***\nShow error dialog\n    Add heading   An error occurred\n    Add text      There was an error while requesting user information\n    Add text      ${error}   size=Small\n    Run dialog\n```\n\n```python\ndef show_error_dialog():\n    error = \"Your error message\"\n    assistant = Assistant()\n    assistant.add_heading(\"An error occurred\")\n    assistant.add_text(\"There was an error while requesting user information\")\n    assistant.add_text(f\"{error}\", size=\"small\")\n    assistant.run_dialog()\n```\n\n#### add_text_input(name: str, label: str | None = None, placeholder: str | None = None, validation: Callable | str | None = None, default: str | None = None, required: bool = False, minimum_rows: int | None = None, maximum_rows: int | None = None) \u2192 None\n\nAdd a text input element\n\n* **Parameters:**\n  * **name** \u2013 Name of result field\n  * **label** \u2013 Label for field\n  * **placeholder** \u2013 Placeholder text in input field\n  * **validation** \u2013 Validation function for the input field\n  * **default** \u2013 Default value if the field wasn\u2019t completed\n  * **required** \u2013 If true, will display an error if not completed\n  * **minimum_rows** \u2013 Minimum number of rows to display for the input field\n  * **maximum_rows** \u2013 Maximum number of rows to display for the input field, the\n    input content can be longer but a scrollbar will appear\n\nAdds a text field that can be filled by the user. The entered\ncontent will be available in the `name` field of the result.\n\nFor customizing the look of the input, the `label` text can be given\nto add a descriptive label and the `placholder` text can be given\nto act as an example of the input value.\n\nThe default value will be assigned to the input field if the user\ndoesn\u2019t complete it. If provided, the placeholder won\u2019t be shown.\nThis is None by default. Also, if a default value is provided\nand the user deletes it, None will be the corresponding value in\nthe results dictionary.\n\nExample:\n\n```robotframework\n*** Keywords ***\nSend feedback\n    Add heading    Send feedback\n    Add text input    email    label=E-mail address\n    Add text input    message\n    ...    label=Feedback\n    ...    placeholder=Enter feedback here\n    ${result}=    Run dialog\n    Send feedback message    ${result.email}  ${result.message}\n```\n\nValidation example:\n\n```robotframework\n*** Keywords ***\nValidate Email\n    [Arguments]    ${email}\n    # E-mail specification is complicated, this matches that the e-mail has\n    # at least one character before and after the @ sign, and at least one\n    # character after the dot.\n    ${regex}=    Set Variable    ^.+@.+\\..+\n    ${valid}=    Run Keyword And Return Status    Should Match Regexp  ${email}  ${regex}\n    IF  not $valid\n        RETURN  Invalid email address\n    END\n\nOpen Dialog\n    Add heading    Send feedback\n    Add text input    email\n    ...    label=Email\n    ...    validation=Validate Email\n    ${result}=    Run dialog\n    Log  ${result.email}\n```\n\n```python\nimport re\ndef validate_email(email):\n    # E-mail specification is complicated, this matches that the e-mail has\n    # at least one character before and after the @ sign, and at least one\n    # character after the dot.\n    regex = r\"^.+@.+\\..+\"\n    valid = re.match(regex, email)\n    if not valid:\n        return \"Invalid email address\"\n\ndef open_dialog():\n    assistant.add_heading(\"Send feedback\")\n    assistant.add_text_input(\"email\", label=\"Email\", validation=validate_email)\n    result = run_dialog()\n    print(result.email)\n```\n\n#### ask_user(timeout: int = 180, \\*\\*options: Any) \u2192 Dict[str, Any]\n\nSame as `Run Dialog` it will create a dialog from all the defined\nelements and block until the user has handled it. It will also add\nby default a submit and close buttons.\n\n* **Parameters:**\n  * **timeout** \u2013 Time to wait for dialog to complete, in seconds\n  * **options** \u2013 Options for the dialog\n\nReturns a result object with all input values.\n\nFor more information about possible options for opening the dialog,\nsee the documentation for the keyword `Run Dialog`.\n\nExample:\n\n```robotframework\n*** Keywords ***\nAsk user dialog\n    Add heading     Please enter your username\n    Add text input  name=username\n    ${result}=      Ask User\n    Log    The username is: ${result.username}\n```\n\n```python\ndef ask_user_dialog():\n    assistant = Assistant()\n    assistant.add_heading(\"Please enter your username\")\n    assistant.add_text_input(\"username\")\n    result = assistant.ask_user()\n    print(\"The username is: \", result.username)\n```\n\n#### clear_dialog() \u2192 None\n\nClear dialog and results while it is running.\n\n#### close_column()\n\nCloses previously opened Column.\n\nRaises LayoutError if called with no Column open, or if another layout element\nwas opened more recently than a Column.\n\n#### close_container()\n\nClose previously opened container.\n\nRaises LayoutError if called with no Row open, or if another layout element was\nopened more recently than a row.\n\n#### close_navbar()\n\nClose previously opened navbar.\n\nRaises LayoutError if called with no Row open, or if another layout element was\nopened more recently than a row.\n\n#### close_row()\n\nClose previously opened row.\n\nRaises LayoutError if called with no Row open, or if another layout element was\nopened more recently than a row.\n\n#### close_stack()\n\nClose previously opened Stack.\n\nRaises LayoutError if called with no Stack open, or if another layout element\nwas opened more recently than a Stack.\n\n#### open_column()\n\nOpen a Column layout container. Following `Add <element>` calls will add\nitems into that Column until `Close Column` is called.\n\n```robotframework\n*** Keywords ***\nDouble Column Layout\n    Open Row\n    Open Column\n    Add Text      First item in the first column\n    Add Text      Second item on the first column\n    Close Column\n    Open Column\n    Add Text      First item on the second column\n    Close Column\n    Close Row\n```\n\n```python\ndef double_column_layout():\n    assistant = Assistant()\n    assistant.open_row()\n    assistant.open_column()\n    assistant.add_text(\"First item in the first column\")\n    assistant.add_text(\"Second item on the first column\")\n    assistant.close_column()\n\n    assistant.open_column()\n    assistant.add_text(\"First item on the second column\")\n    assistant.close_column()\n    assistant.close_row()\n\n    assistant.run_dialog()\n```\n\n#### open_container(margin: int | None = 5, padding: int | None = None, width: int | None = None, height: int | None = None, background_color: str | None = None, location: Location | Tuple[int, int] | None = None)\n\nOpen a single element container. The following `Add <element>` calls adds\nan element inside the container. Can be used for styling elements.\n\n* **Parameters:**\n  * **margin** \u2013 How much margin to add around the container. RPA.Assistant adds\n    by default a container of margin 5 around all elements, to have\n    a smaller margin use containers with smaller margin value for\n    elements.\n  * **padding** \u2013 How much padding to add around the content of the container.\n  * **width** \u2013 Width of the container.\n  * **height** \u2013 Height of the container.\n  * **bgcolor** \u2013 Background color for the container. Default depends on icon.\n    Allowed values are colors from\n    [[https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors](https://github.com/flet-dev/flet/blob/035b00104f782498d084c2fd7ee96132a542ab7f/sdk/python/packages/flet-core/src/flet_core/colors).py#L37|Flet Documentation] (in the format `black12`, `red500`)\n    or ARGB/RGB (#FFXXYYZZ or #XXYYZZ).XXYYZZ\n  * **location** \u2013 \n\n    Where to place the container (A Location value or tuple of\n    ints). Only works inside a Stack layout element.\n\n    To use any Center_\\_\\_ or \\_\\_\\_Center locations you must define\n    width and height to the element.\n\n```robotframework\n*** Keywords ***\nPadded Element With Background\n    Open Container  padding=20  background_color=blue500\n    Add Text        sample text\n    Close Container\n```\n\n```python\ndef padded_element_with_background():\n    assistant = Assistant()\n    assistant.open_container(padding=20, background_color=\"blue500\")\n    assistant.add_text(\"Sample text\")\n    assistant.close_container()\n    assistant.run_dialog()\n```\n\n#### open_navbar(title: str | None = None)\n\nCreate a Navigation Bar. Following `Add <element>` calls will add\nitems into the Navbar until `Close Navbar` is called.\n\nNavbar doesn\u2019t clear when Clear Dialog is called.\n\nOnly one Navbar can be initialized at a time. Trying to make a second one will\nraise a LayoutError.\n\n```robotframework\n*** Keywords ***\n    Go To Start Menu\n        Add Heading  Start menu\n        Add Text  Start menu content\n\n    Assistant Navbar\n        Open Navbar  title=Assistant\n        Add Button   menu  Go To Start Menu\n        Close Navbar\n```\n\n```python\ndef go_to_start_menu():\n    assistant = Assistant()\n    assistant.add_heading(\"Start menu\")\n    assistant.add_text(\"Start menu content\")\n    assistant.run_dialog()\n\ndef assistant_navbar():\n    assistant = Assistant()\n    assistant.open_navbar(title=\"Assistant\")\n    assistant.add_button(\"menu\", go_to_start_menu)\n    assistant.close_navbar()\n    assistant.run_dialog()\n```\n\n#### open_row()\n\nOpen a row layout container. Following `Add <element>` calls will add\nitems into that row until `Close Row` is called.\n\n```robotframework\n*** Keywords ***\nSide By Side Elements\n    Open Row\n    Add Text  First item on the row\n    Add Text  Second item on the row\n    Close Row\n```\n\n```python\ndef side_by_side_elements():\n    assistant = Assistant()\n    assistant.open_row()\n    assistant.add_text(\"First item on the row\")\n    assistant.add_text(\"Second item on the row\")\n    assistant.close_row()\n    assistant.run_dialog()\n```\n\n#### open_stack(width: int | None = None, height: int | None = None)\n\nCreate a \u201cStack\u201d layout element. Stack can be used to position elements\nabsolutely and to have overlapping elements in your layout. Use Container\u2019s\ntop and left arguments to position the elements in a stack.\n\n```robotframework\n*** Keywords ***\nAbsolutely Positioned Elements\n    # Positioning containers with relative location values requires\n    # absolute size for the Stack\n    Open Stack  height=360  width=360\n\n    Open Container  width=64  height=64  location=Center\n    Add Text  center\n    Close Container\n\n    Open Container  width=64  height=64  location=TopRight\n    Add Text  top right\n    Close Container\n\n    Open Container  width=64  height=64  location=BottomRight\n    Add Text  bottom right\n    Close Container\n\n    Close Stack\n```\n\n```python\ndef absolutely_positioned_elements():\n    # Positioning containers with relative location values requires\n    # absolute size for the Stack\n    assistant = Assistant()\n    assistant.open_stack(height=360, width=360)\n\n    assistant.open_container(width=64, height=64, location=Center)\n    assistant.add_text(\"center\")\n    assistant.close_container()\n\n    assistant.open_container(width=64, height=64, location=TopRight)\n    assistant.add_text(\"top right\")\n    assistant.close_container()\n\n    assistant.open_container(width=64, height=64, location=BottomRight)\n    assistant.add_text(\"bottom right\")\n    assistant.close_container()\n\n    assistant.close_stack()\n    assistant.run_dialog()\n```\n\n#### refresh_dialog()\n\nCan be used to update UI elements when adding elements while dialog is\nrunning\n\n#### run_dialog(timeout: int = 180, title: str = 'Assistant', height: int | typing_extensions.Literal[AUTO] = 'AUTO', width: int = 480, on_top: bool = False, location: WindowLocation | Tuple[int, int] | None = None) \u2192 Dict[str, Any]\n\nCreate a dialog from all the defined elements and block\nuntil the user has handled it.\n\n* **Parameters:**\n  * **timeout** \u2013 Time to wait for dialog to complete, in seconds\n  * **title** \u2013 Title of dialog\n  * **height** \u2013 Height of dialog (in pixels or \u2018AUTO\u2019)\n  * **width** \u2013 Width of dialog (in pixels)\n  * **on_top** \u2013 Show dialog always on top of other windows\n  * **location** \u2013 Where to place the dialog (options are Center, TopLeft, or a\n    tuple of ints)\n\nIf the location argument is None it will let the operating system\nplace the window.\n\nReturns a result object with all input values.\n\nWhen the dialog closes elements are cleared.\n\nExample:\n\n```robotframework\n*** Keywords ***\nOpen dialog\n    Add heading     Please enter your username\n    Add text input  name=username\n    ${result}=      Run dialog\n    Log    The username is: ${result.username}\n```\n\n```python\ndef open_dialog():\n    assistant = Assistant()\n    assistant.add_heading(\"Please enter your username\")\n    assistant.add_text_input(\"username\")\n    result = assistant.run_dialog()\n    print(\"The username is: \", result.username)\n```\n\n#### set_title(title: str)\n\nSet dialog title when it is running.\n"
  },
  {
    "module": "RPA.Browser.Selenium.Selenium",
    "markdown": "# Python API\n\n## Browser.Selenium\n\n### *class* RPA.Browser.Selenium.Selenium(\\*args, \\*\\*kwargs)\n\nSeleniumLibrary is a web testing library for Robot Framework.\n\nThis document explains how to use keywords provided by SeleniumLibrary. For information about installation, support, and more, please visit the [project pages](https://github.com/robotframework/SeleniumLibrary). For more information about Robot Framework, see [http://robotframework.org](http://robotframework.org).\n\nSeleniumLibrary uses the Selenium WebDriver modules internally to control a web browser. See [http://seleniumhq.org](http://seleniumhq.org) for more information about Selenium in general and SeleniumLibrary README.rst [Browser drivers chapter](https://github.com/robotframework/SeleniumLibrary#browser-drivers) for more details about WebDriver binary installation.\n\n%TOC%\n\n**Locating elements**\n\nAll keywords in SeleniumLibrary that need to interact with an element on a web page take an argument typically named `locator` that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but using WebElements is possible too.\n\n**Locator syntax**\n\nSeleniumLibrary supports finding elements based on different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.\n\n**Default locator strategy**\n\nBy default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on `id` and `name` attributes, but some keywords support additional attributes or other values that make sense in their context. For example, Click Link supports the `href` attribute and the link text and addition to the normal `id` and `name`.\n\nExamples:\n\n|               |         |                                             |\n|---------------|---------|---------------------------------------------|\n| Click Element | example | # Match based on `id` or `name`.            |\n| Click Link    | example | # Match also based on link text and `href`. |\n| Click Button  | example | # Match based on `id`, `name` or `value`.   |\n\nIf a locator accidentally starts with a prefix recognized as explicit locator strategy or implicit XPath strategy, it is possible to use the explicit `default` prefix to enable the default strategy.\n\nExamples:\n\n|               |                  |                                               |\n|---------------|------------------|-----------------------------------------------|\n| Click Element | name:foo         | # Find element with name `foo`.               |\n| Click Element | default:name:foo | # Use default strategy with value `name:foo`. |\n| Click Element | //foo            | # Find element using XPath `//foo`.           |\n| Click Element | default: //foo   | # Use default strategy with value `//foo`.    |\n\n**Explicit locator strategy**\n\nThe explicit locator strategy is specified with a prefix using either syntax `strategy:value` or `strategy=value`. The former syntax is preferred because the latter is identical to Robot Framework\u2019s [named argument syntax](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax) and that can cause problems. Spaces around the separator are ignored, so `id:foo`, `id: foo` and `id : foo` are all equivalent.\n\nLocator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register custom locators.\n\n| Strategy     | Match based on                     | Example                      |\n|--------------|------------------------------------|------------------------------|\n| id           | Element `id`.                      | `id:example`                 |\n| name         | `name` attribute.                  | `name:example`               |\n| identifier   | Either `id` or `name`.             | `identifier:example`         |\n| class        | Element `class`.                   | `class:example`              |\n| tag          | Tag name.                          | `tag:div`                    |\n| xpath        | XPath expression.                  | `xpath://div[@id=\"example\"]` |\n| css          | CSS selector.                      | `css:div#example`            |\n| dom          | DOM expression.                    | `dom:document.images[5]`     |\n| link         | Exact text a link has.             | `link:The example`           |\n| partial link | Partial link text.                 | `partial link:he ex`         |\n| sizzle       | Sizzle selector deprecated.        | `sizzle:div.example`         |\n| data         | Element `data-*` attribute         | `data:id:my_id`              |\n| jquery       | jQuery expression.                 | `jquery:div.example`         |\n| default      | Keyword specific default behavior. | `default:example`            |\n\nSee the Default locator strategy section below for more information about how the default strategy works. Using the explicit `default` prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.\n\nDifferent locator strategies have different pros and cons. Using ids, either explicitly like `id:foo` or by using the default locator strategy simply like `foo`, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using `tag`, `class` or `css` strategy like `tag:h1`, `class:example` or `css:h1.example` is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.\n\nExamples:\n\n|               |                                                                             |                                           |\n|---------------|-----------------------------------------------------------------------------|-------------------------------------------|\n| Click Element | id:foo                                                                      | # Element with id \u2018foo\u2019.                  |\n| Click Element | css:div#foo h1                                                              | # h1 element under div with id \u2018foo\u2019.     |\n| Click Element | xpath: //div[@id=\u201dfoo\u201d]//h1                                                 | # Same as the above using XPath, not CSS. |\n| Click Element | xpath: //<br/><br/>```<br/>*<br/>```<br/><br/>[contains(text(), \u201cexample\u201d)] | # Element containing text \u2018example\u2019.      |\n\n**NOTE:**\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Using the `sizzle` strategy or its alias `jquery` requires that the system under test contains the jQuery library.\n- Prior to SeleniumLibrary 3.0, table related keywords only supported `xpath`, `css` and `sizzle/jquery` strategies.\n- `data` strategy is conveniance locator that will construct xpath from the parameters. If you have element like <div data-automation=\u201dautomation-id-2\u201d>, you locate the element via `data:automation:automation-id-2`. This feature was added in SeleniumLibrary 5.2.0\n\n**Implicit XPath strategy**\n\nIf the locator starts with `//`  or multiple opening parenthesis in front of the `//`, the locator is considered to be an XPath expression. In other words, using `//div` is equivalent to using explicit `xpath://div` and `((//div))` is equivalent to using explicit `xpath:((//div))`\n\nExamples:\n\n|               |                      |\n|---------------|----------------------|\n| Click Element | //div[@id=\u201dfoo\u201d]//h1 |\n| Click Element | (//div)[2]           |\n\nThe support for the `(//` prefix is new in SeleniumLibrary 3.0. Supporting multiple opening parenthesis is new in SeleniumLibrary 5.0.\n\n**Chaining locators**\n\nIt is possible chain multiple locators together as single locator. Each chained locator must start with locator strategy. Chained locators must be separated with single space, two greater than characters and followed with space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be used to specify multiple locators. This is useful, is some part of locator would match as the locator separator but it should not. Or if there is need to existing WebElement as locator.\n\nAlthough all locators support chaining, some locator strategies do not abey the chaining. This is because some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context and not for the element found be the previous locator. Chaining is supported by locator strategies which are based on Selenium API, like xpath or css, but example chaining is not supported by sizzle or \n\n```\n`\n```\n\njquery\n\nExamples:\n\n|               |                                    |                                                                     |\n|---------------|------------------------------------|---------------------------------------------------------------------|\n| Click Element | css:.bar >> [xpath://a](xpath://a) | # To find a link which is present after an element with class \u201cbar\u201d |\n\nList examples:\n\n|                             |                 |                                               |                                               |\n|-----------------------------|-----------------|-----------------------------------------------|-----------------------------------------------|\n| ${locator_list} =           | Create List     | css:div#div_id                                | [xpath://\\*[text(](xpath://*[text()), \u201c >> \u201c] |\n| Page Should Contain Element | ${locator_list} |                                               |                                               |\n| ${element} =                | Get WebElement  | [xpath://\\*[text(](xpath://*[text()), \u201c >> \u201c] |                                               |\n| ${locator_list} =           | Create List     | css:div#div_id                                | ${element}                                    |\n| Page Should Contain Element | ${locator_list} |                                               |                                               |\n\nChaining locators in new in SeleniumLibrary 5.0\n\n**Using WebElements**\n\nIn addition to specifying a locator as a string, it is possible to use Selenium\u2019s WebElement objects. This requires first getting a WebElement, for example, by using the Get WebElement keyword.\n\n|               |                |            |\n|---------------|----------------|------------|\n| ${elem} =     | Get WebElement | id:example |\n| Click Element | ${elem}        |            |\n\n**Custom locators**\n\nIf more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:\n\n|                         |                                        |                                                  |                                                                     |        |                |\n|-------------------------|----------------------------------------|--------------------------------------------------|---------------------------------------------------------------------|--------|----------------|\n| Custom Locator Strategy | [Arguments]<br/>${element}=<br/>RETURN | ${browser}<br/>Execute Javascript<br/>${element} | ${locator}<br/>return window.document.getElementById(\u2018${locator}\u2019); | ${tag} | ${constraints} |\n\nThis keyword is a reimplementation of the basic functionality of the `id` locator where `${browser}` is a reference to a WebDriver instance and `${locator}` is the name of the locator strategy. To use this locator, it must first be registered by using the Add Location Strategy keyword:\n\n|                       |        |                         |\n|-----------------------|--------|-------------------------|\n| Add Location Strategy | custom | Custom Locator Strategy |\n\nThe first argument of Add Location Strategy specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:\n\n|               |                |\n|---------------|----------------|\n| Click Element | custom:example |\n\nSee the Add Location Strategy keyword for more details.\n\n**Browser and Window**\n\nThere is different conceptual meaning when SeleniumLibrary talks about windows or browsers. This chapter explains those differences.\n\n**Browser**\n\nWhen Open Browser or Create WebDriver keyword is called, it will create a new Selenium WebDriver instance by using the [Selenium WebDriver](https://www.seleniumhq.org/docs/03_webdriver.jsp) API. In SeleniumLibrary terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling Open Browser or Create WebDriver multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.\n\n**Window**\n\nWindows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In SeleniumLibrary browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example Execute Javascript keyword:\n\n```default\n`Execute Javascript`    window.open()    # Opens a new window with location about:blank\n```\n\nThe example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.\n\nStructure:\n\n```default\nBrowserA\n           Window 1  (location=https://robotframework.org/)\n           Window 2  (location=https://robocon.io/)\n           Window 3  (location=https://github.com/robotframework/)\n\nBrowserB\n           Window 1  (location=https://github.com/)\n```\n\nExample:\n\n|                    |                                                                          |                  |                |                                                                               |\n|--------------------|--------------------------------------------------------------------------|------------------|----------------|-------------------------------------------------------------------------------|\n| Open Browser       | [https://robotframework.org](https://robotframework.org)                 | ${BROWSER}       | alias=BrowserA | # BrowserA with first window is opened.                                       |\n| Execute Javascript | window.open()                                                            |                  |                | # In BrowserA second window is opened.                                        |\n| Switch Window      | locator=NEW                                                              |                  |                | # Switched to second window in BrowserA                                       |\n| Go To              | [https://robocon.io](https://robocon.io)                                 |                  |                | # Second window navigates to robocon site.                                    |\n| Execute Javascript | window.open()                                                            |                  |                | # In BrowserA third window is opened.                                         |\n| ${handle}          | Switch Window                                                            | locator=NEW      |                | # Switched to third window in BrowserA                                        |\n| Go To              | [https://github.com/robotframework/](https://github.com/robotframework/) |                  |                | # Third windows goes to robot framework github site.                          |\n| Open Browser       | [https://github.com](https://github.com)                                 | ${BROWSER}       | alias=BrowserB | # BrowserB with first windows is opened.                                      |\n| ${location}        | Get Location                                                             |                  |                | # ${location} is: [https://www.github.com](https://www.github.com)            |\n| Switch Window      | ${handle}                                                                | browser=BrowserA |                | # BrowserA second windows is selected.                                        |\n| ${location}        | Get Location                                                             |                  |                | # ${location} = [https://robocon.io/](https://robocon.io/)                    |\n| @{locations 1}     | Get Locations                                                            |                  |                | # By default, lists locations under the currectly active browser (BrowserA).  |\n| @{locations 2}     | Get Locations                                                            | browser=ALL      |                | # By using browser=ALL argument keyword list all locations from all browsers. |\n\nThe above example, @{locations 1} contains the following items: [https://robotframework.org/](https://robotframework.org/), [https://robocon.io/](https://robocon.io/) and [https://github.com/robotframework/](https://github.com/robotframework/)\u2019. The @{locations 2} contains the following items: [https://robotframework.org/](https://robotframework.org/), [https://robocon.io/](https://robocon.io/), [https://github.com/robotframework/](https://github.com/robotframework/)\u2019 and \u2018[https://github.com/](https://github.com/).\n\n**Browser and Driver options and service class**\n\nThis section talks about how to configure either the browser or the driver using the options and service arguments of the Open Browser keyword.\n\n**Configuring the browser using the Selenium Options**\n\nAs noted within the keyword documentation for Open Browser, its `options` argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.\n\n**Options string format**\n\nThe string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: add_argument(\u201d\u2013headless\u201d) or add_experimental_option(\u201ckey\u201d, \u201cvalue\u201d). Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, headless=True. Multiple methods and attributes must be separated by a semicolon. Example: add_argument(\u201d\u2013headless\u201d);add_argument(\u201d\u2013start-maximized\u201d).\n\nArguments allow defining Python data types and arguments are evaluated by using Python [ast.literal_eval](https://docs.python.org/3/library/ast.html#ast.literal_eval). Strings must be quoted with single or double quotes, example \u201cvalue\u201d or \u2018value\u2019. It is also possible to define other Python builtin data types, example True or None, by not using quotes around the arguments.\n\nThe string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example add_argument ( \u201c\u2013headless\u201d ) is same as add_argument(\u201d\u2013headless\u201d). But add_argument(\u201d \u2013headless \u201c) is not same same as add_argument ( \u201c\u2013headless\u201d ), because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \u201cC:pathtoprofile\u201d must be written as \u201cC:\\\\\\\\path\\\\to\\\\\\\\profile\u201d. Another way to write backslash is use Python [raw strings](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals) and example write: r\u201dC:\\\\path\\\\to\\\\profile\u201d.\n\n**Selenium Options as Python class**\n\nAs last format, `options` argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to ${options} variable in the Robot Framework data:\n\n```default\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n```\n\nThen the ${options} variable can be used as an argument to `options`.\n\nExample the `options` argument can be used to launch Chomium-based applications which utilize the [Chromium Embedded Framework](https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver) . To launch Chromium-based application, use `options` to define binary_location attribute and use add_argument method to define remote-debugging-port port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.\n\n**Configuring the driver using the Service class**\n\nWith the `service` argument, one can setup and configure the driver. For example one can set the driver location and/port or specify the command line arguments. There are several browser specific attributes related to logging as well. For the various Service Class attributes refer to [the Selenium documentation](https://www.selenium.dev/documentation/webdriver/drivers/service/) . Currently the `service` argument only accepts Selenium service in the string format.\n\n**Service string format**\n\nThe string format allows for defining Selenium service attributes and their values in the Open Browser keyword. The attributes names are case and space sensitive and must match to the Selenium attributes names. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, port=1234. Multiple attributes must be separated by a semicolon. Example: executable_path=\u2019/path/to/driver\u2019;port=1234. Don\u2019t have duplicate attributes, like service_args=[\u2019\u2013append-log\u2019, \u2018\u2013readable-timestamp\u2019]; service_args=[\u2019\u2013log-level=DEBUG\u2019] as the second will override the first. Instead combine them as in service_args=[\u2019\u2013append-log\u2019, \u2018\u2013readable-timestamp\u2019, \u2018\u2013log-level=DEBUG\u2019]\n\nArguments allow defining Python data types and arguments are evaluated by using Python. Strings must be quoted with single or double quotes, example \u201cvalue\u201d or \u2018value\u2019\n\n**Timeouts, waits, and delays**\n\nThis section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the time format that can be used when setting various timeouts, waits, and delays.\n\n**Timeout**\n\nSeleniumLibrary contains various keywords that have an optional `timeout` argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, `Wait ...` keywords and keywords related to alerts. Additionally Execute Async Javascript. Although it does not have `timeout`, argument, uses a timeout to define how long asynchronous JavaScript can run.\n\nThe default timeout these keywords use can be set globally either by using the Set Selenium Timeout keyword or with the `timeout` argument when importing the library. If no default timeout is set globally, the default is 5 seconds. If None is specified for the timeout argument in the keywords, the default is used. See time format below for supported timeout syntax.\n\n**Implicit wait**\n\nImplicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the Set Selenium Implicit Wait keyword or with the `implicit_wait` argument when importing the library. See [Selenium documentation](https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp) for more information about this functionality.\n\nSee time format below for supported syntax.\n\n**Page load**\n\nPage load timeout is the amount of time to wait for page load to complete until a timeout exception is raised.\n\nThe default page load timeout can be set globally when importing the library with the `page_load_timeout` argument or by using the Set Selenium Page Load Timeout keyword.\n\nSee time format below for supported timeout syntax.\n\nSupport for page load is new in SeleniumLibrary 6.1\n\n**Selenium speed**\n\nSelenium execution speed can be slowed down globally by using Set Selenium speed keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.\n\nSee time format below for supported syntax.\n\n**Time format**\n\nAll timeouts and waits can be given as numbers considered seconds (e.g. `0.5` or `42`) or in Robot Framework\u2019s time syntax (e.g. `1.5 seconds` or `1 min 30 s`). For more information about the time syntax see the [Robot Framework User Guide](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format).\n\n**Run-on-failure functionality**\n\nSeleniumLibrary has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the Capture Page Screenshot keyword, but this can be changed either by using the Register Keyword To Run On Failure keyword or with the `run_on_failure` argument when importing the library. It is possible to use any keyword from any imported library or resource file.\n\nThe run-on-failure functionality can be disabled by using a special value `NOTHING` or anything considered false (see Boolean arguments) such as `NONE`.\n\n**Boolean arguments**\n\nStarting from 5.0 SeleniumLibrary relies on Robot Framework to perform the boolean conversion based on keyword arguments [type hint](https://docs.python.org/3/library/typing.html). More details in Robot Framework [user guide](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions)\n\nPlease note SeleniumLibrary 3 and 4 did have own custom methods to covert arguments to boolean values.\n\n**EventFiringWebDriver**\n\nThe SeleniumLibrary offers support for [EventFiringWebDriver](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver). See the Selenium and SeleniumLibrary [EventFiringWebDriver support](https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#EventFiringWebDriver) documentation for further details.\n\nEventFiringWebDriver is new in SeleniumLibrary 4.0\n\n**Thread support**\n\nSeleniumLibrary is not thread-safe. This is mainly due because the underlying [Selenium tool is not thread-safe](https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe) within one browser/driver instance. Because of the limitation in the Selenium side, the keywords or the API provided by the SeleniumLibrary is not thread-safe.\n\n**Plugins**\n\nSeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal functionality without creating a new library or hacking the source code. See [plugin API](https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#Plugins) documentation for further details.\n\nPlugin API is new SeleniumLibrary 4.0\n\n**Language**\n\nSeleniumLibrary offers the possibility to translate keyword names and documentation to new language. If language is defined, SeleniumLibrary will search from [module search path](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path) for Python packages starting with robotframework-seleniumlibrary-translation by using the [Python pluging API](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/). The Library is using naming convention to find Python plugins.\n\nThe package must implement a single API call, `get_language` without any arguments. The method must return a dictionary containing two keys: `language` and `path`. The language key value defines which language the package contains. Also the value should match (case insensitive) the library `language` import parameter. The path parameter value should be full path to the translation file.\n\n**Translation file**\n\nThe file name or extension is not important, but data must be in [json](https://www.json.org/json-en.html) format. The keys of json are the methods names, not the keyword names, which implements keywords. Value of key is json object which contains two keys: `name` and `doc`. The `name` key contains the keyword translated name and doc contains translated documentation. Providing doc and name are optional, example translation json file can only provide translations to keyword names or only to documentation. But it is always recommended to provide translation to both name and doc. Special key `__intro__` is for class level documentation and `__init__` is for init level documentation. These special values `name` can not be translated, instead `name` should be kept the same.\n\n**Generating template translation file**\n\nTemplate translation file, with English language can be created by running: rfselib translation /path/to/translation.json command. Command does not provide translations to other languages, it only provides easy way to create full list keywords and their documentation in correct format. It is also possible to add keywords from library plugins by providing \u2013plugins arguments to command. Example: rfselib translation \u2013plugins myplugin.SomePlugin /path/to/translation.json The generated json file contains sha256 key, which contains the sha256 sum of the library documentation. The sha256 sum is used by rfselib translation \u2013compare /path/to/translation.json command, which compares the translation to the library and prints outs a table which tells if there are changes needed for the translation file.\n\nExample project for translation can be found from [robotframework-seleniumlibrary-translation-fi](https://github.com/MarketSquare/robotframework-seleniumlibrary-translation-fi) repository.\n\n**Auto closing browser**\n\nBy default, the browser instances created during a task execution are closed at the end of the task. This can be prevented with the `auto_close` parameter when **importing** the library.\n\nThe value of the parameter needs to be set to `False` or any object evaluated as false (see Boolean arguments).\n\n#### AVAILABLE_OPTIONS *= {'chrome': <class 'selenium.webdriver.chrome.options.Options'>, 'chromiumedge': <class 'selenium.webdriver.edge.options.Options'>, 'edge': <class 'selenium.webdriver.edge.options.Options'>, 'firefox': <class 'RPA.Browser.Selenium.FirefoxOptions'>, 'ie': <class 'selenium.webdriver.ie.options.Options'>, 'safari': <class 'selenium.webdriver.safari.options.Options'>}*\n\n#### AVAILABLE_SERVICES *= {'chrome': (<class 'selenium.webdriver.chrome.service.Service'>, 'chromedriver'), 'chromiumedge': (<class 'selenium.webdriver.edge.service.Service'>, 'msedgedriver'), 'edge': (<class 'selenium.webdriver.edge.service.Service'>, 'msedgedriver'), 'firefox': (<class 'selenium.webdriver.firefox.service.Service'>, 'geckodriver'), 'ie': (<class 'selenium.webdriver.ie.service.Service'>, 'IEDriverServer'), 'safari': (<class 'selenium.webdriver.safari.service.Service'>, 'safaridriver')}*\n\n#### BROWSER_NAMES *= {'chrome': 'chrome', 'chromiumedge': 'edge', 'edge': 'edge', 'ff': 'firefox', 'firefox': 'firefox', 'gc': 'chrome', 'googlechrome': 'chrome', 'headlesschrome': 'headless_chrome', 'headlessfirefox': 'headless_firefox', 'ie': 'ie', 'internetexplorer': 'ie', 'safari': 'safari'}*\n\n#### CHROMIUM_BROWSERS *= ['chrome', 'edge', 'chromiumedge', 'msedge', 'ie']*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'ROBOT'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### ROBOT_LIBRARY_VERSION *= '6.7.1'*\n\n#### SUPPORTED_BROWSERS *= {'chrome': 'Chrome', 'chromiumedge': 'ChromiumEdge', 'edge': 'Edge', 'firefox': 'Firefox', 'ie': 'Ie', 'safari': 'Safari'}*\n\n#### add_cookie(name: str, value: str, path: str | None = None, domain: str | None = None, secure: bool | None = None, expiry: str | None = None)\n\nAdds a cookie to your current session.\n\n`name` and `value` are required, `path`, `domain`, `secure` and `expiry` are optional.  Expiry supports the same formats as the [DateTime](http://robotframework.org/robotframework/latest/libraries/DateTime.html) library or an epoch timestamp.\n\nExample:\n\n|            |     |     |                            |                            |\n|------------|-----|-----|----------------------------|----------------------------|\n| Add Cookie | foo | bar |                            |                            |\n| Add Cookie | foo | bar | domain=example.com         |                            |\n| Add Cookie | foo | bar | expiry=2027-09-28 16:21:35 | # Expiry as timestamp.     |\n| Add Cookie | foo | bar | expiry=1822137695          | # Expiry as epoch seconds. |\n\nPrior to SeleniumLibrary 3.0 setting expiry did not work.\n\n#### add_library_components(library_components: List, translation: dict | None = None, translated_kw_names: list | None = None)\n\n#### add_location_strategy(strategy_name: str, strategy_keyword: str, persist: bool = False)\n\nAdds a custom location strategy.\n\nSee Custom locators for information on how to create and use custom strategies. Remove Location Strategy can be used to remove a registered strategy.\n\nLocation strategies are automatically removed after leaving the current scope by default. Setting `persist` to a true value (see Boolean arguments) will cause the location strategy to stay registered throughout the life of the test.\n\n#### alert_should_be_present(text: str = '', action: str = 'ACCEPT', timeout: timedelta | None = None)\n\nVerifies that an alert is present and by default, accepts it.\n\nFails if no alert is present. If `text` is a non-empty string, then it is used to verify alert\u2019s message. The alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with Handle Alert.\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default timeout is used instead.\n\n`action` and `timeout` arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.\n\n#### alert_should_not_be_present(action: str = 'ACCEPT', timeout: timedelta | None = None)\n\nVerifies that no alert is present.\n\nIf the alert actually exists, the `action` argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the Handle Alert keyword.\n\n`timeout` specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the time format section for information about the syntax.\n\nNew in SeleniumLibrary 3.0.\n\n#### assign_id_to_element(locator: WebElement | str, id: str)\n\nAssigns a temporary `id` to the element specified by `locator`.\n\nThis is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.\n\nSee the Locating elements section for details about the locator syntax.\n\nExample:\n\n|                             |                                                       |       |\n|-----------------------------|-------------------------------------------------------|-------|\n| Assign ID to Element        | //ul[@class=\u2019example\u2019 and ./li[contains(., \u2018Stuff\u2019)]] | my id |\n| Page Should Contain Element | my id                                                 |       |\n\n#### attach_chrome_browser(port: int, alias: str | None = None) \u2192 str | int\n\nAttach to an existing instance of Chrome browser.\n\nRequires that the browser was started with the command line option `--remote-debugging-port=<port>`, where port is any 4-digit number not being used by other applications.\n\n**Note.** The first Chrome instance on the system needs to be started with this command line option or this won\u2019t have an effect.\n\nThat port can then be used to connect using this keyword.\n\nExample:\n\n|                       |           |\n|-----------------------|-----------|\n| Attach Chrome Browser | port=9222 |\n\n#### capture_element_screenshot(locator: WebElement | str, filename: str = 'selenium-element-screenshot-{index}.png') \u2192 str\n\nCaptures a screenshot from the element identified by `locator` and embeds it into log file.\n\nSee Capture Page Screenshot for details about `filename` argument. See the Locating elements section for details about the locator syntax.\n\nAn absolute path to the created element screenshot is returned.\n\nSupport for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.\n\nNew in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.\n\nExamples:\n\n|                            |             |                                |\n|----------------------------|-------------|--------------------------------|\n| Capture Element Screenshot | id:image_id |                                |\n| Capture Element Screenshot | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |\n| Capture Element Screenshot | id:image_id | EMBED                          |\n\n#### capture_page_screenshot(filename: str = 'selenium-screenshot-{index}.png') \u2192 str\n\nTakes a screenshot of the current page and embeds it into a log file.\n\n`filename` argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when importing the library or by using the Set Screenshot Directory keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework\u2019s log file is written.\n\nIf `filename` equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.\n\nStarting from SeleniumLibrary 1.8, if `filename` contains marker `{index}`, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python\u2019s [format string syntax](https://docs.python.org/3/library/string.html#format-string-syntax).\n\nAn absolute path to the created screenshot file is returned or if `filename`  equals to EMBED, word EMBED is returned.\n\nSupport for EMBED is new in SeleniumLibrary 4.2\n\nExamples:\n\n|                         |                                        |\n|-------------------------|----------------------------------------|\n| Capture Page Screenshot |                                        |\n| File Should Exist       | ${OUTPUTDIR}/selenium-screenshot-1.png |\n| ${path} =               | Capture Page Screenshot                |\n| File Should Exist       | ${OUTPUTDIR}/selenium-screenshot-2.png |\n| File Should Exist       | ${path}                                |\n| Capture Page Screenshot | custom_name.png                        |\n| File Should Exist       | ${OUTPUTDIR}/custom_name.png           |\n| Capture Page Screenshot | custom_with_index_{index}.png          |\n| File Should Exist       | ${OUTPUTDIR}/custom_with_index_1.png   |\n| Capture Page Screenshot | formatted_index_{index:03}.png         |\n| File Should Exist       | ${OUTPUTDIR}/formatted_index_001.png   |\n| Capture Page Screenshot | EMBED                                  |\n| File Should Not Exist   | EMBED                                  |\n\n#### checkbox_should_be_selected(locator: WebElement | str)\n\nVerifies checkbox `locator` is selected/checked.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### checkbox_should_not_be_selected(locator: WebElement | str)\n\nVerifies checkbox `locator` is not selected/checked.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### choose_file(locator: WebElement | str, file_path: str)\n\nInputs the `file_path` into the file input field `locator`.\n\nThis keyword is most often used to input files into upload forms. The keyword does not check `file_path` is the file or folder available on the machine where tests are executed. If the `file_path` points at a file and when using Selenium Grid, Selenium will [magically](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE), transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.\n\nThat `file_path` is not checked, is new in SeleniumLibrary 4.0.\n\nExample:\n\n|             |                 |                      |\n|-------------|-----------------|----------------------|\n| Choose File | my_upload_field | ${CURDIR}/trades.csv |\n\n#### clear_all_highlights()\n\nRemove all highlighting made by `Highlight Elements`.\n\n#### clear_element_text(locator: WebElement | str)\n\nClears the value of the text-input-element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### click_button(locator: WebElement | str, modifier: bool | str = False)\n\nClicks the button identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\nSee the Click Element keyword for details about the `modifier` argument.\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n#### click_button_when_visible(locator: WebElement | ShadowRoot | str, modifier: str | None = None) \u2192 None\n\nClick button identified by `locator`, once it becomes visible.\n\n`locator` element locator\n\n`modifier` press given keys while clicking the element, e.g. CTRL\n\nExample:\n\n|                           |                             |\n|---------------------------|-----------------------------|\n| Click Button When Visible | //button[@class=\u201dmybutton\u201d] |\n\n#### click_element(locator: WebElement | str, modifier: bool | str = False, action_chain: bool = False)\n\nClick the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `modifier` argument can be used to pass [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys) when clicking the element. The + can be used as a separator for different Selenium Keys. The CTRL is internally translated to the CONTROL key. The `modifier` is space and case insensitive, example \u201calt\u201d and \u201c aLt \u201c are supported formats to [ALT key](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT) . If `modifier` does not match to Selenium Keys, keyword fails.\n\nIf `action_chain` argument is true, see Boolean arguments for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the <web_element>.click() function. If both `action_chain` and `modifier` are defined, the click will be performed using `modifier` and `action_chain` will be ignored.\n\nExample:\n\n|               |           |                   |                                                            |\n|---------------|-----------|-------------------|------------------------------------------------------------|\n| Click Element | id:button |                   | # Would click element without any modifiers.               |\n| Click Element | id:button | CTRL              | # Would click element with CTLR key pressed down.          |\n| Click Element | id:button | CTRL+ALT          | # Would click element with CTLR and ALT keys pressed down. |\n| Click Element | id:button | action_chain=True | # Clicks the button using an Selenium  ActionChains        |\n\nThe `modifier` argument is new in SeleniumLibrary 3.2 The `action_chain` argument is new in SeleniumLibrary 4.1\n\n#### click_element_at_coordinates(locator: WebElement | str, xoffset: int, yoffset: int)\n\nClick the element `locator` at `xoffset/yoffset`.\n\nThe Cursor is moved and the center of the element and x/y coordinates are calculated from that point.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### click_element_if_visible(locator: WebElement | ShadowRoot | str) \u2192 None\n\nClick element if it is visible\n\n`locator` element locator\n\nExample:\n\n|                          |                             |\n|--------------------------|-----------------------------|\n| Click Element If Visible | //button[@class=\u201dmybutton\u201d] |\n\n#### click_element_when_clickable(locator: WebElement | ShadowRoot | str, timeout: str | int | timedelta | None = None) \u2192 None\n\nWaits for and clicks an element until is fully ready to be clicked.\n\nIf a normal click doesn\u2019t work, then JavaScript-oriented workarounds are tried as a fallback mechanism.\n\nParameter `locator` targets the element to be clicked. Parameter `timeout` optionally configures a custom duration to wait for the element to become clickable, until it gives up.\n\nExample:\n\n|                              |         |\n|------------------------------|---------|\n| Click Element When Clickable | example |\n\n#### click_element_when_visible(locator: WebElement | ShadowRoot | str, modifier: str | None = None, action_chain: bool = False) \u2192 None\n\nClick element identified by `locator`, once it becomes visible.\n\n`locator` element locator\n\n`modifier` press given keys while clicking the element, e.g. CTRL\n\n`action_chain` store action in Selenium ActionChain queue\n\nExample:\n\n|                            |                   |          |\n|----------------------------|-------------------|----------|\n| Click Element When Visible | q                 |          |\n| Click Element When Visible | id:button         | CTRL+ALT |\n| Click Element When Visible | action_chain=True |          |\n\n#### click_image(locator: WebElement | str, modifier: bool | str = False)\n\nClicks an image identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\nSee the Click Element keyword for details about the `modifier` argument.\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n#### click_link(locator: WebElement | str, modifier: bool | str = False)\n\nClicks a link identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\nSee the Click Element keyword for details about the `modifier` argument.\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n#### close_all_browsers()\n\nCloses all open browsers and resets the browser cache.\n\nAfter this keyword, new indexes returned from Open Browser keyword are reset to 1.\n\nThis keyword should be used in test or suite teardown to make sure all browsers are closed.\n\n#### close_browser()\n\nCloses the current browser.\n\n#### close_window()\n\nCloses currently opened and selected browser window/tab.\n\n#### cover_element(locator: WebElement | str)\n\nWill cover elements identified by `locator` with a blue div without breaking page layout.\n\nSee the Locating elements section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.3.0\n\nExample: \n\n```\n|\n```\n\nCover Element | css:div#container |\n\n#### create_webdriver(driver_name: str, alias: str | None = None, kwargs: dict | None = None, \\*\\*init_kwargs) \u2192 str\n\nCreates an instance of Selenium WebDriver.\n\nLike Open Browser, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by Open Browser is not adequate.\n\n`driver_name` must be a WebDriver implementation name like Firefox, Chrome, Ie, Edge, Safari, or Remote.\n\nThe initialized WebDriver can be configured either with a Python dictionary `kwargs` or by using keyword arguments `**init_kwargs`. These arguments are passed directly to WebDriver without any processing. See [Selenium API documentation](https://seleniumhq.github.io/selenium/docs/api/py/api.html) for details about the supported arguments.\n\nExamples:\n\n|                          |              |                            |                                      |\n|--------------------------|--------------|----------------------------|--------------------------------------|\n| # Use proxy with Firefox |              |                            |                                      |\n| ${proxy}=                | Evaluate     | selenium.webdriver.Proxy() | modules=selenium, selenium.webdriver |\n| ${proxy.http_proxy}=     | Set Variable | localhost:8888             |                                      |\n| Create Webdriver         | Firefox      | proxy=${proxy}             |                                      |\n\nReturns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when Close All Browsers keyword is used. See Switch Browser for an example.\n\n#### current_frame_should_contain(text: str, loglevel: str = 'TRACE')\n\nVerifies that the current frame contains `text`.\n\nSee Page Should Contain for an explanation about the `loglevel` argument.\n\nPrior to SeleniumLibrary 3.0 this keyword was named Current Frame Contains.\n\n#### current_frame_should_not_contain(text: str, loglevel: str = 'TRACE')\n\nVerifies that the current frame does not contain `text`.\n\nSee Page Should Contain for an explanation about the `loglevel` argument.\n\n#### delete_all_cookies()\n\nDeletes all cookies.\n\n#### delete_cookie(name)\n\nDeletes the cookie matching `name`.\n\nIf the cookie is not found, nothing happens.\n\n#### does_alert_contain(text: str | None = None, timeout: str | int | timedelta | None = None) \u2192 bool\n\nDoes alert contain text.\n\n`text` check if alert includes text, will raise ValueError is text does not exist\n\nExample:\n\n|        |                    |               |\n|--------|--------------------|---------------|\n| ${res} | Does Alert Contain | alert message |\n\n#### does_alert_not_contain(text: str | None = None, timeout: str | int | timedelta | None = None) \u2192 bool\n\nDoes alert not contain text.\n\n`text` check that alert does not include text, will raise ValueError if text does exist\n\nExample:\n\n|        |                        |                    |\n|--------|------------------------|--------------------|\n| ${res} | Does Alert Not Contain | unexpected message |\n\n#### does_element_contain(locator: WebElement | ShadowRoot | str, expected: str, ignore_case: bool = False) \u2192 bool\n\nDoes element contain expected text\n\n`locator` element locator\n\n`expected` expected element text\n\n`ignore_case` should check be case insensitive, default False\n\nExample:\n\n|        |                      |         |                        |                  |\n|--------|----------------------|---------|------------------------|------------------|\n| ${res} | Does Element Contain | id:spec | specification complete | ignore_case=True |\n\n#### does_frame_contain(locator: WebElement | ShadowRoot | str, text: str) \u2192 bool\n\nDoes frame contain expected text\n\n`locator` locator of the frame to check\n\n`text` does frame contain this text\n\nExample:\n\n|        |                    |            |        |\n|--------|--------------------|------------|--------|\n| ${res} | Does Frame Contain | id:myframe | secret |\n\n#### does_location_contain(expected: str) \u2192 bool\n\nDoes current URL contain expected\n\n`expected` URL should contain this\n\nExample:\n\n|                        |                                              |          |\n|------------------------|----------------------------------------------|----------|\n| Open Available Browser | [https://robocorp.com](https://robocorp.com) |          |\n| ${res}                 | Does Location Contain                        | robocorp |\n\n#### does_page_contain(text: str) \u2192 bool\n\nDoes page contain expected text\n\n`text` page should contain this\n\nExample:\n\n|                        |                                          |       |\n|------------------------|------------------------------------------|-------|\n| Open Available Browser | [https://google.com](https://google.com) |       |\n| ${res}                 | Does Page Contain                        | Gmail |\n\n#### does_page_contain_button(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected button\n\n`locator` element locator\n\nExample:\n\n|        |                          |               |\n|--------|--------------------------|---------------|\n| ${res} | Does Page Contain Button | search-button |\n\n#### does_page_contain_checkbox(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected checkbox\n\n`locator` element locator\n\nExample:\n\n|        |                            |                  |\n|--------|----------------------------|------------------|\n| ${res} | Does Page Contain Checkbox | random-selection |\n\n#### does_page_contain_element(locator: WebElement | ShadowRoot | str, count: int | None = None) \u2192 bool\n\nDoes page contain expected element\n\n`locator` element locator\n\n`count` how many times element is expected to appear on page by default one or more\n\nExample:\n\n|        |                           |          |         |\n|--------|---------------------------|----------|---------|\n| ${res} | Does Page Contain Element | textarea |         |\n| ${res} | Does Page Contain Element | button   | count=4 |\n\n#### does_page_contain_image(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected image\n\n`locator` element locator\n\nExample:\n\n|                        |                                          |        |\n|------------------------|------------------------------------------|--------|\n| Open Available Browser | [https://google.com](https://google.com) |        |\n| ${res}                 | Does Page Contain Image                  | Google |\n\n#### does_page_contain_link(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected link\n\n`locator` element locator\n\nExample:\n\n|        |                        |           |\n|--------|------------------------|-----------|\n| ${res} | Does Page Contain Link | id:submit |\n\n#### does_page_contain_list(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected list\n\n`locator` element locator\n\nExample:\n\n|        |                        |                  |\n|--------|------------------------|------------------|\n| ${res} | Does Page Contain List | class:selections |\n\n#### does_page_contain_radio_button(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected radio button\n\n`locator` element locator\n\nExample:\n\n|        |                                |      |\n|--------|--------------------------------|------|\n| ${res} | Does Page Contain Radio Button | male |\n\n#### does_page_contain_textfield(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nDoes page contain expected textfield\n\n`locator` element locator\n\nExample:\n\n|        |                             |            |\n|--------|-----------------------------|------------|\n| ${res} | Does Page Contain Textfield | id:address |\n\n#### does_table_cell_contain(locator: WebElement | ShadowRoot | str, row: int, column: int, expected: str) \u2192 bool\n\nDoes table cell contain expected text\n\n`locator` element locator for the table\n\n`row` row index starting from 1 (beginning) or -1 (from the end)\n\n`column` column index starting from 1 (beginning) or -1 (from the end)\n\n`expected` expected text in table row\n\nExample:\n\n|        |                         |         |    |    |         |\n|--------|-------------------------|---------|----|----|---------|\n| ${res} | Does Table Cell Contain | //table |  1 |  1 | Company |\n\n#### does_table_column_contain(locator: WebElement | ShadowRoot | str, column: int, expected: str) \u2192 bool\n\nDoes table column contain expected text\n\n`locator` element locator for the table\n\n`column` column index starting from 1 (beginning) or -1 (from the end)\n\n`expected` expected text in table column\n\nExample:\n\n|        |                           |         |    |       |\n|--------|---------------------------|---------|----|-------|\n| ${res} | Does Table Column Contain | //table |  1 | Nokia |\n\n#### does_table_contain(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nDoes table contain expected text\n\n`locator` element locator\n\n`expected` expected text in table\n\nExample:\n\n|        |                    |         |          |\n|--------|--------------------|---------|----------|\n| ${res} | Does Table Contain | //table | February |\n\n#### does_table_footer_contain(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nDoes table footer contain expected text\n\n`locator` element locator for the table\n\n`expected` expected text in table footer\n\nExample:\n\n|        |                           |         |     |\n|--------|---------------------------|---------|-----|\n| ${res} | Does Table Footer Contain | //table | Sum |\n\n#### does_table_header_contain(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nDoes table header contain expected text\n\n`locator` element locator for the table\n\n`expected` expected text in table header\n\nExample:\n\n|        |                           |         |       |\n|--------|---------------------------|---------|-------|\n| ${res} | Does Table Header Contain | //table | Month |\n\n#### does_table_row_contain(locator: WebElement | ShadowRoot | str, row: int, expected: str) \u2192 bool\n\nDoes table row contain expected text\n\n`locator` element locator for the table\n\n`row` row index starting from 1 (beginning) or -1 (from the end)\n\n`expected` expected text in table row\n\nExample:\n\n|        |                        |         |    |         |\n|--------|------------------------|---------|----|---------|\n| ${res} | Does Table Row Contain | //table |  1 | Company |\n\n#### does_textarea_contain(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nDoes textarea contain expected text\n\n`locator` element locator\n\n`expected` expected text in textarea\n\nExample:\n\n|        |                       |            |           |\n|--------|-----------------------|------------|-----------|\n| ${res} | Does Textarea Contain | //textarea | sincerely |\n\n#### does_textfield_contain(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nDoes textfield contain expected text\n\n`locator` element locator\n\n`expected` expected text in textfield\n\nExample:\n\n|        |                        |          |      |\n|--------|------------------------|----------|------|\n| ${res} | Does Textfield Contain | id:lname | Last |\n\n#### double_click_element(locator: WebElement | str)\n\nDouble clicks the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### drag_and_drop(locator: WebElement | str, target: WebElement | str)\n\nDrags the element identified by `locator` into the `target` element.\n\nThe `locator` argument is the locator of the dragged element and the `target` is the locator of the target. See the Locating elements section for details about the locator syntax.\n\nExample:\n\n|               |                 |                |\n|---------------|-----------------|----------------|\n| Drag And Drop | css:div#element | css:div.target |\n\n#### drag_and_drop_by_offset(locator: WebElement | str, xoffset: int, yoffset: int)\n\nDrags the element identified with `locator` by `xoffset/yoffset`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe element will be moved by `xoffset` and `yoffset`, each of which is a negative or positive number specifying the offset.\n\nExample:\n\n|                         |        |    |     |                                        |\n|-------------------------|--------|----|-----|----------------------------------------|\n| Drag And Drop By Offset | myElem | 50 | -35 | # Move myElem 50px right and 35px down |\n\n#### *property* driver *: WebDriver*\n\nCurrent active driver.\n\n* **Return type:**\n  selenium.webdriver.remote.webdriver.WebDriver :raises SeleniumLibrary.errors.NoOpenBrowser: If browser is not open.\n\n#### element_attribute_value_should_be(locator: WebElement | str, attribute: str, expected: None | str, message: str | None = None)\n\nVerifies element identified by `locator` contains expected attribute value.\n\nSee the Locating elements section for details about the locator syntax.\n\nExample: Element Attribute Value Should Be | css:img | href | value\n\nNew in SeleniumLibrary 3.2.\n\n#### element_should_be_disabled(locator: WebElement | str)\n\nVerifies that element identified by `locator` is disabled.\n\nThis keyword considers also elements that are read-only to be disabled.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### element_should_be_enabled(locator: WebElement | str)\n\nVerifies that element identified by `locator` is enabled.\n\nThis keyword considers also elements that are read-only to be disabled.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### element_should_be_focused(locator: WebElement | str)\n\nVerifies that element identified by `locator` is focused.\n\nSee the Locating elements section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.0.\n\n#### element_should_be_visible(locator: WebElement | str, message: str | None = None)\n\nVerifies that the element identified by `locator` is visible.\n\nHerein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries `display:none` is not logically visible, so using this keyword on that element would fail.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\n#### element_should_contain(locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False)\n\nVerifies that element `locator` contains text `expected`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.\n\n`ignore_case` argument is new in SeleniumLibrary 3.1.\n\nUse Element Text Should Be if you want to match the exact text, not a substring.\n\n#### element_should_not_be_visible(locator: WebElement | str, message: str | None = None)\n\nVerifies that the element identified by `locator` is NOT visible.\n\nPasses if the element does not exists. See Element Should Be Visible for more information about visibility and supported arguments.\n\n#### element_should_not_contain(locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False)\n\nVerifies that element `locator` does not contain text `expected`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n`ignore_case` argument new in SeleniumLibrary 3.1.\n\n#### element_text_should_be(locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False)\n\nVerifies that element `locator` contains exact the text `expected`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n`ignore_case` argument is new in SeleniumLibrary 3.1.\n\nUse Element Should Contain if a substring match is desired.\n\n#### element_text_should_not_be(locator: WebElement | str, not_expected: None | str, message: str | None = None, ignore_case: bool = False)\n\nVerifies that element `locator` does not contain exact the text `not_expected`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\nNew in SeleniumLibrary 3.1.1\n\n#### execute_async_javascript(\\*code: Any) \u2192 Any\n\nExecutes asynchronous JavaScript code with possible arguments.\n\nSimilar to Execute Javascript except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.\n\nScripts must complete within the script timeout or this keyword will fail. See the Timeout section for more information.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script) as part of `code` argument. See Execute Javascript for more details.\n\nExamples:\n\n|                          |                                                                                    |      |\n|--------------------------|------------------------------------------------------------------------------------|------|\n| Execute Async JavaScript | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |      |\n| Execute Async JavaScript | ${CURDIR}/async_js_to_execute.js                                                   |      |\n| ${result} =              | Execute Async JavaScript                                                           |      |\n| \u2026                        | var callback = arguments[arguments.length - 1];                                    |      |\n| \u2026                        | function answer(){callback(\u201ctext\u201d);};                                              |      |\n| \u2026                        | window.setTimeout(answer, 2000);                                                   |      |\n| Should Be Equal          | ${result}                                                                          | text |\n\n#### execute_cdp(command, parameters)\n\nExecutes Chromium DevTools Protocol commands\n\nWorks only with Chromium-based browsers!\n\nFor more information, available commands and parameters, see: [https://chromedevtools.github.io/devtools-protocol/](https://chromedevtools.github.io/devtools-protocol/)\n\n`command` command to execute as string\n\n`parameters` parameters for command as a dictionary\n\nExample:\n\n|                     |                                              |                               |\n|---------------------|----------------------------------------------|-------------------------------|\n| Open Chrome Browser | [about:blank](about:blank)                   | headless=${True}              |\n| &{params}           | Create Dictionary                            | userAgent=Chrome/83.0.4103.53 |\n| Execute CDP         | Network.setUserAgentOverride                 | ${params}                     |\n| Go To               | [https://robocorp.com](https://robocorp.com) |                               |\n\n#### execute_javascript(\\*code: Any) \u2192 Any\n\nExecutes the given JavaScript code with possible arguments.\n\n`code` may be divided into multiple cells in the test data and `code` may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from `code`.\n\nIf `code` is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.\n\nThe JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use `window` to refer to the window of your application and `document` to refer to the document object of the current frame or window, e.g. `document.getElementById('example')`.\n\nThis keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script) as part of `code` argument. The JavaScript code and arguments must be separated with JAVASCRIPT and ARGUMENTS markers and must be used exactly with this format. If the Javascript code is first, then the JAVASCRIPT marker is optional. The order of JAVASCRIPT and ARGUMENTS markers can be swapped, but if ARGUMENTS is the first marker, then JAVASCRIPT marker is mandatory. It is only allowed to use JAVASCRIPT and ARGUMENTS markers only one time in the `code` argument.\n\nExamples:\n\n|                    |                               |           |            |                      |\n|--------------------|-------------------------------|-----------|------------|----------------------|\n| Execute JavaScript | window.myFunc(\u2018arg1\u2019, \u2018arg2\u2019) |           |            |                      |\n| Execute JavaScript | ${CURDIR}/js_to_execute.js    |           |            |                      |\n| Execute JavaScript | alert(arguments[0]);          | ARGUMENTS | 123        |                      |\n| Execute JavaScript | ARGUMENTS                     | 123       | JAVASCRIPT | alert(arguments[0]); |\n\n#### failure_occurred()\n\nMethod that is executed when a SeleniumLibrary keyword fails.\n\nBy default, executes the registered run-on-failure keyword. Libraries extending SeleniumLibrary can overwrite this hook method if they want to provide custom functionality instead.\n\n#### find_element(locator: str, parent: WebElement | None = None) \u2192 WebElement\n\nFind element matching locator.\n\n* **Parameters:**\n  **locator** \u2013 Locator to use when searching the element. See library documentation for the supported locator syntax. :type locator: str or selenium.webdriver.remote.webelement.WebElement :param parent: Optional parent WebElememt to search child elements from. By default, search starts from the root using WebDriver. :type parent: selenium.webdriver.remote.webelement.WebElement :return: Found WebElement. :rtype: selenium.webdriver.remote.webelement.WebElement :raises SeleniumLibrary.errors.ElementNotFound: If element not found.\n\n#### find_elements(locator: str, parent: WebElement | None = None) \u2192 List[WebElement]\n\nFind all elements matching locator.\n\n* **Parameters:**\n  **locator** \u2013 Locator to use when searching the element. See library documentation for the supported locator syntax. :type locator: str or selenium.webdriver.remote.webelement.WebElement :param parent: Optional parent WebElememt to search child elements from. By default, search starts from the root using WebDriver. :type parent: selenium.webdriver.remote.webelement.WebElement :return: list of found WebElement or e,mpty if elements are not found. :rtype: list[selenium.webdriver.remote.webelement.WebElement]\n\n#### frame_should_contain(locator: WebElement | str, text: str, loglevel: str = 'TRACE')\n\nVerifies that frame identified by `locator` contains `text`.\n\nSee the Locating elements section for details about the locator syntax.\n\nSee Page Should Contain for an explanation about the `loglevel` argument.\n\n#### get_action_chain_delay()\n\nGets the currently stored value for chain_delay_value in timestr format.\n\n#### get_all_links() \u2192 List[str]\n\nReturns a list containing ids of all links found in current page.\n\nIf a link has no id, an empty string will be in the list instead.\n\n#### get_browser_aliases() \u2192 List[str]\n\nReturns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary `${aliases.key}` or as list `@{aliases}[0]`.\n\nExample:\n\n|              |                                            |                 |                                                 |\n|--------------|--------------------------------------------|-----------------|-------------------------------------------------|\n| Open Browser | [https://example.com](https://example.com) | alias=BrowserA  |                                                 |\n| Open Browser | [https://example.com](https://example.com) | alias=BrowserB  |                                                 |\n| &{aliases}   | Get Browser Aliases                        |                 | # &{aliases} = { BrowserA=1|BrowserB=2 }        |\n| Log          | ${aliases.BrowserA}                        |                 | # logs `1`                                      |\n| FOR          | ${alias}<br/>Log                           | IN<br/>${alias} | @{aliases}<br/># logs `BrowserA` and `BrowserB` |\n| END          |                                            |                 |                                                 |\n\nSee Switch Browser for more information and examples.\n\nNew in SeleniumLibrary 4.0\n\n#### get_browser_capabilities() \u2192 dict\n\nGet dictionary of browser properties\n\nExample:\n\n|          |                          |\n|----------|--------------------------|\n| ${caps}= | Get Browser Capabilities |\n\n#### get_browser_ids() \u2192 List[str]\n\nReturns index of all active browser as list.\n\nExample:\n\n|                 |                                     |                                                                                |                                  |\n|-----------------|-------------------------------------|--------------------------------------------------------------------------------|----------------------------------|\n| @{browser_ids}= | Get Browser Ids                     |                                                                                |                                  |\n| FOR             | ${id}<br/>@{window_titles}=<br/>Log | IN<br/>Get Window Titles<br/>Browser ${id} has these windows: ${window_titles} | @{browser_ids}<br/>browser=${id} |\n| END             |                                     |                                                                                |                                  |\n\nSee Switch Browser for more information and examples.\n\nNew in SeleniumLibrary 4.0\n\n#### get_cookie(name: str) \u2192 CookieInformation\n\nReturns information of cookie with `name` as an object.\n\nIf no cookie is found with `name`, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.\n\n| Attribute   | Explanation                                                |\n|-------------|------------------------------------------------------------|\n| name        | The name of a cookie.                                      |\n| value       | Value of the cookie.                                       |\n| path        | Indicates a URL path, for example `/`.                     |\n| domain      | The domain, the cookie is visible to.                      |\n| secure      | When true, the cookie is only used with HTTPS connections. |\n| httpOnly    | When true, the cookie is not accessible via JavaScript.    |\n| expiry      | Python datetime object indicating when the cookie expires. |\n| extra       | Possible attributes outside of the WebDriver specification |\n\nSee the [WebDriver specification](https://w3c.github.io/webdriver/#cookies) for details about the cookie information. Notice that `expiry` is specified as a [datetime object](https://docs.python.org/3/library/datetime.html#datetime.datetime), not as seconds since Unix Epoch like WebDriver natively does.\n\nIn some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the [WebDriver specification](https://w3c.github.io/webdriver/#cookies). These other attributes are available in an `extra` attribute in the cookie object and it contains a dictionary of the other attributes. The `extra` attribute is new in SeleniumLibrary 4.0.\n\nExample:\n\n|                 |                              |     |\n|-----------------|------------------------------|-----|\n| Add Cookie      | foo                          | bar |\n| ${cookie} =     | Get Cookie                   | foo |\n| Should Be Equal | ${cookie.name}               | foo |\n| Should Be Equal | ${cookie.value}              | bar |\n| Should Be True  | ${cookie.expiry.year} > 2017 |     |\n\nNew in SeleniumLibrary 3.0.\n\n#### get_cookies(as_dict: bool = False) \u2192 str | dict\n\nReturns all cookies of the current page.\n\nIf `as_dict` argument evaluates as false, see Boolean arguments for more details, then cookie information is returned as a single string in format `name1=value1; name2=value2; name3=value3`. When `as_dict` argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library\u2019s Create Session keyword\u2019s optional cookies parameter.\n\nThe \\`\\` as_dict\\`\\` argument is new in SeleniumLibrary 3.3\n\n#### get_dom_attribute(locator: WebElement | str, attribute: str) \u2192 str\n\nReturns the value of `attribute` from the element `locator`. Get DOM Attribute keyword only returns attributes declared within the element\u2019s HTML markup.  If the requested attribute is not there, the keyword returns ${None}.\n\nSee the Locating elements section for details about the locator syntax.\n\nExample:\n\n|        |                   |        |    |\n|--------|-------------------|--------|----|\n| ${id}= | Get DOM Attribute | css:h1 | id |\n\n#### get_element_attribute(locator: WebElement | str, attribute: str) \u2192 str\n\nReturns the value of `attribute` from the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nExample:\n\n|        |                       |        |    |\n|--------|-----------------------|--------|----|\n| ${id}= | Get Element Attribute | css:h1 | id |\n\nPassing attribute name as part of the `locator` was removed in SeleniumLibrary 3.2. The explicit `attribute` argument should be used instead.\n\n#### get_element_count(locator: WebElement | str) \u2192 int\n\nReturns the number of elements matching `locator`.\n\nIf you wish to assert the number of matching elements, use Page Should Contain Element with `limit` argument. Keyword will always return an integer.\n\nExample:\n\n|                |                   |               |\n|----------------|-------------------|---------------|\n| ${count} =     | Get Element Count | name:div_name |\n| Should Be True | ${count} > 2      |               |\n\nNew in SeleniumLibrary 3.0.\n\n#### get_element_size(locator: WebElement | str) \u2192 Tuple[int, int]\n\nReturns width and height of the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nBoth width and height are returned as integers.\n\nExample:\n\n|          |             |                  |                   |\n|----------|-------------|------------------|-------------------|\n| ${width} | ${height} = | Get Element Size | css:div#container |\n\n#### get_element_status(locator: WebElement | ShadowRoot | str) \u2192 dict\n\nReturn dictionary containing element status of:\n\n- visible\n- enabled\n- disabled\n- focused\n\n`locator` element locator\n\nExample:\n\n|        |                    |               |\n|--------|--------------------|---------------|\n| &{res} | Get Element Status | class:special |\n| Log    | ${res.visible}     |               |\n| Log    | ${res.enabled}     |               |\n| Log    | ${res.disabled}    |               |\n| Log    | ${res.focused}     |               |\n\n#### get_horizontal_position(locator: WebElement | str) \u2192 int\n\nReturns the horizontal position of the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe position is returned in pixels off the left side of the page, as an integer.\n\nSee also Get Vertical Position.\n\n#### get_keyword_arguments(name)\n\n#### get_keyword_documentation(name: str) \u2192 str\n\n#### get_keyword_names()\n\n#### get_keyword_source(keyword_name)\n\n#### get_keyword_tags(name: str) \u2192 list\n\n#### get_keyword_types(name)\n\n#### get_list_items(locator: WebElement | str, values: bool = False) \u2192 List[str]\n\nReturns all labels or values of selection list `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nReturns visible labels by default, but values can be returned by setting the `values` argument to a true value (see Boolean arguments).\n\nExample:\n\n|             |                |                     |             |\n|-------------|----------------|---------------------|-------------|\n| ${labels} = | Get List Items | mylist              |             |\n| ${values} = | Get List Items | css:#example select | values=True |\n\nSupport to return values is new in SeleniumLibrary 3.0.\n\n#### get_location() \u2192 str\n\nReturns the current browser window URL.\n\n#### get_locations(browser: str = 'CURRENT') \u2192 List[str]\n\nReturns and logs URLs of all windows of the selected browser.\n\n**Browser Scope:**\n\nThe `browser` argument specifies the browser that shall return its windows information.\n\n- `browser` can be `index_or_alias` like in Switch Browser.\n- If `browser` is `CURRENT` (default, case-insensitive) the currently active browser is selected.\n- If `browser` is `ALL` (case-insensitive) the window information of all windows of all opened browsers are returned.\n\n#### get_property(locator: WebElement | str, property: str) \u2192 str\n\nReturns the value of `property` from the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nExample:\n\n|                 |              |        |             |\n|-----------------|--------------|--------|-------------|\n| ${text_length}= | Get Property | css:h1 | text_length |\n\n#### get_selected_list_label(locator: WebElement | str) \u2192 str\n\nReturns the label of selected option from selection list `locator`.\n\nIf there are multiple selected options, the label of the first option is returned.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_selected_list_labels(locator: WebElement | str) \u2192 List[str]\n\nReturns labels of selected options from selection list `locator`.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_selected_list_value(locator: WebElement | str) \u2192 str\n\nReturns the value of selected option from selection list `locator`.\n\nIf there are multiple selected options, the value of the first option is returned.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_selected_list_values(locator: WebElement | str) \u2192 List[str]\n\nReturns values of selected options from selection list `locator`.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_selenium_implicit_wait() \u2192 str\n\nGets the implicit wait value used by Selenium.\n\nThe value is returned as a human-readable string like `1 second`.\n\nSee the Implicit wait section above for more information.\n\n#### get_selenium_page_load_timeout() \u2192 str\n\nGets the time to wait for a page load to complete before raising a timeout exception.\n\nThe value is returned as a human-readable string like `1 second`.\n\nSee the Page load section above for more information.\n\nNew in SeleniumLibrary 6.1\n\n#### get_selenium_speed() \u2192 str\n\nGets the delay that is waited after each Selenium command.\n\nThe value is returned as a human-readable string like `1 second`.\n\nSee the Selenium Speed section above for more information.\n\n#### get_selenium_timeout() \u2192 str\n\nGets the timeout that is used by various keywords.\n\nThe value is returned as a human-readable string like `1 second`.\n\nSee the Timeout section above for more information.\n\n#### get_session_id() \u2192 str\n\nReturns the currently active browser session id.\n\nNew in SeleniumLibrary 3.2\n\n#### get_source() \u2192 str\n\nReturns the entire HTML source of the current page or frame.\n\n#### get_table_cell(locator: WebElement | str, row: int, column: int, loglevel: str = 'TRACE') \u2192 str\n\nReturns contents of a table cell.\n\nThe table is located using the `locator` argument and its cell found using `row` and `column`. See the Locating elements section for details about the locator syntax.\n\nBoth row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.\n\nAll `<th>` and `<td>` elements anywhere in the table are considered to be cells.\n\nSee Page Should Contain for an explanation about the `loglevel` argument.\n\n#### get_testability_status() \u2192 bool\n\nGet SeleniumTestability plugin status\n\n#### get_text(locator: WebElement | str) \u2192 str\n\nReturns the text value of the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_title() \u2192 str\n\nReturns the title of the current page.\n\n#### get_value(locator: WebElement | str) \u2192 str\n\nReturns the value attribute of the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_vertical_position(locator: WebElement | str) \u2192 int\n\nReturns the vertical position of the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe position is returned in pixels off the top of the page, as an integer.\n\nSee also Get Horizontal Position.\n\n#### get_webelement(locator: WebElement | ShadowRoot | str, parent: WebElement | ShadowRoot | None = None, shadow: bool = False) \u2192 WebElement | ShadowRoot\n\nReturns the first `Element` matching the given `locator`.\n\nWith the `parent` parameter you can optionally specify a parent to start the search from. Set `shadow` to `True` if you\u2019re targeting and expecting a shadow root in return. Read more on the shadow root: [https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot)\n\nSee the Locating elements section for details about the locator syntax.\n\n#### get_webelements(locator: WebElement | str) \u2192 List[WebElement]\n\nReturns a list of WebElement objects matching the `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nStarting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.\n\n#### get_window_handles(browser: str = 'CURRENT') \u2192 List[str]\n\nReturns all child window handles of the selected browser as a list.\n\nCan be used as a list of windows to exclude with Select Window.\n\nHow to select the `browser` scope of this keyword, see Get Locations.\n\nPrior to SeleniumLibrary 3.0, this keyword was named List Windows.\n\n#### get_window_identifiers(browser: str = 'CURRENT') \u2192 List\n\nReturns and logs id attributes of all windows of the selected browser.\n\nHow to select the `browser` scope of this keyword, see Get Locations.\n\n#### get_window_names(browser: str = 'CURRENT') \u2192 List[str]\n\nReturns and logs names of all windows of the selected browser.\n\nHow to select the `browser` scope of this keyword, see Get Locations.\n\n#### get_window_position() \u2192 Tuple[int, int]\n\nReturns current window position.\n\nThe position is relative to the top left corner of the screen. Returned values are integers. See also Set Window Position.\n\nExample:\n\n|      |       |                     |\n|------|-------|---------------------|\n| ${x} | ${y}= | Get Window Position |\n\n#### get_window_size(inner: bool = False) \u2192 Tuple[float, float]\n\nReturns current window width and height as integers.\n\nSee also Set Window Size.\n\nIf `inner` parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See Boolean arguments for more details on how to set boolean arguments. The `inner` is new in SeleniumLibrary 4.0.\n\nExample:\n\n|          |            |                 |      |\n|----------|------------|-----------------|------|\n| ${width} | ${height}= | Get Window Size |      |\n| ${width} | ${height}= | Get Window Size | True |\n\n#### get_window_titles(browser: str = 'CURRENT') \u2192 List[str]\n\nReturns and logs titles of all windows of the selected browser.\n\nHow to select the `browser` scope of this keyword, see Get Locations.\n\n#### go_back()\n\nSimulates the user clicking the back button on their browser.\n\n#### go_to(url: str) \u2192 None\n\nNavigates the current browser window to the provided `url`.\n\n#### handle_alert(action: str = 'ACCEPT', timeout: timedelta | None = None)\n\nHandles the current alert and returns its message.\n\nBy default, the alert is accepted, but this can be controlled with the `action` argument that supports the following case-insensitive values:\n\n- `ACCEPT`: Accept the alert i.e. press `Ok`. Default.\n- `DISMISS`: Dismiss the alert i.e. press `Cancel`.\n- `LEAVE`: Leave the alert open.\n\nThe `timeout` argument specifies how long to wait for the alert to appear. If it is not given, the global default timeout is used instead.\n\nExamples:\n\n|              |                |       |                                         |\n|--------------|----------------|-------|-----------------------------------------|\n| Handle Alert |                |       | # Accept alert.                         |\n| Handle Alert | action=DISMISS |       | # Dismiss alert.                        |\n| Handle Alert | timeout=10 s   |       | # Use custom timeout and accept alert.  |\n| Handle Alert | DISMISS        | 1 min | # Use custom timeout and dismiss alert. |\n| ${message} = | Handle Alert   |       | # Accept alert and get its message.     |\n| ${message} = | Handle Alert   | LEAVE | # Leave alert open and get its message. |\n\nNew in SeleniumLibrary 3.0.\n\n#### highlight_elements(locator: WebElement | ShadowRoot | str, width: str = '2px', style: str = 'dotted', color: str = 'blue')\n\nHighlight all matching elements by locator.\n\nHighlighting is done by adding a colored outline around the elements with CSS styling.\n\n`locator`  element locator `width`    highlight outline width `style`    highlight outline style `color`    highlight outline color\n\nExample:\n\n|                    |                          |\n|--------------------|--------------------------|\n| Highlight Elements | [xpath://h2](xpath://h2) |\n\n#### input_password(locator: WebElement | str, password: str, clear: bool = True)\n\nTypes the given password into the text field identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax. See Input Text for `clear` argument details.\n\nDifference compared to Input Text is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like\n\n|                |                |          |\n|----------------|----------------|----------|\n| Input Password | password_field | password |\n\nthe password is shown as a normal keyword argument. A way to avoid that is using variables like\n\n|                |                |             |\n|----------------|----------------|-------------|\n| Input Password | password_field | ${PASSWORD} |\n\nPlease notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.\n\nThe clear argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.\n\n#### input_text(locator: WebElement | str, text: str, clear: bool = True)\n\nTypes the given `text` into the text field identified by `locator`.\n\nWhen `clear` is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use Input Password if you do not want the given `text` to be logged.\n\nIf [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2) is used and the `text` argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the `text` string as is to the element. If a file should be transferred to the hub and upload should be performed, please use Choose File keyword.\n\nSee the Locating elements section for details about the locator syntax. See the Boolean arguments section how Boolean values are handled.\n\nDisabling the file upload the Selenium Grid node and the clear argument are new in SeleniumLibrary 4.0\n\n#### input_text_into_alert(text: str, action: str = 'ACCEPT', timeout: timedelta | None = None)\n\nTypes the given `text` into an input field in an alert.\n\nThe alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with Handle Alert.\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default timeout is used instead.\n\nNew in SeleniumLibrary 3.0.\n\n#### input_text_when_element_is_visible(locator: WebElement | ShadowRoot | str, text: str) \u2192 None\n\nInput text into locator after it has become visible.\n\n`locator` element locator\n\n`text` insert text to locator\n\nExample:\n\n|                                    |                         |             |\n|------------------------------------|-------------------------|-------------|\n| Input Text When Element Is Visible | //input[@id=\u201dfreetext\u201d] | my feedback |\n\n#### is_alert_present(text: str | None = None, action: str = 'ACCEPT') \u2192 bool\n\nIs alert box present, which can be identified with text and action can also be done which by default is ACCEPT.\n\nOther possible actions are DISMISS and LEAVE.\n\n`text` check if alert text is matching to this, if None will check if alert is present at all\n\n`action` possible action if alert is present, default ACCEPT\n\nExample:\n\n|        |                  |               |\n|--------|------------------|---------------|\n| ${res} | Is Alert Present | alert message |\n\n#### is_checkbox_selected(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nIs checkbox selected\n\n`locator` element locator\n\nExample:\n\n|        |                      |               |\n|--------|----------------------|---------------|\n| ${res} | Is Checkbox Selected | id:taxes-paid |\n\n#### *property* is_chromium *: bool*\n\n#### is_element_attribute_equal_to(locator: WebElement | ShadowRoot | str, attribute: str, expected: str) \u2192 bool\n\nIs element attribute equal to expected value\n\n`locator` element locator\n\n`attribute` element attribute to check for\n\n`expected` is attribute value equal to this\n\nExample:\n\n|        |                               |    |    |      |\n|--------|-------------------------------|----|----|------|\n| ${res} | Is Element Attribute Equal To | h1 | id | main |\n\n#### is_element_disabled(locator: WebElement | ShadowRoot | str, missing_ok: bool = True) \u2192 bool\n\nIs element disabled\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\nExample:\n\n|        |                     |                         |\n|--------|---------------------|-------------------------|\n| ${res} | Is Element Disabled | //input[@type=\u201dsubmit\u201d] |\n\n#### is_element_enabled(locator: WebElement | ShadowRoot | str, missing_ok: bool = True) \u2192 bool\n\nIs element enabled\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\nExample:\n\n|        |                    |              |\n|--------|--------------------|--------------|\n| ${res} | Is Element Enabled | input.field1 |\n\n#### is_element_focused(locator: WebElement | ShadowRoot | str, missing_ok: bool = True) \u2192 bool\n\nIs element focused\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\nExample:\n\n|        |                    |                         |\n|--------|--------------------|-------------------------|\n| ${res} | Is Element Focused | //input[@id=\u201dfreetext\u201d] |\n\n#### is_element_text(locator: WebElement | ShadowRoot | str, expected: str, ignore_case: bool = False) \u2192 bool\n\nIs element text expected\n\n`locator` element locator\n\n`expected` expected element text\n\n`ignore_case` should check be case insensitive, default False\n\nExample:\n\n|        |                 |         |          |                  |\n|--------|-----------------|---------|----------|------------------|\n| ${res} | Is Element Text | id:name | john doe |                  |\n| ${res} | Is Element Text | id:name | john doe | ignore_case=True |\n\n#### is_element_visible(locator: WebElement | ShadowRoot | str, missing_ok: bool = True) \u2192 bool\n\nIs element visible\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\nExample:\n\n|        |                    |                 |\n|--------|--------------------|-----------------|\n| ${res} | Is Element Visible | id:confirmation |\n\n#### is_list_selected(locator: WebElement | ShadowRoot | str) \u2192 bool\n\nIs any option selected in the\n\n`locator` element locator\n\nExample:\n\n|        |                  |         |\n|--------|------------------|---------|\n| ${res} | Is List Selected | id:cars |\n\n#### is_list_selection(locator: WebElement | ShadowRoot | str, \\*expected: str) \u2192 bool\n\nIs list selected with expected values\n\n`locator` element locator\n\n`expected` expected selected options\n\nExample:\n\n|        |                   |         |      |\n|--------|-------------------|---------|------|\n| ${res} | Is List Selection | id:cars | Ford |\n\n#### is_location(url: str) \u2192 bool\n\nIs current URL expected url\n\n`url` expected current URL\n\nExample:\n\n|                        |                                                      |                                                      |\n|------------------------|------------------------------------------------------|------------------------------------------------------|\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) |                                                      |\n| ${res}                 | Is Location                                          | [https://www.robocorp.com](https://www.robocorp.com) |\n\n#### is_radio_button_selected(group_name: str) \u2192 bool\n\nIs any radio button selected in the button group\n\n`group_name` radio button group name\n\nExample:\n\n|        |                          |                   |\n|--------|--------------------------|-------------------|\n| ${res} | Is Radio Button Selected | group_name=gender |\n\n#### is_radio_button_set_to(group_name: str, value: str) \u2192 bool\n\nIs radio button group set to expected value\n\n`group_name` radio button group name\n\n`value` expected value\n\nExample:\n\n|        |                        |                   |              |\n|--------|------------------------|-------------------|--------------|\n| ${res} | Is Radio Button Set To | group_name=gender | value=female |\n\n#### is_textarea_value(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nIs textarea matching expected value\n\n`locator` element locator\n\n`expected` expected textarea value\n\nExample:\n\n|        |                   |            |                 |\n|--------|-------------------|------------|-----------------|\n| ${res} | Is Textarea Value | //textarea | Yours sincerely |\n\n#### is_textfield_value(locator: WebElement | ShadowRoot | str, expected: str) \u2192 bool\n\nIs textfield value expected\n\n`locator` element locator\n\n`expected` expected textfield value\n\nExample:\n\n|        |                    |          |          |\n|--------|--------------------|----------|----------|\n| ${res} | Is Textfield Value | id:lname | Lastname |\n\n#### is_title(title: str) \u2192 bool\n\nIs page title expected\n\n`title` expected title value\n\nExample:\n\n|        |          |                    |\n|--------|----------|--------------------|\n| ${res} | Is Title | Webpage title text |\n\n#### list_selection_should_be(locator: WebElement | str, \\*expected: str)\n\nVerifies selection list `locator` has `expected` options selected.\n\nIt is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.\n\nIf no expected options are given, validates that the list has no selections. A more explicit alternative is using List Should Have No Selections.\n\nSee the Locating elements section for details about the locator syntax.\n\nExamples:\n\n|                          |           |                 |        |\n|--------------------------|-----------|-----------------|--------|\n| List Selection Should Be | gender    | Female          |        |\n| List Selection Should Be | interests | Test Automation | Python |\n\n#### list_should_have_no_selections(locator: WebElement | str)\n\nVerifies selection list `locator` has no options selected.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### *property* location *: str*\n\nReturn browser location.\n\n#### location_should_be(url: str, message: str | None = None)\n\nVerifies that the current URL is exactly `url`.\n\nThe `url` argument contains the exact url that should exist in browser.\n\nThe `message` argument can be used to override the default error message.\n\n`message` argument is new in SeleniumLibrary 3.2.0.\n\n#### location_should_contain(expected: str, message: str | None = None)\n\nVerifies that the current URL contains `expected`.\n\nThe `expected` argument contains the expected value in url.\n\nThe `message` argument can be used to override the default error message.\n\n`message` argument is new in SeleniumLibrary 3.2.0.\n\n#### log_location() \u2192 str\n\nLogs and returns the current browser window URL.\n\n#### log_source(loglevel: str = 'INFO') \u2192 str\n\nLogs and returns the HTML source of the current page or frame.\n\nThe `loglevel` argument defines the used log level. Valid log levels are `WARN`, `INFO` (default), `DEBUG`, `TRACE` and `NONE` (no logging).\n\n#### log_title() \u2192 str\n\nLogs and returns the title of the current page.\n\n#### maximize_browser_window(\\*args, force: bool = False, \\*\\*kwargs)\n\nMaximizes current browser window.\n\nThe window won\u2019t be maximized in headless mode since there\u2019s no way to know the screen size to set the window size to in the absence of an UI. Use the `Set Window Size` keyword with a specific side or set the force param to True if you still want to enforce this undefined behaviour.\n\n#### minimize_browser_window()\n\nMinimizes current browser window.\n\n#### mouse_down(locator: WebElement | str)\n\nSimulates pressing the left mouse button on the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe element is pressed without releasing the mouse button.\n\nSee also the more specific keywords Mouse Down On Image and Mouse Down On Link.\n\n#### mouse_down_on_image(locator: WebElement | str)\n\nSimulates a mouse down event on an image identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n#### mouse_down_on_link(locator: WebElement | str)\n\nSimulates a mouse down event on a link identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n#### mouse_out(locator: WebElement | str)\n\nSimulates moving the mouse away from the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### mouse_over(locator: WebElement | str)\n\nSimulates hovering the mouse over the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### mouse_up(locator: WebElement | str)\n\nSimulates releasing the left mouse button on the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### normalize_options(options: ArgOptions | str | Dict[str, str | List | Dict] | None, \\*, browser: str) \u2192 ArgOptions\n\nNormalize provided options to a <Browser>Options instance.\n\n#### open_available_browser(url: str | None = None, use_profile: bool = False, headless: bool | str = 'AUTO', maximized: bool = False, browser_selection: Any = 'AUTO', alias: str | None = None, profile_name: str | None = None, profile_path: str | None = None, preferences: dict | None = None, proxy: str = None, user_agent: str | None = None, download: Any = 'AUTO', options: ArgOptions | str | Dict[str, str | List | Dict] | None = None, port: int | None = None, sandbox: bool = False) \u2192 str | int\n\nAttempts to open a browser on the user\u2019s device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.\n\nCurrently supported browsers: Chrome, Firefox, Edge, ChromiumEdge, Safari, Ie\n\nOptionally can be given a `url` as the first argument, to open the browser directly to the given page.\n\nReturns either a generated index or a custom `alias` for the browser instance. The returned value can be used to refer to that specific browser instance in other keywords.\n\nIf the browser should start in a maximized window, this can be enabled with the argument `maximized`, but is disabled by default.\n\nFor certain applications it might also be required to force a certain user-agent string for Selenium, which can be overridden with the `user_agent` argument.\n\nWebDriver creation can be customized with `options`. This accepts a class instance (e.g. `ChromeOptions`), a string like add_argument(\u201d\u2013incognito\u201d);set_capability(\u201cacceptInsecureCerts\u201d, True) or even a simple dictionary like: {\u201carguments\u201d: [\u201d\u2013incognito\u201d], \u201ccapabilities\u201d: {\u201cacceptInsecureCerts\u201d: True}}\n\nA custom `port` can be provided to start the browser webdriver without a randomly picked one. Make sure you provide every time a unique system-available local port if you plan to have multiple browsers being controlled in parallel.\n\nFor incompatible web apps designed to work in Internet Explorer only, Edge can run in IE mode by simply setting ie in the `browser_selection` param. Robot example: [https://github.com/robocorp/example-ie-mode-edge](https://github.com/robocorp/example-ie-mode-edge)\n\nThe `sandbox` argument can be used to enable the sandbox mode for the browser. By default browser is opened in \u2013no-sandbox mode, but this started to cause issues on Chromium version 124. The \u2013no-sandbox flag is set by default to preserve the older behavior.\n\nExample:\n\n|                        |                                                      |                                                                               |                                 |\n|------------------------|------------------------------------------------------|-------------------------------------------------------------------------------|---------------------------------|\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) |                                                                               |                                 |\n| ${index}=              | Open Available Browser                               | ${URL}                                                                        | browser_selection=opera,firefox |\n| Open Available Browser | ${URL}                                               | headless=${True}                                                              | alias=HeadlessBrowser           |\n| Open Available Browser | ${URL}                                               | options=add_argument(\u201cuser-data-dir=path/to/data\u201d);add_argument(\u201d\u2013incognito\u201d) |                                 |\n| Open Available Browser | ${URL}                                               | port=${8888}                                                                  |                                 |\n\n**Browser order**\n\nThe default order of supported browsers is based on the operating system and is as follows:\n\n|           |                               |\n|-----------|-------------------------------|\n| Platform  | Default order                 |\n| `Windows` | Chrome, Firefox, Edge         |\n| `Linux`   | Chrome, Firefox, Edge         |\n| `Darwin`  | Chrome, Firefox, Edge, Safari |\n\nThe order can be overridden with a custom list by using the argument `browser_selection`. The argument can be either a comma-separated string or a list object.\n\nExample:\n\n|                        |        |                      |\n|------------------------|--------|----------------------|\n| Open Available Browser | ${URL} | browser_selection=ie |\n\n**Webdriver download**\n\nThe library can (if requested) automatically download webdrivers for all the supported browsers. This can be controlled with the argument `download`.\n\nIf the value is `False`, it will only attempt to start webdrivers found from the system PATH.\n\nIf the value is `True`, it will download a webdriver that matches the current browser.\n\nBy default the argument has the value `AUTO`, which means it first attempts to use webdrivers found in PATH and if that fails forces a webdriver download.\n\n**Opening process**\n\n1. Parse list of preferred browser order. If not given, use values from above table.\n2. Loop through listed browsers:\n\n1. Set the webdriver options for the browser.\n2. Download webdriver (if requested).\n3. Attempt to launch the webdriver and stop the loop if successful.\n\n1. Return index/alias if webdriver was created, or raise an exception if no browsers were successfully opened.\n\n**Headless mode**\n\nIf required, the browser can also run headless, which means that it does not create a visible window. Generally a headless browser is slightly faster, but might not support all features a normal browser does.\n\nOne typical use-case for headless mode is in cloud containers, where there is no display available. It also prevents manual interaction with the browser, which can be either a benefit or a drawback depending on the context.\n\nIt can be explicitly enabled or disabled with the argument `headless`. By default, it will be disabled, unless it detects that it is running in a Linux environment without a display, e.g. a container or if the RPA_HEADLESS_MODE env var is set to a number different than 0.\n\n**Chromium options**\n\nSome features are currently available only for Chromium-based browsers. This includes using an existing user profile. By default Selenium uses a new profile for each session, but it can use an existing one by enabling the `use_profile` argument.\n\nIf a custom profile is stored somewhere outside of the default location, the path to the profiles directory and the name of the profile can be controlled with `profile_path` and `profile_name` respectively. Keep in mind that the `profile_path` for the Chrome browser for e.g. ends usually with \u201cChrome\u201d, \u201cUser Data\u201d or \u201cgoogle-chrome\u201d (based on platform) and the `profile_name` is a directory relative to `profile_path`, usually named \u201cProfile 1\u201d, \u201cProfile 2\u201d etc. (and not as your visible name in the Chrome browser). Similar behavior is observed with Edge as well.\n\nExample:\n\n|                        |                                                      |                     |                        |                                           |\n|------------------------|------------------------------------------------------|---------------------|------------------------|-------------------------------------------|\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} |                        |                                           |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} | profile_name=Default   |                                           |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} | profile_name=Profile 2 |                                           |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} | profile_name=Profile 1 | profile_path=path/to/custom/user_data_dir |\n\nProfile preferences can be further overridden with the `preferences` argument by giving a dictionary of key/value pairs.\n\nChromium-based browsers can additionally connect through a `proxy`, which should be given as either a local or remote address.\n\n#### open_browser(url: str | None = None, browser: str = 'firefox', alias: str | None = None, remote_url: bool | str = False, desired_capabilities: dict | None | str = None, ff_profile_dir: FirefoxProfile | str | None = None, options: ArgOptions | str | Dict[str, str | List | Dict] | None = None, service_log_path: str | None = None, executable_path: str | None = None, service: Any | None = None) \u2192 str\n\nOpens a new browser instance to the optional `url`.\n\nThe `browser` argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.\n\n| Browser           | Name(s)                  |\n|-------------------|--------------------------|\n| Firefox           | firefox, ff              |\n| Google Chrome     | googlechrome, chrome, gc |\n| Headless Firefox  | headlessfirefox          |\n| Headless Chrome   | headlesschrome           |\n| Internet Explorer | internetexplorer, ie     |\n| Edge              | edge                     |\n| Safari            | safari                   |\n\nTo be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the [project documentation](https://github.com/robotframework/SeleniumLibrary#browser-drivers) for more details.\n\nAfter opening the browser, it is possible to use optional `url` to navigate the browser to the desired address.\n\nExamples:\n\n|              |                                          |         |                                         |\n|--------------|------------------------------------------|---------|-----------------------------------------|\n| Open Browser | [http://example.com](http://example.com) | Chrome  |                                         |\n| Open Browser | [http://example.com](http://example.com) | Firefox | alias=Firefox                           |\n| Open Browser | [http://example.com](http://example.com) | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |\n| Open Browser | [about:blank](about:blank)               |         |                                         |\n| Open Browser | browser=Chrome                           |         |                                         |\n\nOptional `alias` is an alias given for this browser instance and it can be used for switching between browsers. When same `alias` is given with two Open Browser keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The `alias` definition overrules `browser` definition. When same `alias` is used but a different `browser` is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when Close All Browsers is called. See Switch Browser for more information and examples.\n\nAlias examples:\n\n|                 |              |                                          |         |                  |                                                   |\n|-----------------|--------------|------------------------------------------|---------|------------------|---------------------------------------------------|\n| ${1_index} =    | Open Browser | [http://example.com](http://example.com) | Chrome  | alias=Chrome     | # Opens new browser because alias is new.         |\n| ${2_index} =    | Open Browser | [http://example.com](http://example.com) | Firefox |                  | # Opens new browser because alias is not defined. |\n| ${3_index} =    | Open Browser | [http://example.com](http://example.com) | Chrome  | alias=Chrome     | # Switches to the browser with Chrome alias.      |\n| ${4_index} =    | Open Browser | [http://example.com](http://example.com) | Chrome  | alias=${1_index} | # Switches to the browser with Chrome alias.      |\n| Should Be Equal | ${1_index}   | ${3_index}                               |         |                  |                                                   |\n| Should Be Equal | ${1_index}   | ${4_index}                               |         |                  |                                                   |\n| Should Be Equal | ${2_index}   | ${2}                                     |         |                  |                                                   |\n\nOptional `remote_url` is the URL for a [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2).\n\nOptional `desired_capabilities` is deprecated and will be removed in the next release. Capabilities of each individual browser is now done through options or services. Please refer to those arguments for configuring specific browsers.\n\nOptional `ff_profile_dir` is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. The `ff_profile_dir` can also be an instance of the [selenium.webdriver.FirefoxProfile](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html) . As a third option, it is possible to use FirefoxProfile methods and attributes to define the profile using methods and attributes in the same way as with `options` argument. Example: It is possible to use FirefoxProfile set_preference to define different profile settings. See `options` argument documentation in below how to handle backslash escaping.\n\nExample for FirefoxProfile\n\n|              |                                          |         |                                                                                  |                                                  |\n|--------------|------------------------------------------|---------|----------------------------------------------------------------------------------|--------------------------------------------------|\n| Open Browser | [http://example.com](http://example.com) | Firefox | ff_profile_dir=/path/to/profile                                                  | # Using profile from disk.                       |\n| Open Browser | [http://example.com](http://example.com) | Firefox | ff_profile_dir=${FirefoxProfile_instance}                                        | # Using instance of FirefoxProfile.              |\n| Open Browser | [http://example.com](http://example.com) | Firefox | ff_profile_dir=set_preference(\u201ckey\u201d, \u201cvalue\u201d);set_preference(\u201cother\u201d, \u201csetting\u201d) | # Defining profile using FirefoxProfile mehtods. |\n\nOptional `options` argument allows defining browser specific Selenium options. Example for Chrome, the `options` argument allows defining the following [methods and attributes](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options) and for Firefox these [methods and attributes](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options) are available. Selenium options are also supported, when `remote_url` argument is used.\n\nThe SeleniumLibrary `options` argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.\n\nThe string format uses a Python like syntax to define Selenium options methods or attributes.\n\nExample when using [Chrome options](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options) method:\n\n|              |                                          |        |                                                                                             |                                    |\n|--------------|------------------------------------------|--------|---------------------------------------------------------------------------------------------|------------------------------------|\n| Open Browser | [http://example.com](http://example.com) | Chrome | options=add_argument(\u201d\u2013disable-popup-blocking\u201d); add_argument(\u201d\u2013ignore-certificate-errors\u201d) | # Sting format.                    |\n| Open Browser | None                                     | Chrome | options=binary_location=\u201d/path/to/binary\u201d;add_argument(\u201cremote-debugging-port=port\u201d)        | # Start Chomium-based application. |\n| Open Browser | None                                     | Chrome | options=binary_location=r\u201dC:\\\\path\\\\to\\\\binary\u201d                                             | # Windows OS path escaping.        |\n\n`options` argument also supports receiving the Selenium options as Python class instance.\n\nSee the Browser and Driver options section for more details on how to use the either the string format or Python object syntax with the `options` argument.\n\nOptional `service_log_path` will be deprecated in the next release. Please use the browser specific `service` attribute instead. The `service_log_path` argument defines the name of the file where to write the browser driver logs. If the `service_log_path`  argument contains a marker `{index}`, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start\u2019s from 1, and how they are represented can be customized using Python\u2019s [format string syntax](https://docs.python.org/3/library/string.html#format-string-syntax).\n\nOptional `executable_path`  will be deprecated in the next release. Please use the executable_path and, if needed, port attribute on the `service` argument instead. The `executable_path` argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the [$PATH](https://en.wikipedia.org/wiki/PATH_(variable)).\n\nOptional `service` argument allows for managing the local drivers as well as setting some browser specific settings like logging. Service classes are not supported when `remote_url` argument is used. See the Browser and Driver options section for more details on how to use the `service` argument.\n\nIf the provided configuration options are not enough, it is possible to use Create Webdriver to customize browser initialization even more.\n\nThe `service` argument is new in SeleniumLibrary 6.4.\n\n#### open_chrome_browser(url: str, use_profile: bool = False, headless: bool | str = 'AUTO', maximized: bool = False, alias: str | None = None, profile_name: str | None = None, profile_path: str | None = None, preferences: dict | None = None, proxy: str | None = None, user_agent: str | None = None, sandbox: bool = False) \u2192 str | int\n\nOpens a Chrome browser.\n\nSee `Open Available Browser` for a full descriptions of the arguments.\n\n#### open_context_menu(locator: WebElement | str)\n\nOpens the context menu on the element identified by `locator`.\n\n#### open_headless_chrome_browser(url: str) \u2192 str | int\n\nOpens the Chrome browser in headless mode.\n\n`url` URL to open\n\nExample:\n\n|          |                              |                                                  |\n|----------|------------------------------|--------------------------------------------------|\n| ${idx} = | Open Headless Chrome Browser | [https://www.google.com](https://www.google.com) |\n\n#### open_user_browser(url: str, tab=True) \u2192 None\n\nOpens an URL with te user\u2019s default browser.\n\nThe browser opened with this keyword is not accessible with Selenium. To interact with the opened browser it is possible to use `RPA.Desktop` or `RPA.Windows` library keywords.\n\nThe keyword Attach Chrome Browser can be used to access an already open browser with Selenium keywords.\n\nRead more: [https://robocorp.com/portal/tutorial/how-to-attach-to-running-chrome-browser](https://robocorp.com/portal/tutorial/how-to-attach-to-running-chrome-browser)\n\n`url` URL to open `tab` defines is url is opened in a tab (defaults to `True`) or in new window (if set to `False`)\n\nExample:\n\n|                   |                                                              |              |\n|-------------------|--------------------------------------------------------------|--------------|\n| Open User Browser | [https://www.google.com?q=rpa](https://www.google.com?q=rpa) |              |\n| Open User Browser | [https://www.google.com?q=rpa](https://www.google.com?q=rpa) | tab=${False} |\n\n#### page_should_contain(text: str, loglevel: str = 'TRACE')\n\nVerifies that current page contains `text`.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional `loglevel` argument. Valid log levels are `TRACE` (default), `DEBUG`, `INFO`, `WARN`, and `NONE`. If the log level is `NONE` or below the current active log level the source will not be logged.\n\n!! WARNING !! If you have an iframe selected, Page Should Contain will reset the frame reference back to the main frame. This is due to the fact that is searches for the `text` in all frames. To locate an element in an iframe after calling Page Should Contian one needs to (re)select the frame.\n\n#### page_should_contain_button(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies button `locator` is found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n#### page_should_contain_checkbox(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies checkbox `locator` is found from the current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### page_should_contain_element(locator: WebElement | str | List[WebElement | str], message: str | None = None, loglevel: str = 'TRACE', limit: int | None = None)\n\nVerifies that element `locator` is found on the current page.\n\nSee the Locating elements section for details about the locator syntax.\n\nThe `message` argument can be used to override the default error message.\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is `None` (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\nSee Page Should Contain for an explanation about the `loglevel` argument.\n\nExamples assumes that locator matches to two elements.\n\n|                             |          |            |                                   |\n|-----------------------------|----------|------------|-----------------------------------|\n| Page Should Contain Element | div_name | limit=1    | # Keyword fails.                  |\n| Page Should Contain Element | div_name | limit=2    | # Keyword passes.                 |\n| Page Should Contain Element | div_name | limit=none | # None is considered one or more. |\n| Page Should Contain Element | div_name |            | # Same as above.                  |\n\nThe `limit` argument is new in SeleniumLibrary 3.0.\n\n#### page_should_contain_image(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies image identified by `locator` is found from current page.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\n#### page_should_contain_link(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies link identified by `locator` is found from current page.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\n#### page_should_contain_list(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies selection list `locator` is found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### page_should_contain_radio_button(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies radio button `locator` is found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`.\n\n#### page_should_contain_textfield(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies text field `locator` is found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### page_should_not_contain(text: str, loglevel: str = 'TRACE')\n\nVerifies the current page does not contain `text`.\n\nSee Page Should Contain for an explanation about the `loglevel` argument.\n\n#### page_should_not_contain_button(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies button `locator` is not found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n#### page_should_not_contain_checkbox(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies checkbox `locator` is not found from the current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### page_should_not_contain_element(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies that element `locator` is not found on the current page.\n\nSee the Locating elements section for details about the locator syntax.\n\nSee Page Should Contain for an explanation about `message` and `loglevel` arguments.\n\n#### page_should_not_contain_image(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies image identified by `locator` is not found from current page.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\n#### page_should_not_contain_link(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies link identified by `locator` is not found from current page.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\n#### page_should_not_contain_list(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies selection list `locator` is not found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### page_should_not_contain_radio_button(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies radio button `locator` is not found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`.\n\n#### page_should_not_contain_textfield(locator: WebElement | str, message: str | None = None, loglevel: str = 'TRACE')\n\nVerifies text field `locator` is not found from current page.\n\nSee Page Should Contain Element for an explanation about `message` and `loglevel` arguments.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### press_key(locator: WebElement | str, key: str)\n\nSimulates user pressing key on element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n`key` is either a single character, a string, or a numerical ASCII code of the key lead by \u2018'.\n\nExamples:\n\n|           |              |       |                            |\n|-----------|--------------|-------|----------------------------|\n| Press Key | text_field   | q     |                            |\n| Press Key | text_field   | abcde |                            |\n| Press Key | login_button | 13    | # ASCII code for enter key |\n\nPress Key and Press Keys differ in the methods to simulate key presses. Press Key uses the WebDriver SEND_KEYS_TO_ELEMENT command using the selenium send_keys method. Although one is not recommended over the other if Press Key does not work we recommend trying Press Keys.\n\n#### press_keys(locator: WebElement | None | str = None, \\*keys: str)\n\nSimulates the user pressing key(s) to an element or on the active browser.\n\nIf `locator` evaluates as false, see Boolean arguments for more details, then the `keys` are sent to the currently active browser. Otherwise element is searched and `keys` are send to the element identified by the `locator`. In later case, keyword fails if element is not found. See the Locating elements section for details about the locator syntax.\n\n`keys` arguments can contain one or many strings, but it can not be empty. `keys` can also be a combination of [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html) and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the + character, like in CONTROL+c. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string AALTO and ALT not parsed inside of the string. But A+ALT+O would found Selenium ALT key from the `keys` argument. It also possible to press many Selenium Keys down at the same time, example \u2018ALT+ARROW_DOWN\\`.\n\nIf Selenium Keys are detected in the `keys` argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with + character, example E+N+D.\n\nCTRL is alias for [Selenium CONTROL](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL) and ESC is alias for [Selenium ESCAPE](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE)\n\nNew in SeleniumLibrary 3.3\n\nExamples:\n\n|            |            |                |            |                                                                                   |\n|------------|------------|----------------|------------|-----------------------------------------------------------------------------------|\n| Press Keys | text_field | AAAAA          |            | # Sends string \u201cAAAAA\u201d to element.                                                |\n| Press Keys | None       | BBBBB          |            | # Sends string \u201cBBBBB\u201d to currently active browser.                               |\n| Press Keys | text_field | E+N+D          |            | # Sends string \u201cEND\u201d to element.                                                  |\n| Press Keys | text_field | XXX            | YY         | # Sends strings \u201cXXX\u201d and \u201cYY\u201d to element.                                        |\n| Press Keys | text_field | XXX+YY         |            | # Same as above.                                                                  |\n| Press Keys | text_field | ALT+ARROW_DOWN |            | # Pressing \u201cALT\u201d key down, then pressing ARROW_DOWN and then releasing both keys. |\n| Press Keys | text_field | ALT            | ARROW_DOWN | # Pressing \u201cALT\u201d key and then pressing ARROW_DOWN.                                |\n| Press Keys | text_field | CTRL+c         |            | # Pressing CTRL key down, sends string \u201cc\u201d and then releases CTRL key.            |\n| Press Keys | button     | RETURN         |            | # Pressing \u201cENTER\u201d key to element.                                                |\n\nPress Key and Press Keys differ in the methods to simulate key presses. Press Keys uses the Selenium/WebDriver Actions. Press Keys also has a more extensive syntax for describing keys, key combinations, and key actions. Although one is not recommended over the other if Press Keys does not work we recommend trying Press Key.\n\n#### print_page_as_pdf(filename: str = 'selenium-page-{index}.pdf', background: bool | None = None, margin_bottom: float | None = None, margin_left: float | None = None, margin_right: float | None = None, margin_top: float | None = None, orientation: str | None = None, page_height: float | None = None, page_ranges: list | None = None, page_width: float | None = None, scale: float | None = None, shrink_to_fit: bool | None = None)\n\nPrint the current page as a PDF\n\n`page_ranges` defaults to [\u2018-\u2018] or \u201call\u201d pages. `page_ranges` takes a list of strings indicating the ranges.\n\nThe page size defaults to 21.59 for `page_width` and 27.94 for `page_height`. This is the equivalent size of US-Letter. The assumed units on these parameters is centimeters.\n\nThe default margin for top, left, bottom, right is 1. The assumed units on these parameters is centimeters.\n\nThe default `orientation` is portrait. `orientation` can be either portrait or landscape.\n\nThe default `scale` is 1. `scale` must be greater than or equal to 0.1 and less than or equal to 2.\n\n`background` and `scale_to_fit` can be either ${True} or ${False}..\n\nIf all print options are None then a pdf will fail to print silently.\n\n#### print_to_pdf(output_path: str | None = None, params: dict | None = None) \u2192 str\n\nPrint the current page to a PDF document using Chrome\u2019s DevTools.\n\nAttention: With some older browsers, this may work in **headless** mode only! For a list of supported parameters see: [https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF](https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF) Returns the output PDF file path.\n\nParameter `output_path` specifies the file path for the generated PDF document. By default, it is saved to the output folder with the default name of out.pdf. Parameter `params` specify parameters for the browser printing method. By default, it uses the following values: `` { \"landscape\": False, \"displayHeaderFooter\": False, \"printBackground\": True, \"preferCSSPageSize\": True, } ``\n\n#### radio_button_should_be_set_to(group_name: str, value: str)\n\nVerifies radio button group `group_name` is set to `value`.\n\n`group_name` is the `name` of the radio button group.\n\n#### radio_button_should_not_be_selected(group_name: str)\n\nVerifies radio button group `group_name` has no selection.\n\n`group_name` is the `name` of the radio button group.\n\n#### register_driver(driver: WebDriver, alias: str)\n\nAdd\u2019s a driver to the library WebDriverCache.\n\n* **Parameters:**\n  **driver** \u2013 Instance of the Selenium WebDriver. :type driver: selenium.webdriver.remote.webdriver.WebDriver :param alias: Alias given for this WebDriver instance. :type alias: str :return: The index of the WebDriver instance. :rtype: int\n\n#### register_keyword_to_run_on_failure(keyword: str | None) \u2192 str\n\nSets the keyword to execute, when a SeleniumLibrary keyword fails.\n\n`keyword` is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.\n\nThe initial keyword to use is set when importing the library, and the keyword that is used by default is Capture Page Screenshot. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.\n\nIt is possible to use string `NOTHING` or `NONE`, case-insensitively, as well as Python `None` to disable this feature altogether.\n\nThis keyword returns the name of the previously registered failure keyword or Python `None` if this functionality was previously disabled. The return value can be always used to restore the original value later.\n\nExample:\n\n|                                    |                                    |      |\n|------------------------------------|------------------------------------|------|\n| Register Keyword To Run On Failure | Log Source                         |      |\n| ${previous kw}=                    | Register Keyword To Run On Failure | NONE |\n| Register Keyword To Run On Failure | ${previous kw}                     |      |\n\nChanges in SeleniumLibrary 3.0:\n\n- Possible to use string `NONE` or Python `None` to disable the functionality.\n- Return Python `None` when the functionality was disabled earlier. In previous versions special value `No Keyword` was returned and it could not be used to restore the original state.\n\n#### reload_page()\n\nSimulates user reloading page.\n\n#### remove_location_strategy(strategy_name: str)\n\nRemoves a previously added custom location strategy.\n\nSee Custom locators for information on how to create and use custom strategies.\n\n#### run_keyword(name: str, args: tuple, kwargs: dict)\n\n#### screenshot(locator: WebElement | ShadowRoot | str | None = None, filename: str | None = '') \u2192 str | None\n\nCapture page and/or element screenshot.\n\n`locator` if defined, take element screenshot, if not takes page screenshot\n\n`filename` filename for the screenshot, by default creates file screenshot-<timestamp>-(element|page).png if set to None then file is not saved at all\n\nExample:\n\n|            |                              |                                   |                                                   |\n|------------|------------------------------|-----------------------------------|---------------------------------------------------|\n| Screenshot | locator=//img[@alt=\u201dGoogle\u201d] | filename=locator.png              | # element screenshot, defined filename            |\n| Screenshot | filename=page.png            |                                   | # page screenshot, defined filename               |\n| Screenshot | filename=${NONE}             |                                   | # page screenshot, NO file will be created        |\n| Screenshot |                              |                                   | # page screenshot, default filename               |\n| Screenshot | locator=//img[@alt=\u201dGoogle\u201d] |                                   | # element screenshot, default filename            |\n| Screenshot | locator=//img[@alt=\u201dGoogle\u201d] | filename=${CURDIR}/subdir/loc.png | # element screenshot, create dirs if not existing |\n\n#### scroll_element_into_view(locator: WebElement | str)\n\nScrolls the element identified by `locator` into view.\n\nSee the Locating elements section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.2.0\n\n#### select_all_from_list(locator: WebElement | str)\n\nSelects all options from multi-selection list `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### select_checkbox(locator: WebElement | str)\n\nSelects the checkbox identified by `locator`.\n\nDoes nothing if checkbox is already selected.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### select_frame(locator: WebElement | str)\n\nSets frame identified by `locator` as the current frame.\n\nSee the Locating elements section for details about the locator syntax.\n\nWorks both with frames and iframes. Use Unselect Frame to cancel the frame selection and return to the main frame.\n\nExample:\n\n|                |                       |                                              |\n|----------------|-----------------------|----------------------------------------------|\n| Select Frame   | top-frame             | # Select frame with id or name \u2018top-frame\u2019   |\n| Click Link     | example               | # Click link \u2018example\u2019 in the selected frame |\n| Unselect Frame |                       | # Back to main frame.                        |\n| Select Frame   | //iframe[@name=\u2019xxx\u2019] | # Select frame using xpath                   |\n\n#### select_from_list_by_index(locator: WebElement | str, \\*indexes: str)\n\nSelects options from selection list `locator` by `indexes`.\n\nIndexes of list options start from 0.\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### select_from_list_by_label(locator: WebElement | str, \\*labels: str)\n\nSelects options from selection list `locator` by `labels`.\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### select_from_list_by_value(locator: WebElement | str, \\*values: str)\n\nSelects options from selection list `locator` by `values`.\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### select_radio_button(group_name: str, value: str)\n\nSets the radio button group `group_name` to `value`.\n\nThe radio button to be selected is located by two arguments:\n\n- `group_name` is the name of the radio button group.\n- `value` is the `id` or `value` attribute of the actual radio button.\n\nExamples:\n\n|                     |         |       |\n|---------------------|---------|-------|\n| Select Radio Button | size    | XL    |\n| Select Radio Button | contact | email |\n\n#### set_action_chain_delay(value: timedelta) \u2192 str\n\nSets the duration of delay in ActionChains() used by SeleniumLibrary.\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`.\n\nValue is always stored as milliseconds internally.\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\n#### set_browser_implicit_wait(value: timedelta)\n\nSets the implicit wait value used by Selenium.\n\nSame as Set Selenium Implicit Wait but only affects the current browser.\n\n#### set_default_url_scheme(scheme: str | None) \u2192 None\n\nSets the default scheme used for URLs without a defined value, such as http or https.\n\nThe feature is disabled if the value is set to None.\n\n#### set_download_directory(directory: str | None = None, download_pdf: bool = True) \u2192 None\n\nSet a custom browser download directory.\n\nThis has to be called before opening the browser and it works with the following keywords:\n\n- `Open Available Browser`\n- `Open Chrome Browser`\n- `Open Headless Chrome Browser`\n\nSupported browsers: Chrome, Edge, Firefox.\n\nIf the downloading doesn\u2019t work (file is not found on disk), try using the browser in non-headless (headful) mode when opening it. (`headless=${False}`)\n\nParameter `directory` sets a path for downloads, defaults to `None`, which means that this setting is removed and the default location will be used. Parameter `download_pdf` will download a PDF file instead of previewing it within browser\u2019s internal viewer when this is set to `True`. (enabled by default)\n\nExample:\n\n|                        |                                                                                                                |               |\n|------------------------|----------------------------------------------------------------------------------------------------------------|---------------|\n| Set Download Directory | ${OUTPUT_DIR}                                                                                                  |               |\n| Open Available Browser | [https://cdn.robocorp.com/legal/Robocorp-EULA-v1.0.pdf](https://cdn.robocorp.com/legal/Robocorp-EULA-v1.0.pdf) |               |\n| @{files} =             | List Files In Directory                                                                                        | ${OUTPUT_DIR} |\n| Log List               | ${files}                                                                                                       |               |\n\n#### set_element_attribute(locator: WebElement | ShadowRoot | str, attribute: str, value: str) \u2192 None\n\nSets a `value` for the `attribute` in the element `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nExample:\n\n|                       |        |       |        |\n|-----------------------|--------|-------|--------|\n| Set Element Attribute | css:h1 | class | active |\n\n#### set_focus_to_element(locator: WebElement | str)\n\nSets the focus to the element identified by `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named Focus.\n\n#### set_screenshot_directory(path: None | str) \u2192 str\n\nSets the directory for captured screenshots.\n\n`path` argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when importing the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework\u2019s log file is written.\n\nIf `path` equals to EMBED (case insensitive) and Capture Page Screenshot or capture Element Screenshot keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\nReturning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.\n\n#### set_selenium_implicit_wait(value: timedelta) \u2192 str\n\nSets the implicit wait value used by Selenium.\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nThis keyword sets the implicit wait for all opened browsers. Use Set Browser Implicit Wait to set it only to the current browser.\n\nSee the Implicit wait section above for more information.\n\nExample:\n\n|                                |                            |            |\n|--------------------------------|----------------------------|------------|\n| ${orig wait} =                 | Set Selenium Implicit Wait | 10 seconds |\n| Perform AJAX call that is slow |                            |            |\n| Set Selenium Implicit Wait     | ${orig wait}               |            |\n\n#### set_selenium_page_load_timeout(value: timedelta) \u2192 str\n\nSets the page load timeout value used by Selenium.\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nIn contrast to Set Selenium Timeout and Set Selenium Implicit Wait, this keywords sets the time for the Webdriver to wait until the page is loaded before raising a timeout exception.\n\nSee the Page load section above for more information.\n\nExample:\n\n|                                |                                |            |\n|--------------------------------|--------------------------------|------------|\n| ${orig page load timeout} =    | Set Selenium Page Load Timeout | 30 seconds |\n| Open page that loads slowly    |                                |            |\n| Set Selenium Page Load Timeout | ${orig page load timeout}      |            |\n\nNew in SeleniumLibrary 6.1\n\n#### set_selenium_speed(value: timedelta) \u2192 str\n\nSets the delay that is waited after each Selenium command.\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nSee the Selenium Speed section above for more information.\n\nExample:\n\n|                    |             |\n|--------------------|-------------|\n| Set Selenium Speed | 0.5 seconds |\n\n#### set_selenium_timeout(value: timedelta) \u2192 str\n\nSets the timeout that is used by various keywords.\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\nSee the Timeout section above for more information.\n\nExample:\n\n|                             |                      |            |\n|-----------------------------|----------------------|------------|\n| ${orig timeout} =           | Set Selenium Timeout | 15 seconds |\n| Open page that loads slowly |                      |            |\n| Set Selenium Timeout        | ${orig timeout}      |            |\n\n#### set_window_position(x: int, y: int)\n\nSets window position using `x` and `y` coordinates.\n\nThe position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.\n\nValues can be given using strings containing numbers or by using actual numbers. See also Get Window Position.\n\nExample:\n\n|                     |     |     |\n|---------------------|-----|-----|\n| Set Window Position | 100 | 200 |\n\n#### set_window_size(width: int, height: int, inner: bool = False)\n\nSets current windows size to given `width` and `height`.\n\nValues can be given using strings containing numbers or by using actual numbers. See also Get Window Size.\n\nBrowsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.\n\nIf `inner` parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM *window.innerWidth* and *window.innerHeight*. See Boolean arguments for more details on how to set boolean arguments.\n\nThe `inner` argument is new since SeleniumLibrary 4.0.\n\nThis `inner` argument does not support Frames. If a frame is selected, switch to default before running this.\n\nExample:\n\n|                 |     |     |      |\n|-----------------|-----|-----|------|\n| Set Window Size | 800 | 600 |      |\n| Set Window Size | 800 | 600 | True |\n\n#### simulate_event(locator: WebElement | str, event: str)\n\nSimulates `event` on the element identified by `locator`.\n\nThis keyword is useful if element has `OnEvent` handler that needs to be explicitly invoked.\n\nSee the Locating elements section for details about the locator syntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named Simulate.\n\n#### submit_form(locator: WebElement | None | str = None)\n\nSubmits a form identified by `locator`.\n\nIf `locator` is not given, first form on the page is submitted.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### switch_browser(index_or_alias: str)\n\nSwitches between active browsers using `index_or_alias`.\n\nIndices are returned by the Open Browser keyword and aliases can be given to it explicitly. Indices start from 1.\n\nExample:\n\n|                     |                                        |         |              |\n|---------------------|----------------------------------------|---------|--------------|\n| Open Browser        | [http://google.com](http://google.com) | ff      |              |\n| Location Should Be  | [http://google.com](http://google.com) |         |              |\n| Open Browser        | [http://yahoo.com](http://yahoo.com)   | ie      | alias=second |\n| Location Should Be  | [http://yahoo.com](http://yahoo.com)   |         |              |\n| Switch Browser      | 1                                      | # index |              |\n| Page Should Contain | I\u2019m feeling lucky                      |         |              |\n| Switch Browser      | second                                 | # alias |              |\n| Page Should Contain | More Yahoo!                            |         |              |\n| Close All Browsers  |                                        |         |              |\n\nAbove example expects that there was no other open browsers when opening the first one because it used index `1` when switching to it later. If you are not sure about that, you can store the index into a variable as below.\n\n|                  |              |                                        |\n|------------------|--------------|----------------------------------------|\n| ${index} =       | Open Browser | [http://google.com](http://google.com) |\n| # Do something \u2026 |              |                                        |\n| Switch Browser   | ${index}     |                                        |\n\n#### switch_window(locator: list | str = 'MAIN', timeout: str | None = None, browser: str = 'CURRENT')\n\nSwitches to browser window matching `locator`.\n\nIf the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.\n\nNotice that alerts should be handled with Handle Alert or other alert related keywords.\n\nThe `locator` can be specified using different strategies somewhat similarly as when locating elements on pages.\n\n- By default, the `locator` is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.\n- The `locator` can specify an explicit strategy by using the format `strategy:value` (recommended) or `strategy=value`. Supported strategies are `name`, `title`, and `url`. These matches windows using their name, title, or URL, respectively. Additionally, `default` can be used to explicitly use the default strategy explained above.\n- If the `locator` is `NEW` (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.\n- If the `locator` is `MAIN` (default, case-insensitive), the main window is selected.\n- If the `locator` is `CURRENT` (case-insensitive), nothing is done. This effectively just returns the current window handle.\n- If the `locator` is not a string, it is expected to be a list of window handles *to exclude*. Such a list of excluded windows can be got from Get Window Handles before doing an action that opens a new window.\n\nThe `timeout` is used to specify how long keyword will poll to select the new window. The `timeout` is new in SeleniumLibrary 3.2.\n\nExample:\n\n|                 |                    |     |                                        |\n|-----------------|--------------------|-----|----------------------------------------|\n| Click Link      | popup1             |     | # Open new window                      |\n| Switch Window   | example            |     | # Select window using default strategy |\n| Title Should Be | Pop-up 1           |     |                                        |\n| Click Button    | popup2             |     | # Open another window                  |\n| ${handle} =     | Switch Window      | NEW | # Select latest opened window          |\n| Title Should Be | Pop-up 2           |     |                                        |\n| Switch Window   | ${handle}          |     | # Select window using handle           |\n| Title Should Be | Pop-up 1           |     |                                        |\n| Switch Window   | MAIN               |     | # Select the main window               |\n| Title Should Be | Main               |     |                                        |\n| ${excludes} =   | Get Window Handles |     | # Get list of current windows          |\n| Click Link      | popup3             |     | # Open one more window                 |\n| Switch Window   | ${excludes}        |     | # Select window using excludes         |\n| Title Should Be | Pop-up 3           |     |                                        |\n\nThe `browser` argument allows with `index_or_alias` to implicitly switch to a specific browser when switching to a window. See Switch Browser\n\n- If the `browser` is `CURRENT` (case-insensitive), no other browser is selected.\n\n**NOTE:**\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.\n- Earlier versions supported aliases `None`, `null` and the empty string for selecting the main window, and alias `self` for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.\n\n#### table_cell_should_contain(locator: WebElement | str, row: int, column: int, expected: str, loglevel: str = 'TRACE')\n\nVerifies table cell contains text `expected`.\n\nSee Get Table Cell that this keyword uses internally for an explanation about accepted arguments.\n\n#### table_column_should_contain(locator: WebElement | str, column: int, expected: str, loglevel: str = 'TRACE')\n\nVerifies table column contains text `expected`.\n\nThe table is located using the `locator` argument and its column found using `column`. See the Locating elements section for details about the locator syntax.\n\nColumn indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.\n\nIf a table contains cells that span multiple columns, those merged cells count as a single column.\n\nSee Page Should Contain Element for an explanation about the `loglevel` argument.\n\n#### table_footer_should_contain(locator: WebElement | str, expected: str, loglevel: str = 'TRACE')\n\nVerifies table footer contains text `expected`.\n\nAny `<td>` element inside `<tfoot>` element is considered to be part of the footer.\n\nThe table is located using the `locator` argument. See the Locating elements section for details about the locator syntax.\n\nSee Page Should Contain Element for an explanation about the `loglevel` argument.\n\n#### table_header_should_contain(locator: WebElement | str, expected: str, loglevel: str = 'TRACE')\n\nVerifies table header contains text `expected`.\n\nAny `<th>` element anywhere in the table is considered to be part of the header.\n\nThe table is located using the `locator` argument. See the Locating elements section for details about the locator syntax.\n\nSee Page Should Contain Element for an explanation about the `loglevel` argument.\n\n#### table_row_should_contain(locator: WebElement | str, row: int, expected: str, loglevel: str = 'TRACE')\n\nVerifies that table row contains text `expected`.\n\nThe table is located using the `locator` argument and its column found using `column`. See the Locating elements section for details about the locator syntax.\n\nRow indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.\n\nIf a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.\n\nSee Page Should Contain Element for an explanation about the `loglevel` argument.\n\n#### table_should_contain(locator: WebElement | str, expected: str, loglevel: str = 'TRACE')\n\nVerifies table contains text `expected`.\n\nThe table is located using the `locator` argument. See the Locating elements section for details about the locator syntax.\n\nSee Page Should Contain Element for an explanation about the `loglevel` argument.\n\n#### textarea_should_contain(locator: WebElement | str, expected: str, message: str | None = None)\n\nVerifies text area `locator` contains text `expected`.\n\n`message` can be used to override default error message.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### textarea_value_should_be(locator: WebElement | str, expected: str, message: str | None = None)\n\nVerifies text area `locator` has exactly text `expected`.\n\n`message` can be used to override default error message.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### textfield_should_contain(locator: WebElement | str, expected: str, message: str | None = None)\n\nVerifies text field `locator` contains text `expected`.\n\n`message` can be used to override the default error message.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### textfield_value_should_be(locator: WebElement | str, expected: str, message: str | None = None)\n\nVerifies text field `locator` has exactly text `expected`.\n\n`message` can be used to override default error message.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### title_should_be(title: str, message: str | None = None)\n\nVerifies that the current page title equals `title`.\n\nThe `message` argument can be used to override the default error message.\n\n`message` argument is new in SeleniumLibrary 3.1.\n\n#### unselect_all_from_list(locator: WebElement | str)\n\nUnselects all options from multi-selection list `locator`.\n\nSee the Locating elements section for details about the locator syntax.\n\nNew in SeleniumLibrary 3.0.\n\n#### unselect_checkbox(locator: WebElement | str)\n\nRemoves the selection of checkbox identified by `locator`.\n\nDoes nothing if the checkbox is not selected.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### unselect_frame()\n\nSets the main frame as the current frame.\n\nIn practice cancels the previous Select Frame call.\n\n#### unselect_from_list_by_index(locator: WebElement | str, \\*indexes: str)\n\nUnselects options from selection list `locator` by `indexes`.\n\nIndexes of list options start from 0. This keyword works only with multi-selection lists.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### unselect_from_list_by_label(locator: WebElement | str, \\*labels: str)\n\nUnselects options from selection list `locator` by `labels`.\n\nThis keyword works only with multi-selection lists.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### unselect_from_list_by_value(locator: WebElement | str, \\*values: str)\n\nUnselects options from selection list `locator` by `values`.\n\nThis keyword works only with multi-selection lists.\n\nSee the Locating elements section for details about the locator syntax.\n\n#### wait_and_click_button(locator: WebElement | ShadowRoot | str, modifier: str | None = None) \u2192 None\n\nClick button identified by `locator`, once it becomes visible.\n\n`locator` element locator\n\n`modifier` press given keys while clicking the element, e.g. CTRL\n\nExample:\n\n|                           |                             |\n|---------------------------|-----------------------------|\n| Click Button When Visible | //button[@class=\u201dmybutton\u201d] |\n\n#### wait_for_condition(condition: str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until `condition` is true or `timeout` expires.\n\nThe condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See Execute JavaScript for information about accessing content on pages.\n\nFails if the timeout expires before the condition becomes true. See the Timeouts section for more information about using timeouts and their default value.\n\n`error` can be used to override the default error message.\n\nExamples:\n\n|                    |                                                                                                        |\n|--------------------|--------------------------------------------------------------------------------------------------------|\n| Wait For Condition | return document.title == \u201cNew Title\u201d                                                                   |\n| Wait For Condition | return jQuery.active == 0                                                                              |\n| Wait For Condition | style = document.querySelector(\u2018h1\u2019).style; return style.background == \u201cred\u201d && style.color == \u201cwhite\u201d |\n\n#### wait_for_expected_condition(condition: <module 'string' from 'C:\\\\\\\\hostedtoolcache\\\\\\\\windows\\\\\\\\Python\\\\\\\\3.9.13\\\\\\\\x64\\\\\\\\lib\\\\\\\\string.py'>, \\*args, timeout: float | None = 10)\n\nWaits until `condition` is true or `timeout` expires.\n\nThe condition must be one of selenium\u2019s expected condition which can be found within the selenium [Python API](https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions) documentation. The expected condition can written as snake_case (ex title_is) or it can be space delimited (ex Title Is). Some conditions require additional arguments or `args` which should be passed along after the expected condition.\n\nFails if the timeout expires before the condition becomes true. The default value is 10 seconds.\n\nExamples:\n\n|                             |                  |           |\n|-----------------------------|------------------|-----------|\n| Wait For Expected Condition | alert_is_present |           |\n| Wait For Expected Condition | Title Is         | New Title |\n\nIf the expected condition expects a locator then one can pass as arguments a tuple containing the selenium locator strategies and the locator.\n\nExample of expected condition expecting locator:\n\n```default\n${byElem}= |  Evaluate  (\"id\",\"added_btn\")\n`Wait For Expected Condition` | Presence Of Element Located | ${byElem}\n```\n\n#### wait_until_element_contains(locator: WebElement | str, text: str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until the element `locator` contains `text`.\n\nFails if `timeout` expires before the text appears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\n#### wait_until_element_does_not_contain(locator: WebElement | str, text: str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until the element `locator` does not contain `text`.\n\nFails if `timeout` expires before the text disappears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\n#### wait_until_element_is_enabled(locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until the element `locator` is enabled.\n\nElement is considered enabled if it is not disabled nor read-only.\n\nFails if `timeout` expires before the element is enabled. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\nConsidering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.\n\n#### wait_until_element_is_not_visible(locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until the element `locator` is not visible.\n\nFails if `timeout` expires before the element is not visible. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\n#### wait_until_element_is_visible(locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until the element `locator` is visible.\n\nFails if `timeout` expires before the element is visible. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\n#### wait_until_location_contains(expected: str, timeout: timedelta | None = None, message: str | None = None)\n\nWaits until the current URL contains `expected`.\n\nThe `expected` argument contains the expected value in url.\n\nFails if `timeout` expires before the location contains. See the Timeouts section for more information about using timeouts and their default value.\n\nThe `message` argument can be used to override the default error message.\n\nNew in SeleniumLibrary 4.0\n\n#### wait_until_location_does_not_contain(location: str, timeout: timedelta | None = None, message: str | None = None)\n\nWaits until the current URL does not contains `location`.\n\nThe `location` argument contains value not expected in url.\n\nFails if `timeout` expires before the location not contains. See the Timeouts section for more information about using timeouts and their default value.\n\nThe `message` argument can be used to override the default error message.\n\nNew in SeleniumLibrary 4.3\n\n#### wait_until_location_is(expected: str, timeout: timedelta | None = None, message: str | None = None)\n\nWaits until the current URL is `expected`.\n\nThe `expected` argument is the expected value in url.\n\nFails if `timeout` expires before the location is. See the Timeouts section for more information about using timeouts and their default value.\n\nThe `message` argument can be used to override the default error message.\n\nNew in SeleniumLibrary 4.0\n\n#### wait_until_location_is_not(location: str, timeout: timedelta | None = None, message: str | None = None)\n\nWaits until the current URL is not `location`.\n\nThe `location` argument is the unexpected value in url.\n\nFails if `timeout` expires before the location is not. See the Timeouts section for more information about using timeouts and their default value.\n\nThe `message` argument can be used to override the default error message.\n\nNew in SeleniumLibrary 4.3\n\n#### wait_until_page_contains(text: str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until `text` appears on the current page.\n\nFails if `timeout` expires before the text appears. See the Timeouts section for more information about using timeouts and their default value.\n\n`error` can be used to override the default error message.\n\n#### wait_until_page_contains_element(locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None, limit: int | None = None)\n\nWaits until the element `locator` appears on the current page.\n\nFails if `timeout` expires before the element appears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is None (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\n`limit` is new in SeleniumLibrary 4.4\n\n#### wait_until_page_does_not_contain(text: str, timeout: timedelta | None = None, error: str | None = None)\n\nWaits until `text` disappears from the current page.\n\nFails if `timeout` expires before the text disappears. See the Timeouts section for more information about using timeouts and their default value.\n\n`error` can be used to override the default error message.\n\n#### wait_until_page_does_not_contain_element(locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None, limit: int | None = None)\n\nWaits until the element `locator` disappears from the current page.\n\nFails if `timeout` expires before the element disappears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax.\n\n`error` can be used to override the default error message.\n\nThe `limit` argument can used to define how many elements the page should not contain. When `limit` is None (default) page can\\`t contain any elements. When limit is a number, page must not contain same number of elements.\n\n`limit` is new in SeleniumLibrary 4.4\n"
  },
  {
    "module": "RPA.Calendar.Calendar",
    "markdown": "# Python API\n\n## Calendar\n\n### *class* RPA.Calendar.Calendar\n\nLibrary for handling different operations for date and time\nhandling especially in business days and holiday contexts.\n\nUtilizing  [pendulum](https://pypi.org/project/pendulum/) and\n[holidays](https://pypi.org/project/holidays/) packages.\n\nLibrary is by default using days from Monday to Friday as business\ndays, but that can be changed by giving list of weekdays to\n`Set Business Days` keyword. A weekday is given as a integer, the\n0 for Sunday and 6 for Saturday.\n\nCommon country holidays are respected when getting next and previous\nbusiness days, but custom holidays can be added into consideration\nusing keyword `Add Custom Holidays` keyword.\n\nSome dates containing for example month names are in English (en), but\nthe locale of the library can be changed with keyword `Set Locale` or\nfor specific keyword if that has a `locale` parameter.\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_custom_holidays(days: str | date | DateTime | List[str | date | DateTime]) \u2192 List\n\nAdd a day or list of days which are considered as holidays\nin addition to country specific holidays when calculating\n\n* **Parameters:**\n  **days** \u2013 string or list of dates to consider as holidays\n* **Returns:**\n  list of current custom holidays\n\nPython example.\n\n```python\nlibrary = Calendar()\ncustom_holidays = library.add_custom_holidays(\"2023-03-08\")\n# custom_holidays == [\"2023-03-08\"]\ncustom_holidays = library.add_custom_holidays([\n    \"2023-03-09\", \"2023-03-10\"\n])\n# custom_holidays == [\"2023-03-08\", \"2023-03-09\", \"2023-03-10\"]\n```\n\nRobot Framework example.\n\n```robotframework\n@{custom_holidays}=   Add Custom Holidays   2023-03-08\n# ${custom_holidays} == [\"2023-03-08\"]\n@{more_holidays}=   Create List   2023-03-09   2023-03-10\n@{custom_holidays}=   Add Custom Holidays   ${more_holidays}\n# ${custom_holidays} == [\"2023-03-08\", \"2023-03-09\", \"2023-03-10\"]\n```\n\n#### compare_times(time1: str | date | DateTime, time2: str | date | DateTime)\n\nCompares given times and returns True if time2\nis more recent than time1.\n\n* **Parameters:**\n  * **time1** \u2013 first time for comparison\n  * **time2** \u2013 second time for comparison\n* **Returns:**\n  True if time2 is more recent than time1\n\nPython example.\n\n```python\nrecent = Calendar().compare_times(\"2023-03-09 13:02\", \"2023-03-09 13:47\")\nif recent:\n    print(\"2023-03-09 13:47 is more recent\")\n```\n\nRobot Framework example.\n\n```robotframework\n${recent}=  Compare Times   2023-03-09 13:02   2023-03-09 13:47\nIF  ${recent}\n    Log  2023-03-09 13:47 is more recent\nEND\n```\n\n#### create_time(date_string: str, date_format_in: str | None = None, timezone: str | None = None, date_format_out: str | None = None) \u2192 DateTime | str\n\nThis keyword tries to construct valid calendar\ninstance from given date string and its expected date\nformat.\n\nSee [https://pendulum.eustace.io/docs/#tokens](https://pendulum.eustace.io/docs/#tokens) for\nvalid tokens for the date format. Tokens are\nused to form correct date and time format.\n\n* **Parameters:**\n  * **date_string** \u2013 for example. \u201c22 May 19\u201d\n  * **date_format_in** \u2013 for example. \u201cDD MMM YY\u201d\n  * **timezone** \u2013 default timezone is \u201cUTC\u201d\n  * **date_format_out** \u2013 for example. \u201cDD-MM-YY\u201d\n* **Returns:**\n  set datetime as an object or string\n  if date_format_out has been set\n\nPython example.\n\n```python\ndate = Calendar().create_time(\n    \"22 May 19\",\n    \"DD MMM YY\"\n)\n```\n\nRobot Framework example.\n\n```robotframework\n${date}=  Create Time\n...  22 May 19\n...  DD MMM YY\n```\n\n#### first_business_day_of_the_month(date: str | date | DateTime, country: str | None = None)\n\nReturn first business day of the month.\n\nIf country is not given then holidays are not considered.\n\n* **Parameters:**\n  * **date** \u2013 date describing the month\n  * **country** \u2013 country code, default None\n* **Returns:**\n  first business of the month\n\nPython example.\n\n```python\nfirst_day = Calendar().first_business_day_of_the_month(\"2024-06-01\")\n# first_day == \"2024-06-03\"\n```\n\nRobot Framework example.\n\n```robotframework\n${first_day}=  First Business Day of the Month  2024-06-01\n# ${first_day} == \"2024-06-03\"\n```\n\n#### get_iso_calendar(date: str | date | DateTime)\n\nGet ISO calendar information for the given date.\n\n* **Parameters:**\n  **date** \u2013 input date\n* **Returns:**\n  ISO calendar object containing year, week number and weekday.\n\nPython example.\n\n```python\niso_cal = Calendar().get_iso_calendar(\"2023-03-09\")\nprint(iso_cal.year)\nprint(iso_cal.week)\nprint(iso_cal.weekday)\n```\n\nRobot Framework example.\n\n```robotframework\n${iso_cal}=  Get ISO Calendar  2023-03-09\n${iso_year}=  Set Variable  ${iso_cal.year}\n${iso_week}=  Set Variable  ${iso_cal.week}\n${iso_weekday}=  Set Variable  ${iso_cal.weekday}\n```\n\n#### is_the_date_business_day(date: str | date | DateTime, country: str | None = None) \u2192 bool\n\nIs the date a business day in a country.\n\nIf country is not given then holidays are not considered.\n\n* **Parameters:**\n  * **date** \u2013 input date\n  * **country** \u2013 country code, default None\n* **Returns:**\n  True if the day is a business day, False if not\n\nPython example.\n\n```python\nfor day in range(1,32):\n    date = f\"2023-1-{day}\"\n    is_business_day = Calendar().is_the_date_business_day(date, \"FI\")\n    if is_business_day:\n        print(f'It is time for the work on {date}')\n    else:\n        print(f'It is time to relax on {date}')\n```\n\nRobot Framework example.\n\n```robotframework\nFOR  ${day}  IN RANGE  1  32\n    ${date}=   Set Variable   2023-1-${day}\n    ${is_business_day}=   Is the date business day  ${date}  FI\n    IF   ${is_business_day}\n        Log To Console   It is time for the work on ${date}\n    ELSE\n        Log To Console   It is time to relax on ${date}\n    END\nEND\n```\n\n#### is_the_date_holiday(date: str | date | DateTime, country: str | None = None)\n\nIs the date a holiday in a country.\nIf country is not given then checks only if date is in custom holiday list.\n\n* **Parameters:**\n  * **date_in** \u2013 input date\n  * **country** \u2013 country code, default None\n* **Returns:**\n  True if the day is a holiday, False if not\n\nPython example.\n\n```python\nis_holiday = Calendar().is_the_date_holiday(\"2022-12-26\", \"FI\")\nif is_holiday:\n    print('Time to relax')\nelse:\n    print('Time for the work')\n```\n\nRobot Framework example.\n\n```robotframework\n${is_holiday}=   Is the date holiday   2022-12-26   FI\nIF   ${is_holiday}\n    Log  Time to relax\nELSE\n    Log  Time for the work\nEND\n```\n\n#### last_business_day_of_the_month(date: str | date | DateTime, country: str | None = None)\n\nReturn last business day of the month.\n\nIf country is not given then holidays are not considered.\n\n* **Parameters:**\n  * **date** \u2013 date describing the month\n  * **country** \u2013 country code, default None\n* **Returns:**\n  last business day of the month\n\nPython example.\n\n```python\nlast_day = Calendar().last_business_day_of_the_month(\"2023-12-01\")\n# last_day == \"2023-12-29\"\n```\n\nRobot Framework example.\n\n```robotframework\n${last_day}=  Last Business Day of the Month  2023-12-01\n# ${last_day} == \"2023-12-29\"\n```\n\n#### reset_business_days() \u2192 None\n\nReset business days back to default Monday-Friday schedule.\n\n#### reset_custom_holidays() \u2192 None\n\nReset custom holiday list into empty list.\n\n#### return_holidays(years: int | List[int], country: str | None = None) \u2192 Dict\n\nReturn holidays for a country. If country is not given\nthen only custom holidays are returned.\n\n* **Parameters:**\n  * **years** \u2013 single year or list of years to list holidays for\n  * **country** \u2013 country code, default None\n* **Returns:**\n  holidays in a dictionary, the key is the date and the\n  value is name of the holiday\n\nPython example.\n\n```python\nholidays = Calendar().return_holidays(2023, \"FI\")\nfor date, holiday_name in holidays.items():\n    print(f\"{date} is {holiday_name}\")\n```\n\nRobot Framework example.\n\n```robotframework\n&{holidays}=  Return Holidays  2023  FI\nFOR  ${date}  IN   @{holidays.keys()}\n    Log To Console   ${date} is ${holidays}[${date}]\nEND\n```\n\n#### return_next_business_day(date: str | date | DateTime, country: str | None = None, return_format: str = 'YYYY-MM-DD', locale: str | None = None)\n\nReturn the next business day.\n\n* **Parameters:**\n  * **date** \u2013 day of origin\n  * **country** \u2013 country code, default None\n  * **return_format** \u2013 dates can be formatted for the resulting\n    list, defaults to \u201cYYYY-MM-DD\u201d\n  * **locale** \u2013 name of the locale\n* **Returns:**\n  the next business day from day of origin\n\nPython example.\n\n```python\nnext_business = Calendar().return_next_business_day(\"2023-01-05\", \"FI\")\n# next_business == \"2023-01-09\"\n```\n\nRobot Framework example.\n\n```robotframework\n${next_business}=  Return Next Business Day  2023-01-05  FI\n# ${next_business} == \"2023-01-09\"\n```\n\n#### return_previous_business_day(date: str | date | DateTime, country: str | None = None, return_format: str = 'YYYY-MM-DD', locale: str | None = None)\n\nReturn the previous business day.\n\n* **Parameters:**\n  * **date** \u2013 day of origin\n  * **country** \u2013 country code, default None\n  * **return_format** \u2013 dates can be formatted for the resulting\n    list, defaults to \u201cYYYY-MM-DD\u201d\n  * **locale** \u2013 name of the locale\n* **Returns:**\n  the previous business day from day of origin\n\nPython example.\n\n```python\nprev_business = Calendar().return_previous_business_day(\"2023-01-09\", \"FI\")\n# prev == \"2023-01-05\"\n```\n\nRobot Framework example.\n\n```robotframework\n${previous_business}=  Return Previous Business Day  2023-01-09  FI\n# ${previous_business} == \"2023-01-05\"\n```\n\n#### set_business_days(days: List[int]) \u2192 List\n\nSet weekdays which are considered as business days\nfor calculating previous and next business day.\n\n* **Parameters:**\n  **days** \u2013 list of integers denoting weekdays\n* **Returns:**\n  previous list of weekdays\n\nPython example.\n\n```python\n# set 4 day work week\nprevious = Calendar().set_business_days([1,2,3,4])\n# previous == [1,2,3,4,5]\n```\n\nRobot Framework example.\n\n```robotframework\n@{4days}=   Create List   1  2  3  4\n@{previous}=    Set Business Days  ${days}\n# ${previous} == [1,2,3,4,5]\n```\n\n#### set_locale(locale_name: str) \u2192 str\n\nSet locale globally for the library\n\n* **Parameters:**\n  **locale_name** \u2013 name of the locale\n* **Returns:**\n  name of the previous locale\n\nPython example.\n\n```python\nlibrary = Calendar()\nlibrary.set_locale(\"es\")\nnow = library.time_now(return_format=\"dddd DD MMMM YYYY\")\n# now == \"jueves 09 marzo 2023\"\nlibrary.set_locale(\"en\")\nnow = library.time_now(return_format=\"dddd DD MMMM YYYY\")\n# now == \"Thursday 09 March 2023\"\n```\n\nRobot Framework example.\n\n```robotframework\nSet Locale   es\n${now}=  Time Now  return_format=dddd DD MMMM YYYY\n# ${now} == \"jueves 09 marzo 2023\"\nSet Locale   en\n${now}=  Time Now  return_format=dddd DD MMMM YYYY\n# ${now} == \"Thursday 09 March 2023\"\n```\n\n#### sort_list_of_dates(dates: List[str | date | DateTime], return_format: str | None = None, reverse: bool = False) \u2192 List\n\nSort list of dates.\n\n* **Parameters:**\n  * **dates** \u2013 list of dates to sort\n  * **return_format** \u2013 dates can be formatted for the resulting\n    list\n  * **reverse** \u2013 True return latest to oldest, defaults to False,\n    which means order from oldest to latest\n* **Returns:**\n  list of sorted dates\n\nPython example.\n\n```python\ndatelist = [\n    \"2023-07-02 12:02:31\",\n    \"2023-07-03 12:02:35\",\n    \"2023-07-03 12:02:31\"\n]\nsorted = Calendar().sort_list_of_dates(datelist)\n# sorted[0] == \"2023-07-03 12:02:35\"\n# sorted[-1] == \"2023-07-02 12:02:31\"\nsorted = Calendar().sort_list_of_dates(datelist, reverse=True)\n# sorted[0] == \"2023-07-02 12:02:31\"\n# sorted[-1] == \"2023-07-03 12:02:35\"\n```\n\nRobot Framework example.\n\n```robotframework\n@{datelist}=  Create List\n...   2023-07-02 12:02:31\n...   2023-07-03 12:02:35\n...   2023-07-03 12:02:31\n${sorted}=  Sort List Of Dates   ${datelist}\n# ${sorted}[0] == \"2023-07-03 12:02:35\"\n# ${sorted}[-1] == \"2023-07-02 12:02:31\"\n${sorted}=  Sort List Of Dates   ${datelist}  reverse=True\n# ${sorted}[0] == \"2023-07-02 12:02:31\"\n# ${sorted}[-1] == \"2023-07-03 12:02:35\"\n```\n\n#### time_difference(start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None) \u2192 Dict\n\nCompare 2 dates and get the time difference.\n\nReturned dictionary contains following properties:\n\n> - end_date_is_later, True if end_date is more recent\n>   than start_date, otherwise False\n> - years, time difference in years\n> - months, time difference in months\n> - days, time difference in days\n> - hours, time difference in hours (in addition to the days)\n> - minutes, time difference in minutes (in addition to the hours)\n> - seconds, time difference in seconds (in addition to the minutes)\n* **Parameters:**\n  * **start_date** \u2013 starting date for the comparison\n  * **end_date** \u2013 ending date for the comparison\n  * **start_timezone** \u2013 timezone for the starting date, defaults to None\n  * **end_timezone** \u2013 timezone for the ending date, defaults to None\n* **Returns:**\n  dictionary containing comparison result\n\nPython example.\n\n```python\ndiff = Calendar().time_difference(\n    \"1975-05-22T18:00:00\",\n    \"1975-05-22T22:45:30\"\n)\n# diff['end_date_is_later'] == True\n# diff['days'] == 0\n# diff['hours'] == 4\n# diff['minutes'] == 45\n# diff['seconds'] == 30\n```\n\nRobot Framework example.\n\n```robotframework\n&{diff}=    Time Difference  1975-05-22T18:00:00  1975-05-22T22:45:30\n# ${diff}[end_date_is_later] == True\n# ${diff}[days] == 0\n# ${diff}[hours] == 4\n# ${diff}[minutes] == 45\n# ${diff}[seconds] == 30\n```\n\n#### time_difference_between_timezones(start_timezone: str, end_timezone: str)\n\nReturn the hour difference between timezones.\n\n* **Parameters:**\n  * **start_timezone** \u2013 first timezone\n  * **end_timezone** \u2013 second timezone\n* **Returns:**\n  hour difference between the timezones\n\nPython example.\n\n```python\ndiff = Calendar().time_difference_between_timezones(\n    \"America/New_York\",\n    \"Europe/Helsinki\"\n)\n# diff == 7\n```\n\nRobot Framework example.\n\n```robotframework\n${diff}=  Time Difference Between Timezones\n...  America/New_York\n...  Europe/Helsinki\n# ${diff} == 7\n```\n\n#### time_difference_in_days(start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None)\n\nReturn the time difference of dates in days.\n\n* **Parameters:**\n  * **start_date** \u2013 the start date\n  * **end_date** \u2013 the end date\n  * **start_timezone** \u2013 timezone for the start date,\n    defaults to None\n  * **end_timezone** \u2013 timezone for the end date,\n    defaults to None\n* **Returns:**\n  difference in days\n\nPython example.\n\n```python\ndiff = Calendar().time_difference_in_days(\n    \"2023-05-21\",\n    \"2023-05-29\"\n)\n# diff == 8\n```\n\nRobot Framework example.\n\n```robotframework\n${diff}=  Time Difference In Days\n...  2023-05-21\n...  2023-05-29\n# ${diff} == 8\n```\n\n#### time_difference_in_hours(start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None)\n\nReturn the time difference of dates in hours.\n\n* **Parameters:**\n  * **start_date** \u2013 the start date\n  * **end_date** \u2013 the end date\n  * **start_timezone** \u2013 timezone for the start date,\n    defaults to None\n  * **end_timezone** \u2013 timezone for the end date,\n    defaults to None\n* **Returns:**\n  difference in hours\n\nPython example.\n\n```python\ndiff = Calendar().time_difference_in_hours(\n    \"2023-08-21T22:00:00\",\n    \"2023-08-22T04:00:00\"\n)\n# diff == 6\n```\n\nRobot Framework example.\n\n```robotframework\n${diff}=  Time Difference In Hours\n...  2023-08-21T22:00:00\n...  2023-08-22T04:00:00\n# ${diff} == 6\n```\n\n#### time_difference_in_minutes(start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None)\n\nReturn the time difference of dates in minutes.\n\n* **Parameters:**\n  * **start_date** \u2013 the start date\n  * **end_date** \u2013 the end date\n  * **start_timezone** \u2013 timezone for the start date,\n    defaults to None\n  * **end_timezone** \u2013 timezone for the end date,\n    defaults to None\n* **Returns:**\n  difference in minutes\n\nPython example.\n\n```python\ndiff = Calendar().time_difference_in_minutes(\n    \"12:30\",\n    \"16:35\"\n)\n# diff == 245\n```\n\nRobot Framework example.\n\n```robotframework\n${diff}=  Time Difference In Minutes\n...  12:30\n...  16:35\n# ${diff} == 245\n```\n\n#### time_difference_in_months(start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None)\n\nReturn time difference of dates in months.\n\n* **Parameters:**\n  * **start_date** \u2013 the start date\n  * **end_date** \u2013 the end date\n  * **start_timezone** \u2013 timezone for the start date,\n    defaults to None\n  * **end_timezone** \u2013 timezone for the end date,\n    defaults to None\n* **Returns:**\n  difference in months\n\nPython example.\n\n```python\ndiff = Calendar().time_difference_in_months(\n    \"2022-05-21T22:00:00\",\n    \"2023-08-21T22:00:00\"\n)\n# diff == 15\n```\n\nRobot Framework example.\n\n```robotframework\n${diff}=  Time Difference In Months\n...  2022-05-21T22:00:00\n...  2023-08-21T22:00:00\n# ${diff} == 15\n```\n\n#### time_now(timezone: str | None = None, return_format: str = 'YYYY-MM-DD') \u2192 DateTime\n\nReturn current date and time\n\n* **Parameters:**\n  * **timezone** \u2013 optional, for example. \u201cAmerica/Boston\u201d\n  * **return_format** \u2013 dates can be formatted for the resulting\n    list, defaults to \u201cYYYY-MM-DD\u201d\n* **Returns:**\n  current datetime as an object\n\nPython example.\n\n```python\nnow = Calendar().time_now(\"Europe/Helsinki\")\n```\n\nRobot Framework example.\n\n```robotframework\n${now}=  Time Now   Europe/Helsinki\n```\n"
  },
  {
    "module": "RPA.Cloud.AWS.AWS",
    "markdown": "# Python API\n\n## AWS\n\n### *class* RPA.Cloud.AWS.AWS(region: str = 'eu-west-1', robocorp_vault_name: str | None = None)\n\nAWS is a library for operating with Amazon AWS services S3, SQS,\nTextract and Comprehend.\n\nServices are initialized with keywords like `Init S3 Client` for S3.\n\n**AWS authentication**\n\nAuthentication for AWS is set with key id and access key which can be given to the library\nin three different ways.\n\n- Method 1 as environment variables, `AWS_KEY_ID` and `AWS_KEY`.\n- Method 2 as keyword parameters to `Init Textract Client` for example.\n- Method 3 as Robocorp vault secret. The vault name needs to be given in library init or\n  with keyword `Set Robocorp Vault`. Secret keys are expected to match environment variable\n  names.\n\n**Note.** Starting from rpaframework-aws **1.0.3** region can be given as environment\nvariable `AWS_REGION` or include as Robocorp Vault secret with the same key name.\n\n**Redshift Data authentication:** Depending on the authorization method, use\none of the following combinations of request parameters, which can only\nbe passed via method 2:\n\n> * Secrets Manager - when connecting to a cluster, specify the Amazon\n>   Resource Name (ARN) of the secret, the database name, and the\n>   cluster identifier that matches the cluster in the secret. When\n>   connecting to a serverless endpoint, specify the Amazon Resource\n>   Name (ARN) of the secret and the database name.\n> * Temporary credentials - when connecting to a cluster, specify the\n>   cluster identifier, the database name, and the database user name.\n>   Also, permission to call the `redshift:GetClusterCredentials`\n>   operation is required. When connecting to a serverless endpoint,\n>   specify the database name.\n\n**Role Assumption:** With the use of the STS service client, you are able\nto assume another role, which will return temporary credentials. The\ntemporary credentials will include an access key and session token, see\nkeyword documentation for `Assume Role` for details of how the\ncredentials are returned. You can use these temporary credentials\nas part of method 2, but you must also include the session token.\n\nMethod 1. credentials using environment variable\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.AWS\n\n*** Tasks ***\nInit AWS services\n    # NO parameters for client, expecting to get credentials\n    # with AWS_KEY, AWS_KEY_ID and AWS_REGION environment variables\n    Init S3 Client\n```\n\nMethod 2. credentials with keyword parameter\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.AWS   region=us-east-1\n\n*** Tasks ***\nInit AWS services\n    Init S3 Client  aws_key_id=${AWS_KEY_ID}  aws_key=${AWS_KEY}\n```\n\nMethod 3. setting Robocorp Vault in the library init\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.AWS  robocorp_vault_name=aws\n\n*** Tasks ***\nInit AWS services\n    Init S3 Client  use_robocorp_vault=${TRUE}\n```\n\nMethod 3. setting Robocorp Vault with keyword\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.AWS\n\n*** Tasks ***\nInit AWS services\n    Set Robocorp Vault     vault_name=aws\n    Init Textract Client    use_robocorp_vault=${TRUE}\n```\n\n**Requirements**\n\nThe default installation depends on [boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) library. Due to the size of the\ndependency, this library is available separate package `rpaframework-aws` but can\nalso be installed as an optional package for `rpaframework`.\n\nRecommended installation is rpaframework-aws plus rpaframework package.\nRemember to check latest versions from [rpaframework Github repository](https://github.com/robocorp/rpaframework).\n\n```yaml\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.7.5\n  - pip=20.1\n  - pip:\n    - rpaframework==13.0.2\n    - rpaframework-aws==1.0.3\n```\n\n**Example**\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.AWS   region=us-east-1\n\n*** Variables ***\n${BUCKET_NAME}        testbucket12213123123\n\n*** Tasks ***\nUpload a file into S3 bucket\n    [Setup]   Init S3 Client\n    Upload File      ${BUCKET_NAME}   ${/}path${/}to${/}file.pdf\n    @{files}         List Files   ${BUCKET_NAME}\n    FOR   ${file}  IN   @{files}\n        Log  ${file}\n    END\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### analyze_document(image_file: str | None = None, json_file: str | None = None, bucket_name: str | None = None, model: bool = False) \u2192 bool\n\nAnalyzes an input document for relationships between detected items\n\n* **Parameters:**\n  * **image_file** \u2013 filepath (or object name) of image file\n  * **json_file** \u2013 filepath to resulting json file\n  * **bucket_name** \u2013 if given then using image_file from the bucket\n  * **model** \u2013 set True to return Textract Document model, default False\n* **Returns:**\n  analysis response in json or TextractDocument model\n\nExample:\n\n```robotframework\n${response}    Analyze Document    ${filename}    model=True\nFOR    ${page}    IN    @{response.pages}\n    Log Many    ${page.tables}\n    Log Many    ${page.form}\n    Log Lines    ${page.lines}\n    Log Many    ${page}\n    Log    ${page}\n    Log    ${page.form}\nEND\n```\n\n#### assume_role(role_arn: str, role_session_name: str, policy_arns: List[Dict] | None = None, policy: str | None = None, duration: int = 900, tags: List[Dict] | None = None, transitive_tag_keys: List[str] | None = None, external_id: str | None = None, serial_number: str | None = None, token_code: str | None = None, source_identity: str | None = None) \u2192 Dict\n\nReturns a set of temporary security credentials that you can\nuse to access Amazon Web Services resources that you might not\nnormally have access to. These temporary credentials consist of\nan access key ID, a secret access key, and a security token.\nTypically, you use `Assume Role` within your account or for\ncross-account access.\n\nThe credentials are returned as a dictionary with data structure\nsimilar to the following JSON:\n\n```json\n{\n    \"Credentials\": {\n        \"AccessKeyId\": \"string\",\n        \"SecretAccessKey\": \"string\",\n        \"SessionToken\": \"string\",\n        \"Expiration\": \"2015-01-01\"\n    },\n    \"AssumedRoleUser\": {\n        \"AssumedRoleId\": \"string\",\n        \"Arn\": \"string\"\n    },\n    \"PackedPolicySize\": 123,\n    \"SourceIdentity\": \"string\"\n}\n```\n\nThese credentials can be used to re-initialize services available\nin this library with the assumed role instead of the original\nrole.\n\n**NOTE**: For detailed information on the available arguments to this\nkeyword, please see the [Boto3 STS documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html).\n\n* **Parameters:**\n  * **role_arn** \u2013 The Amazon Resource Name (ARN) of the role to assume.\n  * **role_session_name** \u2013 An identifier for the assumed role session.\n  * **policy_arns** \u2013 The Amazon Resource Names (ARNs) of the IAM\n    managed policies that you want to use as managed session policies.\n    The policies must exist in the same account as the role.\n  * **policy** \u2013 An IAM policy in JSON format that you want to use\n    as an inline session policy.\n  * **duration** \u2013 The duration, in seconds, of the role session.\n    The value specified can range from 900 seconds (15 minutes\n    and the default) up to the maximum session duration set for\n    the role.\n  * **tags** \u2013 A list of session tags that you want to pass. Each\n    session tag consists of a key name and an associated value.\n  * **transitive_tag_keys** \u2013 A list of keys for session tags that\n    you want to set as transitive. If you set a tag key as\n    transitive, the corresponding key and value passes to\n    subsequent sessions in a role chain.\n  * **external_id** \u2013 A unique identifier that might be required\n    when you assume a role in another account. If the\n    administrator of the account to which the role belongs\n    provided you with an external ID, then provide that value in\n    this parameter.\n  * **serial_number** \u2013 The identification number of the MFA device\n    that is associated with the user who is making the\n    using the `assume_role` keyword.\n  * **token_code** \u2013 The value provided by the MFA device, if the\n    trust policy of the role being assumed requires MFA.\n  * **source_identity** \u2013 The source identity specified by the\n    principal that is using the `assume_role` keyword.\n\n#### clients *: dict* *= {}*\n\n#### convert_textract_response_to_model(response)\n\nConvert AWS Textract JSON response into TextractDocument object,\nwhich has following structure:\n\n> - Document\n> - Page\n> - Tables\n> - Rows\n> - Cells\n> - Lines\n> - Words\n> - Form\n> - Field\n* **Parameters:**\n  **response** \u2013 JSON response from AWS Textract service\n* **Returns:**\n  TextractDocument object\n\nExample:\n\n```robotframework\n${response}    Analyze Document    ${filename}\n${model}=    Convert Textract Response To Model    ${response}\nFOR    ${page}    IN    @{model.pages}\n    Log Many    ${page.tables}\n    Log Many    ${page.form}\n    Log Lines    ${page.lines}\n    Log Many    ${page}\n    Log    ${page}\n    Log    ${page.form}\nEND\n```\n\n#### create_bucket(bucket_name: str | None = None, \\*\\*kwargs) \u2192 bool\n\nCreate S3 bucket with name\n\n**note** This keyword accepts additional parameters in key=value format\n\nMore info on [additional parameters](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.create_bucket/).\n\n* **Parameters:**\n  **bucket_name** \u2013 name for the bucket\n* **Returns:**\n  boolean indicating status of operation\n\nRobot Framework example:\n\n```robotframework\nCreate Bucket  public-bucket   ACL=public-read-write\n```\n\n#### create_queue(queue_name: str | None = None)\n\nCreate queue with name\n\n* **Parameters:**\n  **queue_name** \u2013 [description], defaults to None\n* **Returns:**\n  create queue response as dict\n\n#### create_redshift_statement_parameters(\\*\\*params) \u2192 List[Dict[str, str]]\n\nReturns a formatted dictionary to be used in\nRedshift Data Api SQL statements.\n\n**Example:**\n\nAssume the `${SQL}` statement has the parameters `:id` and\n`:name`:\n\n```robotframework\n*** Tasks ***\n\n${params}=    Create sql parameters    id=123    name=Nokia\n# params produces a data structure like so:\n#   [\n#        {\"name\":\"id\", \"value\":\"123\"},\n#        {\"name\":\"name\", \"value\":\"Nokia\"}\n#    ]\n\n# Which can be used for the 'parameters' argument.\n${response}=    Execute redshift statement    ${SQL}    ${params}\n```\n\n#### delete_bucket(bucket_name: str | None = None) \u2192 bool\n\nDelete S3 bucket with name\n\n* **Parameters:**\n  **bucket_name** \u2013 name for the bucket\n* **Returns:**\n  boolean indicating status of operation\n\n#### delete_files(bucket_name: str | None = None, files: list | None = None, \\*\\*kwargs)\n\nDelete files in the bucket\n\n**note** This keyword accepts additional parameters in key=value format\n\nMore info on [additional parameters](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.delete_objects/).\n\n* **Parameters:**\n  * **bucket_name** \u2013 name for the bucket\n  * **files** \u2013 list of files to delete\n* **Returns:**\n  number of files deleted or False\n\n#### delete_message(receipt_handle: str | None = None)\n\nDelete message in the queue\n\n* **Parameters:**\n  **receipt_handle** \u2013 message handle to delete\n* **Returns:**\n  delete message response as dict\n\n#### delete_queue(queue_name: str | None = None)\n\nDelete queue with name\n\n* **Parameters:**\n  **queue_name** \u2013 [description], defaults to None\n* **Returns:**\n  delete queue response as dict\n\n#### describe_redshift_table(database: str, schema: str | None = None, table: str | None = None) \u2192 Dict | List[Dict]\n\nDescribes the detailed information about a table from metadata\nin the cluster. The information includes its columns.\n\nIf `schema` and/or `table` is not provided, the API searches\nall schemas for the provided table, or returns all tables in the\nschema or entire database.\n\nThe response object is provided as a list of table meta data objects,\nutilize dot-notation or the `RPA.JSON` library to access members:\n\n```json\n{\n    \"ColumnList\": [\n        {\n            \"columnDefault\": \"string\",\n            \"isCaseSensitive\": true,\n            \"isCurrency\": false,\n            \"isSigned\": false,\n            \"label\": \"string\",\n            \"length\": 123,\n            \"name\": \"string\",\n            \"nullable\": 123,\n            \"precision\": 123,\n            \"scale\": 123,\n            \"schemaName\": \"string\",\n            \"tableName\": \"string\",\n            \"typeName\": \"string\"\n        },\n    ],\n    \"TableName\": \"string\"\n}\n```\n\n* **Parameters:**\n  * **database** \u2013 The name of the database that contains the tables\n    to be described. If ommitted, will use the connected Database.\n  * **schema** \u2013 The schema that contains the table. If no schema\n    is specified, then matching tables for all schemas are returned.\n  * **table** \u2013 The table name. If no table is specified, then all\n    tables for all matching schemas are returned. If no table and\n    no schema is specified, then all tables for all schemas in the\n    database are returned\n\n#### detect_document_text(image_file: str | None = None, json_file: str | None = None, bucket_name: str | None = None) \u2192 bool\n\nDetects text in the input document.\n\n* **Parameters:**\n  * **image_file** \u2013 filepath (or object name) of image file\n  * **json_file** \u2013 filepath to resulting json file\n  * **bucket_name** \u2013 if given then using image_file from the bucket\n* **Returns:**\n  analysis response in json\n\n#### detect_entities(text: str | None = None, lang='en') \u2192 dict\n\nInspects text for named entities, and returns information about them\n\n* **Parameters:**\n  * **text** \u2013 A UTF-8 text string. Each string must contain fewer\n    that 5,000 bytes of UTF-8 encoded characters\n  * **lang** \u2013 language code of the text, defaults to \u201cen\u201d\n\n#### detect_sentiment(text: str | None = None, lang='en') \u2192 dict\n\nInspects text and returns an inference of the prevailing sentiment\n\n* **Parameters:**\n  * **text** \u2013 A UTF-8 text string. Each string must contain fewer\n    that 5,000 bytes of UTF-8 encoded characters\n  * **lang** \u2013 language code of the text, defaults to \u201cen\u201d\n\n#### download_files(bucket_name: str | None = None, files: list | None = None, target_directory: str | None = None, \\*\\*kwargs) \u2192 list\n\nDownload files from bucket to local filesystem\n\n**note** This keyword accepts additional parameters in key=value format.\n\nMore info on [additional parameters](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.download_file/).\n\n* **Parameters:**\n  * **bucket_name** \u2013 name for the bucket\n  * **files** \u2013 list of S3 object names\n  * **target_directory** \u2013 location for the downloaded files, default\n    current directory\n* **Returns:**\n  number of files downloaded\n\n#### execute_redshift_statement(sql: str, parameters: list | None = None, statement_name: str | None = None, with_event: bool = False, timeout: int = 40) \u2192 Table | str\n\nRuns an SQL statement, which can be data manipulation language\n(DML) or data definition language (DDL). This statement must be a\nsingle SQL statement.\n\nSQL statements can be parameterized with named parameters through\nthe use of the `parameters` argument. Parameters must be dictionaries\nwith the following two keys:\n\n* `name`: The name of the parameter. In the SQL statement this\n  will be referenced as `:name`.\n* `value`: The value of the parameter. Amazon Redshift implicitly\n  converts to the proper data type. For more information, see\n  [Data types](https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html) in the Amazon Redshift Database Developer Guide.\n\nFor simplicity, a helper keyword, \\`Create redshift statement parameters\\`,\nis available and can be used more naturally in Robot Framework contexts.\n\nIf tabular data is returned, this keyword tries to return it as\na table (see `RPA.Tables`), if `RPA.Tables` is not available\nin the keyword\u2019s scope, the data will be returned as a list of dictionaries.\nOther types of data (SQL errors and result statements) are returned\nas strings.\n\n**NOTE:** You may modify the max built-in wait time by providing\na timeout in seconds (default 40 seconds)\n\n**Robot framework example:**\n\n```robotframework\n*** Tasks ***\n\n    ${SQL}=    Set variable    insert into mytable values (:id, :address)\n    ${params}=    Create redshift statement parameters\n    ...    id=1\n    ...    address=Seattle\n    ${response}=    Execute redshift statement    ${SQL}    ${params}\n    Log    ${response}\n```\n\n**Python example:**\n\n```python\nsql = \"insert into mytable values (:id, :address)\"\nparameters = [\n    {\"name\": \"id\", \"value\": \"1\"},\n    {\"name\": \"address\", \"value\": \"Seattle\"},\n]\nresponse = aws.execute_redshift_statement(sql, parameters)\nprint(response)\n```\n\n* **Parameters:**\n  * **parameters** \u2013 The parameters for the SQL statement. Must consist\n    of a list of dictionaries with two keys: `name` and `value`.\n  * **sql** \u2013 The SQL statement text to run.\n  * **statement_name** \u2013 The name of the SQL statement. You can name\n    the SQL statement when you create it to identify the query.\n  * **with_event** \u2013 A value that indicates whether to send an event\n    to the Amazon EventBridge event bus after the SQL statement runs.\n  * **timeout** \u2013 Used to calculate the maximum wait. Exact timing\n    depends on system variability becuase the underlying waiter\n    does not utilize a timeout directly.\n\n#### execute_redshift_statement_asyncronously(sql: str, parameters: list | None = None, statement_name: str | None = None, with_event: bool = False) \u2192 str\n\nSubmit a sql statement for Redshift to execute asyncronously.\nReturns the statement ID which can be used to retrieve statement\nresults later.\n\n* **Parameters:**\n  * **parameters** \u2013 The parameters for the SQL statement. Must consist\n    of a list of dictionaries with two keys: `name` and `value`.\n  * **sql** \u2013 The SQL statement text to run.\n  * **statement_name** \u2013 The name of the SQL statement. You can name\n    the SQL statement when you create it to identify the query.\n  * **with_event** \u2013 A value that indicates whether to send an event\n    to the Amazon EventBridge event bus after the SQL statement runs.\n\n#### generate_presigned_url(bucket_name: str, object_name: str, expires_in: int | None = None, \\*\\*extra_params) \u2192 tuple\n\nGenerate presigned URL for the file.\n\n* **Parameters:**\n  * **bucket_name** \u2013 name for the bucket\n  * **object_name** \u2013 name of the file in the bucket\n  * **expires_in** \u2013 optional expiration time for the url (in seconds).\n    The default expiration time is 3600 seconds (one hour).\n  * **extra_params** \u2013 allows setting any extra Params\n* **Returns:**\n  URL for accessing the file\n\n#### get_cells()\n\nGet parsed cells from the response\n\n* **Returns:**\n  cells\n\n#### get_document_analysis(job_id: str | None = None, max_results: int = 1000, next_token: str | None = None, collect_all_results: bool = False) \u2192 dict\n\nGet the results of Textract asynchronous Document Analysis operation\n\n* **Parameters:**\n  * **job_id** \u2013 job identifier, defaults to None\n  * **max_results** \u2013 number of blocks to get at a time, defaults to 1000\n  * **next_token** \u2013 pagination token for getting next set of results,\n    defaults to None\n  * **collect_all_results** \u2013 when set to True will wait until analysis is\n    complete and returns all blocks of the analysis result, by default (False)\n    the all blocks need to be specifically collected using next_token variable\n* **Returns:**\n  dictionary\n\nResponse dictionary has key JobStatus with value SUCCEEDED when analysis\nhas been completed.\n\nExample:\n\n```robotframework\nInit Textract Client  %{AWS_KEY_ID}  %{AWS_KEY_SECRET}  %{AWS_REGION}\n${jobid}=    Start Document Analysis  s3bucket_name  invoice.pdf\n# Wait for job completion and collect all blocks\n${response}=    Get Document Analysis  ${jobid}  collect_all_results=True\n# Model will contain all pages of the invoice.pdf\n${model}=    Convert Textract Response To Model    ${response}\n```\n\n#### get_document_text_detection(job_id: str | None = None, max_results: int = 1000, next_token: str | None = None, collect_all_results: bool = False) \u2192 dict\n\nGet the results of Textract asynchronous Document Text Detection operation\n\n* **Parameters:**\n  * **job_id** \u2013 job identifier, defaults to None\n  * **max_results** \u2013 number of blocks to get at a time, defaults to 1000\n  * **next_token** \u2013 pagination token for getting next set of results,\n    defaults to None\n  * **collect_all_results** \u2013 when set to True will wait until analysis is\n    complete and returns all blocks of the analysis result, by default (False)\n    the all blocks need to be specifically collected using next_token variable\n* **Returns:**\n  dictionary\n\nResponse dictionary has key JobStatus with value SUCCEEDED when analysis\nhas been completed.\n\nExample:\n\n```robotframework\nInit Textract Client  %{AWS_KEY_ID}  %{AWS_KEY_SECRET}  %{AWS_REGION}\n${jobid}=    Start Document Text Detection  s3bucket_name  invoice.pdf\n# Wait for job completion and collect all blocks\n${response}=   Get Document Text Detection    ${jobid}  collect_all_results=True\n# Model will contain all pages of the invoice.pdf\n${model}=    Convert Textract Response To Model    ${response}\n```\n\n#### get_pages_and_text(textract_response: dict) \u2192 dict\n\nGet pages and text out of Textract response json\n\n* **Parameters:**\n  **textract_response** \u2013 JSON from Textract\n* **Returns:**\n  dictionary, page numbers as keys and value is a list\n  of text lines\n\n#### get_redshift_statement_results(statement_id: str, timeout: int = 40) \u2192 Table | int\n\nRetrieve the results of a SQL statement previously submitted\nto Redshift. If that statement has not yet completed, this keyword\nwill wait for results. See \\`Execute Redshift Statement\\` for\nadditional information.\n\nIf the statement has tabular results, this keyword returns them\nas a table from `RPA.Tables` if that library is available, or\nas a list of dictionaries if not. If the statement does not have\ntabular results, it will return the number of rows affected.\n\n* **Parameters:**\n  * **statement_id** \u2013 The statement id to use to retreive results.\n  * **timeout** \u2013 An integer used to calculate the maximum wait.\n    Exact timing depends on system variability becuase the\n    underlying waiter does not utilize a timeout directly.\n    Defaults to 40.\n\n#### get_tables()\n\nGet parsed tables from the response\n\nReturns RPA.Tables.Table if possible otherwise returns an dictionary.\n\n* **Returns:**\n  tables\n\n#### get_words()\n\nGet parsed words from the response\n\n* **Returns:**\n  words\n\n#### init_comprehend_client(aws_key_id: str | None = None, aws_key: str | None = None, region: str | None = None, use_robocorp_vault: bool = False, session_token: str | None = None)\n\nInitialize AWS Comprehend client\n\n* **Parameters:**\n  * **aws_key_id** \u2013 access key ID\n  * **aws_key** \u2013 secret access key\n  * **region** \u2013 AWS region\n  * **use_robocorp_vault** \u2013 use secret stored in Robocorp Vault\n  * **session_token** \u2013 a session token associated with temporary\n    credentials, such as from `Assume Role`.\n\n#### init_redshift_data_client(aws_key_id: str | None = None, aws_key: str | None = None, region: str | None = None, cluster_identifier: str | None = None, database: str | None = None, database_user: str | None = None, secret_arn: str | None = None, use_robocorp_vault: bool = False, session_token: str | None = None) \u2192 None\n\nInitialize AWS Redshift Data API client\n\n* **Parameters:**\n  * **aws_key_id** \u2013 access key ID\n  * **aws_key** \u2013 secret access key\n  * **region** \u2013 AWS region\n  * **cluster_identifier** \u2013 The cluster identifier. This parameter\n    is required when connecting to a cluster and authenticating\n    using either Secrets Manager or temporary credentials.\n  * **database** \u2013 The name of the database. This parameter is required\n    when authenticating using either Secrets Manager or temporary\n    credentials.\n  * **database_user** \u2013 The database user name. This parameter is\n    required when connecting to a cluster and authenticating using\n    temporary credentials.\n  * **secret_arn** \u2013 The name or ARN of the secret that enables access\n    to the database. This parameter is required when authenticating\n    using Secrets Manager.\n  * **use_robocorp_vault** \u2013 use secret stored in `Robocorp Vault`\n  * **session_token** \u2013 a session token associated with temporary\n    credentials, such as from `Assume Role`.\n\n#### init_s3_client(aws_key_id: str | None = None, aws_key: str | None = None, region: str | None = None, use_robocorp_vault: bool = False, session_token: str | None = None) \u2192 None\n\nInitialize AWS S3 client\n\n* **Parameters:**\n  * **aws_key_id** \u2013 access key ID\n  * **aws_key** \u2013 secret access key\n  * **region** \u2013 AWS region\n  * **use_robocorp_vault** \u2013 use secret stored in Robocorp Vault\n  * **session_token** \u2013 a session token associated with temporary\n    credentials, such as from `Assume Role`.\n\n#### init_sqs_client(aws_key_id: str | None = None, aws_key: str | None = None, region: str | None = None, queue_url: str | None = None, use_robocorp_vault: bool = False, session_token: str | None = None)\n\nInitialize AWS SQS client\n\n* **Parameters:**\n  * **aws_key_id** \u2013 access key ID\n  * **aws_key** \u2013 secret access key\n  * **region** \u2013 AWS region\n  * **queue_url** \u2013 SQS queue url\n  * **use_robocorp_vault** \u2013 use secret stored into Robocorp Vault\n  * **session_token** \u2013 a session token associated with temporary\n    credentials, such as from `Assume Role`.\n\n#### init_sts_client(aws_key_id: str | None = None, aws_key: str | None = None, region: str | None = None, use_robocorp_vault: bool = False, session_token: str | None = None) \u2192 None\n\nInitialize AWS STS client.\n\n* **Parameters:**\n  * **aws_key_id** \u2013 access key ID\n  * **aws_key** \u2013 secret access key\n  * **region** \u2013 AWS region\n  * **use_robocorp_vault** \u2013 use secret stored in Robocorp Vault\n  * **session_token** \u2013 a session token associated with temporary\n    credentials, such as from `Assume Role`.\n\n#### init_textract_client(aws_key_id: str | None = None, aws_key: str | None = None, region: str | None = None, use_robocorp_vault: bool = False, session_token: str | None = None)\n\nInitialize AWS Textract client\n\n* **Parameters:**\n  * **aws_key_id** \u2013 access key ID\n  * **aws_key** \u2013 secret access key\n  * **region** \u2013 AWS region\n  * **use_robocorp_vault** \u2013 use secret stored in Robocorp Vault\n  * **session_token** \u2013 a session token associated with temporary\n    credentials, such as from `Assume Role`.\n\n#### list_buckets() \u2192 list\n\nList all buckets for this account\n\n* **Returns:**\n  list of buckets\n\n#### list_files(bucket_name: str, limit: int | None = None, search: str | None = None, prefix: str | None = None, \\*\\*kwargs) \u2192 list\n\nList files in the bucket\n\n**note** This keyword accepts additional parameters in key=value format\n\nMore info on [additional parameters](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.list_objects_v2/).\n\n* **Parameters:**\n  * **bucket_name** \u2013 name for the bucket\n  * **limit** \u2013 limits the response to maximum number of items\n  * **search** \u2013 [JMESPATH](https://jmespath.org/) expression to filter\n    objects\n  * **prefix** \u2013 limits the response to keys that begin with the\n    specified prefix\n  * **kwargs** \u2013 allows setting all extra parameters for\n    list_objects_v2 method\n* **Returns:**\n  list of files\n\n**Python examples**\n\n```python\n# List all files in a bucket\nfiles = AWSlibrary.list_files(\"bucket_name\")\n\n# List files in a bucket matching `.yaml`\nfiles = AWSlibrary.list_files(\n    \"bucket_name\", search=\"Contents[?contains(Key, '.yaml')]\"\n)\n\n# List files in a bucket matching `.png` and limit results to max 3\nfiles = AWSlibrary.list_files(\n    \"bucket_name\", limit=3, search=\"Contents[?contains(Key, '.png')]\"\n)\n\n# List files in a bucket prefixed with `special` and get only 1\nfiles = AWSlibrary.list_files(\n    \"bucket_name\", prefix=\"special\", limit=1\n)\n```\n\n**Robot Framework examples**\n\n```robotframework\n# List all files in a bucket\n@{files}=   List Files   bucket-name\n\n# List files in a bucket matching `.yaml`\n@{files}=   List Files\n...    bucket-name\n...    search=Contents[?contains(Key, '.yaml')]\n\n# List files in a bucket matching `.png` and limit results to max 3\n@{files}=  List Files\n...   bucket-name\n...   limit=3\n...   search=Contents[?contains(Key, '.png')]\n\n# List files in a bucket prefixed with `special` and get only 1\n@{files}=   List Files\n...   bucket-name\n...   prefix=special\n...   limit=1\n)\n```\n\n#### list_redshift_databases() \u2192 List[str]\n\nList the databases in a cluster.\n\nDatabase names are returned as a list of strings.\n\n#### list_redshift_schemas(database: str | None = None, schema_pattern: str | None = None) \u2192 List[Dict]\n\nLists the schemas in a database.\n\nSchema names are returned as a list of strings.\n\n* **Parameters:**\n  * **database** \u2013 The name of the database that contains the schemas\n    to list. If ommitted, will use the connected Database.\n  * **schema_pattern** \u2013 A pattern to filter results by schema name.\n    Within a schema pattern, \u201c%\u201d means match any substring of 0\n    or more characters and \u201c_\u201d means match any one character.\n    Only schema name entries matching the search pattern are returned.\n    If `schema_pattern` is not specified, then all schemas are returned.\n\n#### list_redshift_tables(database: str | None = None, schema_pattern: str | None = None, table_pattern: str | None = None) \u2192 List[Dict]\n\nList the tables in a database. If neither `schema_pattern` nor\n`table_pattern` are specified, then all tables in the database\nare returned.\n\nReturned objects are structured like the below JSON in a list:\n\n```json\n{\n    \"name\": \"string\",\n    \"schema\": \"string\",\n    \"type\": \"string\"\n}\n```\n\n* **Parameters:**\n  * **database** \u2013 The name of the database that contains the tables\n    to be described. If ommitted, will use the connected Database.\n  * **schema_pattern** \u2013 A pattern to filter results by schema name.\n    Within a schema pattern, \u201c%\u201d means match any substring of 0\n    or more characters and \u201c_\u201d means match any one character.\n    Only schema name entries matching the search pattern are returned.\n    If `schema_pattern` is not specified, then all tables that match\n    `table_pattern` are returned. If neither `schema_pattern`\n    or `table_pattern` are specified, then all tables are returned.\n  * **table_pattern** \u2013 A pattern to filter results by table name.\n    Within a table pattern, \u201c%\u201d means match any substring of 0 or\n    more characters and \u201c_\u201d means match any one character. Only\n    table name entries matching the search pattern are returned.\n    If `table_pattern` is not specified, then all tables that\n    match `schema_pattern` are returned. If neither `schema_pattern` or\n    `table_pattern` are specified, then all tables are returned.\n\n#### logger *= None*\n\n#### receive_message() \u2192 dict\n\nReceive message from queue\n\n* **Returns:**\n  message as dict\n\n#### region *: str | None* *= None*\n\n#### robocorp_vault_name *: str | None* *= None*\n\n#### send_message(message: str | None = None, message_attributes: dict | None = None) \u2192 dict\n\nSend message to the queue\n\n* **Parameters:**\n  * **message** \u2013 body of the message\n  * **message_attributes** \u2013 attributes of the message\n* **Returns:**\n  send message response as dict\n\n#### services *: list* *= []*\n\n#### set_robocorp_vault(vault_name)\n\nSet Robocorp Vault name\n\n* **Parameters:**\n  **vault_name** \u2013 Robocorp Vault name\n\n#### start_document_analysis(bucket_name_in: str | None = None, object_name_in: str | None = None, object_version_in: str | None = None, bucket_name_out: str | None = None, prefix_object_out: str = 'textract_output')\n\nStarts the asynchronous analysis of an input document\nfor relationships between detected items such as key-value pairs,\ntables, and selection elements.\n\n* **Parameters:**\n  * **bucket_name_in** \u2013 name of the S3 bucket for the input object,\n    defaults to None\n  * **object_name_in** \u2013 name of the input object, defaults to None\n  * **object_version_in** \u2013 version of the input object, defaults to None\n  * **bucket_name_out** \u2013 name of the S3 bucket where to save analysis result\n    object, defaults to None\n  * **prefix_object_out** \u2013 name of the S3 bucket for the analysis result object,\n* **Returns:**\n  job identifier\n\nInput object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.\n\nBy default Amazon Textract will save the analysis result internally\nto be accessed by keyword `Get Document Analysis`. This can\nbe overridden by giving parameter `bucket_name_out`.\n\n#### start_document_text_detection(bucket_name_in: str | None = None, object_name_in: str | None = None, object_version_in: str | None = None, bucket_name_out: str | None = None, prefix_object_out: str = 'textract_output')\n\nStarts the asynchronous detection of text in a document.\nAmazon Textract can detect lines of text and the words that make up a\nline of text.\n\n* **Parameters:**\n  * **bucket_name_in** \u2013 name of the S3 bucket for the input object,\n    defaults to None\n  * **object_name_in** \u2013 name of the input object, defaults to None\n  * **object_version_in** \u2013 version of the input object, defaults to None\n  * **bucket_name_out** \u2013 name of the S3 bucket where to save analysis result\n    object, defaults to None\n  * **prefix_object_out** \u2013 name of the S3 bucket for the analysis result object,\n* **Returns:**\n  job identifier\n\nInput object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.\n\nBy default Amazon Textract will save the analysis result internally\nto be accessed by keyword `Get Document Text Detection`. This can\nbe overridden by giving parameter `bucket_name_out`.\n\n#### upload_file(bucket_name: str | None = None, filename: str | None = None, object_name: str | None = None, \\*\\*kwargs) \u2192 tuple\n\nUpload single file into bucket\n\n* **Parameters:**\n  * **bucket_name** \u2013 name for the bucket\n  * **filename** \u2013 filepath for the file to be uploaded\n  * **object_name** \u2013 name of the object in the bucket, defaults to None\n* **Returns:**\n  tuple of upload status and error\n\nIf object_name is not given then basename of the file is\nused as object_name.\n\n**note** This keyword accepts additional parameters in key=value format (see below code example).\n\nMore info on [additional parameters](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file/).\n\nRobot Framework example:\n\n```robotframework\n&{extras}=    Evaluate    {'ContentType': 'image/png'}\n${uploaded}    ${error}=    Upload File\n...    mybucket\n...    ${CURDIR}${/}image.png\n...    image.png\n...    ExtraArgs=${extras}\n```\n\n#### upload_files(bucket_name: str | None = None, files: list | None = None, \\*\\*kwargs) \u2192 list\n\nUpload multiple files into bucket\n\n* **Parameters:**\n  * **bucket_name** \u2013 name for the bucket\n  * **files** \u2013 list of files (2 possible ways, see above)\n* **Returns:**\n  number of files uploaded\n\nGiving files as list of filepaths:\n: [\u2018/path/to/file1.txt\u2019, \u2018/path/to/file2.txt\u2019]\n\nGiving files as list of dictionaries (including filepath and object name):\n: [{\u2018filename\u2019:\u2019/path/to/file1.txt\u2019, \u2018object_name\u2019: \u2018file1.txt\u2019},\n  {\u2018filename\u2019: \u2018/path/to/file2.txt\u2019, \u2018object_name\u2019: \u2018file2.txt\u2019}]\n\n**note** This keyword accepts additional parameters in key=value format (see below code example).\n\nMore info on [additional parameters](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file/).\n\nPython example (passing ExtraArgs):\n\n```python\nupload_files = [\n    {\n        \"filename\": \"./image.png\",\n        \"object_name\": \"image.png\",\n        \"ExtraArgs\": {\"ContentType\": \"image/png\", \"Metadata\": {\"importance\": \"1\"}},\n    },\n    {\n        \"filename\": \"./doc.pdf\",\n        \"object_name\": \"doc.pdf\",\n        \"ExtraArgs\": {\"ContentType\": \"application/pdf\"},\n    },\n]\nawslibrary.upload_files(\"mybucket\", files=upload_files)\n```\n"
  },
  {
    "module": "RPA.Cloud.Azure.Azure",
    "markdown": "# Python API\n\n## Azure\n\n### *class* RPA.Cloud.Azure.Azure(region: str = 'northeurope', robocorp_vault_name: str | None = None)\n\nAzure is a library for operating with Microsoft Azure API endpoints.\n\nList of supported service names:\n\n- computervision ([Azure Computer Vision API](https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/))\n- face ([Azure Face API](https://docs.microsoft.com/en-us/azure/cognitive-services/face/))\n- speech ([Azure Speech Services API](https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/))\n- textanalytics ([Azure Text Analytics API](https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/))\n\n**Azure authentication**\n\nAuthentication for Azure is set with service subscription key which can be given to the library\nin two different ways.\n\n- Method 1 as environment variables, either service specific environment variable\n  for example `AZURE_TEXTANALYTICS_KEY` or with common key `AZURE_SUBSCRIPTION_KEY` which\n  will be used for all the services.\n- Method 2 as Robocorp Vault secret. The vault name needs to be given in library init or\n  with keyword `Set Robocorp Vault`. Secret keys are expected to match environment variable\n  names.\n\nMethod 1. subscription key using environment variable\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.Azure\n\n*** Tasks ***\nInit Azure services\n    # NO parameters for client, expecting to get subscription key\n    # with AZURE_TEXTANALYTICS_KEY or AZURE_SUBSCRIPTION_KEY environment variable\n    Init Text Analytics Service\n```\n\nMethod 2. setting Robocorp Vault in the library init\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.Azure  robocorp_vault_name=azure\n\n*** Tasks ***\nInit Azure services\n    Init Text Analytics Service  use_robocorp_vault=${TRUE}\n```\n\nMethod 2. setting Robocorp Vault with keyword\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.Azure\n\n*** Tasks ***\nInit Azure services\n    Set Robocorp Vault          vault_name=googlecloud\n    Init Text Analytics Service  use_robocorp_vault=${TRUE}\n```\n\n**References**\n\nList of supported language locales - [Azure locale list](https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/language-support#speech-to-text)\n\nList of supported region identifiers - [Azure region list](https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/regions#speech-to-text-text-to-speech-and-translation)\n\n**Examples**\n\n**Robot Framework**\n\nThis is a section which describes how to use the library in your\nRobot Framework tasks.\n\n```robotframework\n*** Settings ***\nLibrary  RPA.Cloud.Azure\n\n*** Variables ***\n${IMAGE_URL}   IMAGE_URL\n${FEATURES}    Faces,ImageType\n\n*** Tasks ***\nVisioning image information\n   Init Computer Vision Service\n   &{result}   Vision Analyze  image_url=${IMAGE_URL}  visual_features=${FEATURES}\n   @{faces}    Set Variable  ${result}[faces]\n   FOR  ${face}  IN   @{faces}\n      Log  Age: ${face}[age], Gender: ${face}[gender], Rectangle: ${face}[faceRectangle]\n   END\n```\n\n**Python**\n\nThis is a section which describes how to use the library in your\nown Python modules.\n\n```python\nlibrary = Azure()\nlibrary.init_text_analytics_service()\nlibrary.init_face_service()\nlibrary.init_computer_vision_service()\nlibrary.init_speech_service(\"westeurope\")\n\nresponse = library.sentiment_analyze(\n   text=\"The rooms were wonderful and the staff was helpful.\"\n)\nresponse = library.detect_face(\n   image_file=PATH_TO_FILE,\n   face_attributes=\"age,gender,smile,hair,facialHair,emotion\",\n)\nfor item in response:\n   gender = item[\"faceAttributes\"][\"gender\"]\n   age = item[\"faceAttributes\"][\"age\"]\n   print(f\"Detected a face, gender:{gender}, age: {age}\")\n\nresponse = library.vision_analyze(\n   image_url=URL_TO_IMAGE,\n   visual_features=\"Faces,ImageType\",\n)\nmeta = response['metadata']\nprint(\n   f\"Image dimensions meta['width']}x{meta['height']} pixels\"\n)\n\nfor face in response[\"faces\"]:\n   left = face[\"faceRectangle\"][\"left\"]\n   top = face[\"faceRectangle\"][\"top\"]\n   width = face[\"faceRectangle\"][\"width\"]\n   height = face[\"faceRectangle\"][\"height\"]\n   print(f\"Detected a face, gender:{face['gender']}, age: {face['age']}\")\n   print(f\"      Face rectangle: (left={left}, top={top})\")\n   print(f\"      Face rectangle: (width={width}, height={height})\")\n\nlibrary.text_to_speech(\n    text=\"Developer tools for open-source RPA leveraging the Robot Framework ecosystem\",\n    neural_voice_style=\"cheerful\",\n    target_file='output.mp3'\n)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n"
  },
  {
    "module": "RPA.Cloud.Google.Google",
    "markdown": "# Python API\n\n## Google\n\n### *class* RPA.Cloud.Google.Google(service_account: str | None = None, vault_name: str | None = None, vault_secret_key: str | None = None, cloud_auth_type: str = 'serviceaccount')\n\nGoogle is a library for operating with Google API endpoints.\n\n**Installation**\n\nUsage requires the following steps:\n\n- Create a GCP project\n- Enable approriate APIs\n- Create credentials (OAuth or service account)\n- Install `rpaframework-google` package\n\nCheck the latest package version from [PyPI](https://pypi.org/project/rpaframework-google/).\n\n**Google authentication**\n\nAuthentication for Google is set with service account JSON file which can be given to the library\nin three different ways or with OAuth2 token, which is used for OAuth authentication.\n\nSee [library authentication examples](https://github.com/robocorp/rpaframework/blob/master/packages/google/docs/authentication.md) for more information.\n\n**Basic usage examples**\n\n**Python**\n\n```python\nfrom RPA.Cloud.Google import Google\n\nlibrary = Google()\nservice_account = '/path/to/service_account.json'\n\nlibrary.init_vision(service_account)\nlibrary.init_text_to_speech(service_account)\n\nresponse = library.detect_text('imagefile.png', 'result.json')\nlibrary.synthesize_speech('I want this said aloud', target_file='said.mp3')\n```\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Cloud.Google\n\n*** Variables ***\n${SERVICE_ACCOUNT}    ${/}path${/}to${/}service_account.json\n${BUCKET_NAME}            testbucket12213123123\n\n*** Tasks ***\nUpload a file into a new storage bucket\n    [Setup]   Init Storage    ${SERVICE_ACCOUNT}\n    Create Storage Bucket    ${BUCKET_NAME}\n    Upload Storage File      ${BUCKET_NAME}\n    ...   ${/}path${/}to${/}file.pdf\n    ...   myfile.pdf\n    @{files}         List Storage Files   ${BUCKET_NAME}\n    FOR   ${file}  IN   @{files}\n        Log  ${file}\n    END\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_attachment_to_message(mimeMessage, attachment)\n\n#### add_drive_share(file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, source: str | None = None, email: str | None = None, domain: str | None = None, role: DriveRole = DriveRole.READER, share_type: DriveType = DriveType.USER, notification: bool = False, notification_message: str | None = None) \u2192 Dict\n\nKeyword for sharing drive file or folder.\n\nParameters file_id, file_dict, query and source can be\nused to select files to which sharing is added to.\n\nIf share is added to a folder, all files within that folder get same\nsharing permissions.\n\n* **Parameters:**\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target file, needs to match 1 file\n  * **source** \u2013 name of the folder to search files in, is by default drive\u2019s\n    root folder\n  * **email** \u2013 user or group email address if share type\n    is DriveType.USER or DriveType.GROUP\n  * **domain** \u2013 domain name if share type is DriveType.DOMAIN\n  * **role** \u2013 see `DriveRole` enum for possible values,\n    defaults to DriveRole.READER\n  * **share_type** \u2013 see `DriveType` enum for possible values,\n    defaults to DriveType.USER\n  * **notification** \u2013 whether to send notificatin email, defaults to False\n  * **notification_message** \u2013 optional message to include with the notification\n* **Returns:**\n  share response dictionary containing \u2018file_id\u2019 and \u2018permission_id\u2019\n\nExample:\n\n```robotframework\n# Add file share for a email address with email notification\nAdd Drive Share\n...    query=name = 'okta.png'\n...    email=robocorp.tester@gmail.com\n...    notification=True\n...    notification_message=Hello. I have shared 'okta.png' with you for review.\n# Add file share for a domain\nAdd Drive Share\n...    query=name = 'okta.png'\n...    domain=robocorp.com\n# Add folder share for a email address\n${folder}=    Create Drive Directory   attachments-for-the-task\n${share}=  Add Drive Share\n...   file_id=${folder}[id]\n...   email=robocorp.tester@gmail.com\n...   role=writer\nLog To Console  Share details: ${share}[file_id], ${share}[permission_id]\n```\n\n#### analyze_sentiment(text: str | None = None, text_file: str | None = None, file_type: TextType = TextType.TEXT, json_file: str | None = None, lang: str | None = None) \u2192 Dict\n\nAnalyze sentiment in a text file\n\n* **Parameters:**\n  * **text** \u2013 source text\n  * **text_file** \u2013 source text file\n  * **file_type** \u2013 type of text, PLAIN_TEXT (default) or HTML\n  * **json_file** \u2013 json target to save result, defaults to None\n  * **lang** \u2013 language code of the source, defaults to None\n* **Returns:**\n  analysis response\n\nFor list of supported languages:\n[https://cloud.google.com/natural-language/docs/languages](https://cloud.google.com/natural-language/docs/languages)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Analyze Sentiment  ${text}\n${result}=   Analyze Sentiment  text_file=${CURDIR}${/}test.txt\n```\n\n#### annotate_image(image_file: str, image_uri: str, json_file: str | None = None) \u2192 Dict\n\nAnnotate image\n\n* **Parameters:**\n  * **image_file** \u2013 source image file path\n  * **image_uri** \u2013 Google Cloud Storage URI\n  * **json_file** \u2013 json target to save result\n* **Returns:**\n  detection response\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Annotate Image   image_file=${CURDIR}${/}test.png\n...  json_file=${CURDIR}${/}result.json\n```\n\n#### annotate_video(video_file: str | None = None, video_uri: str | None = None, features: str | None = None, output_uri: str | None = None, json_file: str | None = None, timeout: int = 300) \u2192 Dict\n\nAnnotate video\n\nPossible values for features:\n\n- FEATURE_UNSPECIFIED, Unspecified.\n- LABEL_DETECTION, Label detection. Detect objects, such as dog or flower.\n- SHOT_CHANGE_DETECTION, Shot change detection.\n- EXPLICIT_CONTENT_DETECTION, Explicit content detection.\n- SPEECH_TRANSCRIPTION, Speech transcription.\n- TEXT_DETECTION, OCR text detection and tracking.\n- OBJECT_TRACKING, Object detection and tracking.\n- LOGO_RECOGNITION, Logo detection, tracking, and recognition.\n\nIf video_uri is given then that is used even if video_file is given.\n\n* **Parameters:**\n  * **video_file** \u2013 local file path to input video\n  * **video_uri** \u2013 Google Cloud Storage URI to input video\n  * **features** \u2013 list of annotation features to detect,\n    defaults to LABEL_DETECTION,SHOT_CHANGE_DETECTION\n  * **output_uri** \u2013 Google Cloud Storage URI to store response json\n  * **json_file** \u2013 json target to save result\n  * **timeout** \u2013 timeout for operation in seconds\n* **Returns:**\n  annotate result\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Annotate Video   video_uri=gs://videointelligence/movie.mp4\n...  features=TEXT_DETECTION,LABEL_DETECTION\n...  output_uri=gs://videointelligence/movie_annotations.json\n...  json_file=${CURDIR}${/}videoannotations.json\n```\n\n#### classify_text(text: str | None = None, text_file: str | None = None, file_type: TextType = TextType.TEXT, json_file: str | None = None, lang: str | None = None) \u2192 Dict\n\nClassify text\n\n* **Parameters:**\n  * **text** \u2013 source text\n  * **text_file** \u2013 source text file\n  * **file_type** \u2013 type of text, PLAIN_TEXT (default) or HTML\n  * **json_file** \u2013 json target to save result, defaults to None\n  * **lang** \u2013 language code of the source, defaults to None\n* **Returns:**\n  classify response\n\nFor list of supported languages:\n[https://cloud.google.com/natural-language/docs/languages](https://cloud.google.com/natural-language/docs/languages)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Classify Text  ${text}\n${result}=   Classify Text  text_file=${CURDIR}${/}test.txt\n```\n\n#### clear_sheet_values(spreadsheet_id: str, sheet_range: str) \u2192 Dict\n\nClear cell values for range of cells within a spreadsheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 target spreadsheet\n  * **sheet_range** \u2013 target sheet range\n* **Returns:**\n  operation result\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.clear_sheet_values(spreadsheet_id, \"A1:C1\")\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=  Clear Sheet Values  ${SPREADSHEET_ID}  A1:C1\n```\n\n#### copy_sheet(spreadsheet_id: str, source_sheet_name: str, new_sheet_name: str, insertSheetIndex: int | None = None)\n\nCopy sheet into the spreadsheet as new sheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **source_sheet_name** \u2013 name of the source sheet\n  * **new_sheet_name** \u2013 name for the new sheet\n  * **insertSheetIndex** \u2013 zero based index where the new\n    sheet should be inserted, defaults to None\n* **Returns:**\n  operation result as an dictionary\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.copy_sheet(\n    spreadsheet_id,\n    \"Existing sheet\",\n    \"Copy of existing sheet\"\n    )\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=    Copy Sheet\n...   ${SPREADSHEET_ID}\n...   Existing sheet\n...   Copy of existing sheet\n```\n\n#### copy_spreadsheet(spreadsheet_id: str, target_spreadsheet_id: str) \u2192 Dict\n\nCopy spreadsheet to target spreadsheet\n\n*NOTE:* service account user must have access\nalso to target spreadsheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 ID of the spreadsheet to copy\n  * **target_spreadsheet_id** \u2013 ID of the target spreadsheet\n* **Returns:**\n  operation result\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.copy_spreadsheet(\n    spreadsheet_id,\n    source_spreadsheet_id,\n    target_spreadsheet_id)\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=  Copy Spreadsheet   ${SPREADSHEET_ID}  ${ANOTHER_SPREADSHEET_ID}\n```\n\n#### create_drive_directory(folder: str | None = None, parent_folder: str | None = None) \u2192 Dict\n\nCreate new directory to Google Drive\n\n* **Parameters:**\n  * **folder** \u2013 name for the new directory\n  * **parent_folder** \u2013 top level directory for new directory\n* **Returns:**\n  dictionary containing folder ID and folder URL\n\nExample:\n\n```robotframework\n${folder}=  Create Drive Directory   example-folder\nLog To Console    Google Drive folder ID: ${folder}[id]\nLog To Console    Google Drive folder URL:  ${folder}[url]\n```\n\n#### create_message(to: str, subject: str, message_text: str, attachments: list | None = None, html: bool = False)\n\nCreate a message for an email.\n\n* **Parameters:**\n  * **to** \u2013 message recipient\n  * **subject** \u2013 message subject\n  * **message_text** \u2013 message body text\n  * **attachment** \u2013 list of files to add as message attachments\n  * **html** \u2013 set to True if message body is HTML (default False, plain text)\n* **Returns:**\n  An object containing a base64url encoded email object\n\n#### create_sheet(spreadsheet_id: str, sheet_name: str)\n\nCreate sheet into the spreadsheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **sheet_name** \u2013 name for the new sheet\n* **Returns:**\n  operation result as an dictionary\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.create_sheet(spreadsheet_id, \"New sheet\")\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=    Create Sheet    ${SPREADSHEET_ID}    New sheet\n```\n\n#### create_spreadsheet(title: str) \u2192 str\n\nCreate empty sheet with a title\n\n* **Parameters:**\n  **title** \u2013 name as string\n* **Returns:**\n  created spreadsheet_id\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.create_spreadsheet(\"name of the spreadsheet\")\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=  Create Sheet   Example Sheet\n```\n\n#### create_storage_bucket(bucket_name: str) \u2192 Dict\n\nCreate Google Cloud Storage bucket\n\n* **Parameters:**\n  **bucket_name** \u2013 name as string\n* **Returns:**\n  bucket\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Create Storage Bucket   visionfolder\n```\n\n#### delete_drive_file(file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, multiple_ok: bool = False, suppress_errors: bool = False) \u2192 int\n\nDelete file specified by id, file dictionary or query string\n\nNote. Be extra careful when calling this keyword!\n\n* **Parameters:**\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target file, needs to match 1 file\n    unless parameter multiple_ok is set to True\n  * **multiple_ok** \u2013 set to True if it is ok to perform delete\n    on more than 1 file\n  * **suppress_errors** \u2013 on True will log warning message instead of\n    raising an exception, defaults to False\n* **Returns:**\n  how many files where deleted\n\nExample:\n\n```robotframework\n${folder_id}=  Get Drive Folder Id   datafolder\n${deleted}=    Delete Drive File  query=name contains '.json' and '${folder_id}' in parents\n...            multiple_ok=True\n```\n\n#### delete_sheet(spreadsheet_id: str, sheet_name: str)\n\nDelete a sheet from the spreadsheet.\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **sheet_name** \u2013 name of the sheet to delete\n* **Returns:**\n  operation result as an dictionary\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.delete_sheet(spreadsheet_id, \"Sheet1\")\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=    Delete Sheet    ${SPREADSHEET_ID}    Sheet1\n```\n\n#### delete_storage_bucket(bucket_name: str)\n\nDelete Google Cloud Storage bucket\n\nBucket needs to be empty before it can be deleted.\n\n* **Parameters:**\n  **bucket_name** \u2013 name as string\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Delete Storage Bucket   visionfolder\n```\n\n#### delete_storage_files(bucket_name: str, files: Any) \u2192 List\n\nDelete files in the bucket\n\nFiles need to be object name in the bucket.\n\n* **Parameters:**\n  * **bucket_name** \u2013 name as string\n  * **files** \u2013 single file, list of files or comma separated list of files\n* **Returns:**\n  list of files which could not be deleted\n\n  **Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Delete Storage Files   ${BUCKET_NAME}   file1,file2\n```\n\n#### detect_document(image_file: str | None = None, image_uri: str | None = None, json_file: str | None = None) \u2192 Dict\n\nDetect document\n\n* **Parameters:**\n  * **image_file** \u2013 source image file path\n  * **image_uri** \u2013 Google Cloud Storage URI\n  * **json_file** \u2013 json target to save result\n* **Returns:**\n  detection response\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Detect Document   image_file=${CURDIR}${/}test.png\n...  json_file=${CURDIR}${/}result.json\n```\n\n#### detect_labels(image_file: str | None = None, image_uri: str | None = None, json_file: str | None = None) \u2192 Dict\n\nDetect labels in the image\n\n* **Parameters:**\n  * **image_file** \u2013 source image file path\n  * **image_uri** \u2013 source image uri\n  * **json_file** \u2013 json target to save result\n* **Returns:**\n  detection response\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Detect Labels   image_file=${CURDIR}${/}test.png\n...  json_file=${CURDIR}${/}result.json\n```\n\n#### detect_tables(spreadsheet_id: str, sheet_name: str | None = None)\n\nDetect tables in the sheet.\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **sheet_name** \u2013 name of the sheet, or leave None for all sheets\n* **Returns:**\n  tables arranged by sheets\n\n#### detect_text(image_file: str | None = None, image_uri: str | None = None, json_file: str | None = None) \u2192 Dict\n\nDetect text in the image\n\n* **Parameters:**\n  * **image_file** \u2013 source image file path\n  * **image_uri** \u2013 Google Cloud Storage URI\n  * **json_file** \u2013 json target to save result\n* **Returns:**\n  detection response\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Detect Text   image_file=${CURDIR}${/}test.png\n...  json_file=${CURDIR}${/}result.json\n```\n\n#### download_drive_files(file_dict: dict | None = None, query: str | None = None, source: str | None = None, limit: int | None = None, timeout: float | None = None) \u2192 List\n\nDownload files specified by file dictionary or query string\n\nParameters start, limit and timeout are used only when\ndownloading files defined by query parameter.\n\n* **Parameters:**\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target files, defaults to None\n  * **source** \u2013 source directory where query is executed\n  * **limit** \u2013 maximum amount of files that are downloaded, defaults to None\n  * **timeout** \u2013 maximum allowed time in seconds for download process\n* **Returns:**\n  list of downloaded files\n\nExample:\n\n```robotframework\n${files}=    Search Drive Files    query=name contains '.json'\nFOR    ${f}    IN    @{files}\n    IF  ${f}[size] < 2000\n        Download Drive Files  file_dict=${f}\n    END\nEND\n\n${folder_id}=   Get Drive Folder Id   datafolder\nDownload Drive Files  query=name contains '.json' and '${folder_id}' in parents\n```\n\n#### download_storage_files(bucket_name: str, files: Any) \u2192 List\n\nDownload files from a bucket\n\nExample files:\nfiles = {\u201cmytestimg\u201d: \u201cimage1.png\u201d, \u201cmydoc\u201d: \u201cgoogle.pdf\u201d}\n\n* **Parameters:**\n  * **bucket_name** \u2013 name as string\n  * **files** \u2013 list of object names or dictionary of\n    object names and target files\n* **Returns:**\n  list of files which could not be downloaded\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=  Download Storage Files  ${BUCKET_NAME}   test1.txt,test2.txt\n```\n\n#### export_drive_file(file_id: str | None = None, file_dict: dict | None = None, target_file: str | None = None, mimetype: str = 'application/pdf') \u2192 str\n\nExport Google Drive file using Drive export links\n\n* **Parameters:**\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **target_file** \u2013 name for the exported file\n  * **mimetype** \u2013 export mimetype, defaults to \u201capplication/pdf\u201d\n* **Returns:**\n  file path to the exported file\n\nExample:\n\n```robotframework\n${files}=  Drive Search Files  query=name contains 'my example worksheet'\nExport Drive File  file_dict=${files}[0]\n```\n\n#### face_detection(image_file: str | None = None, image_uri: str | None = None, json_file: str | None = None) \u2192 Dict\n\nDetect faces\n\n* **Parameters:**\n  * **image_file** \u2013 source image file path\n  * **image_uri** \u2013 Google Cloud Storage URI\n  * **json_file** \u2013 json target to save result\n* **Returns:**\n  detection response\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Face Detection   image_uri=gs://vision/faces.png\n...  json_file=${CURDIR}${/}result.json\n```\n\n#### generic_spreadsheet_batch_update(spreadsheet_id: str, body: Dict)\n\nThis keyword allows to do generic batch update to the spreadsheet.\n\nFor more information on the batch update:\n[https://googleapis.github.io/google-api-python-client/docs/dyn/sheets_v4.spreadsheets.html#create](https://googleapis.github.io/google-api-python-client/docs/dyn/sheets_v4.spreadsheets.html#create)\n\nList of possible requests actions (body can contain multiple at the same time):\n\n> - addBanding\n> - addChart\n> - addConditionalFormatRule\n> - addDataSource\n> - addDimensionGroup\n> - addFilterView\n> - addNamedRange\n> - addProtectedRange\n> - addSheet (keyword `Create sheet`)\n> - addSlicer\n> - appendCells\n> - appendDimension\n> - autoFill\n> - autoResizeDimensions\n> - clearBasicFilter\n> - copyPaste\n> - createDeveloperMetadata\n> - cutPaste\n> - deleteBanding\n> - deleteConditionalFormatRule\n> - deleteDataSource\n> - deleteDeveloperMetadata\n> - deleteDimension\n> - deleteDimensionGroup\n> - deleteDuplicates\n> - deleteEmbeddedObject\n> - deleteFilterView\n> - deleteNamedRange\n> - deleteProtectedRange\n> - deleteRange\n> - deleteSheet (keyword `Delete sheet`)\n> - duplicateFilterView\n> - duplicateSheet (keyword `Copy sheet`)\n> - findReplace\n> - insertDimension\n> - insertRange\n> - mergeCells\n> - moveDimension\n> - pasteData\n> - randomizeRange\n> - refreshDataSource\n> - repeatCell\n> - setBasicFilter\n> - setDataValidation\n> - sortRange\n> - textToColumns\n> - trimWhitespace\n> - unmergeCells\n> - updateBanding\n> - updateBorders\n> - updateCells\n> - updateChartSpec\n> - updateConditionalFormatRule\n> - updateDataSource\n> - updateDeveloperMetadata\n> - updateDimensionGroup\n> - updateDimensionProperties\n> - updateEmbeddedObjectBorder\n> - updateEmbeddedObjectPosition\n> - updateFilterView\n> - updateNamedRange\n> - updateProtectedRange\n> - updateSheetProperties (keyword `Rename sheet`)\n> - updateSlicerSpec\n> - updateSpreadsheetProperties\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **body** \u2013 body of the batch update request\n* **Returns:**\n  operation result as an dictionary\n\n**Examples**\n\n**Python**\n\n```python\nbody = {\"requests\": {\"deleteSheet\": {\"sheetId\": \"333555666\"}}}\nresult = GOOGLE.generic_spreadsheet_batch_update(spreadsheet_id, body)\n```\n\n**Robot Framework**\n\n```robotframework\n${body}=    Evaluate    {\"requests\": {\"deleteSheet\": {\"sheetId\": \"333555666\"}}}\n${result}=    Generic Spreadsheet Batch Update    ${SPREADSHEET_ID}    ${body}\n```\n\n#### get_all_sheet_values(spreadsheet_id: str, sheet_name: str | None = None, value_render_option: str = 'UNFORMATTED_VALUE', datetime_render_option: str = 'FORMATTED_STRING') \u2192 List\n\nGet values from the range in the spreadsheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 target spreadsheet\n  * **sheet_name** \u2013 target sheet (default first sheet)\n  * **value_render_option** \u2013 how values should be represented\n    in the output defaults to \u201cUNFORMATTED_VALUE\u201d\n  * **datetime_render_option** \u2013 how dates, times, and durations should be\n    represented in the output, defaults to \u201cFORMATTED_STRING\u201d\n* **Returns:**\n  operation result\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.get_all_sheet_values(spreadsheet_id)\n```\n\n**Robot Framework**\n\n```robotframework\n${values}=  Get All Sheet Values  ${SHEET_ID}  sheet1\n```\n\n#### get_document_entities(document: Document) \u2192 List\n\nHelper keyword for getting document entities from a `Process Document`\nresponse object.\n\nFor examples. see `Process Document` keyword\n\n* **Parameters:**\n  **document** \u2013 the document response object\n* **Returns:**\n  detected entities in the document response as a list\n\n#### get_document_languages(document: Document) \u2192 List\n\nHelper keyword for getting detected languages from a `Process Document`\nresponse object.\n\nFor examples. see `Process Document` keyword\n\n* **Parameters:**\n  **document** \u2013 the document response object\n* **Returns:**\n  detected languages in the document response as a list\n\n#### get_drive_file_by_id(file_id: str, suppress_errors: bool = False) \u2192 Dict\n\nGet file dictionary by its file id.\n\n* **Parameters:**\n  * **file_id** \u2013 id of the file in the Google Drive\n  * **suppress_errors** \u2013 on True will log warning message instead of\n    raising an exception, defaults to False (exception is raised)\n* **Returns:**\n  dictionary containing file information\n\nExample:\n\n```robotframework\n${file_dict}=  Get Drive File By ID    file_id=${FILE_ID}\n```\n\n#### get_drive_folder_id(folder: str | None = None, parent_folder: str | None = None, details: bool = False) \u2192 str\n\nGet file id for the folder\n\n* **Parameters:**\n  * **folder** \u2013 name of the folder to identify, by default returns drive\u2019s\n    root folder id\n  * **parent_folder** \u2013 can be used to narrow search by giving parent\n    folder name\n  * **details** \u2013 on True will return folder dictionary, on False (default)\n    folder id is returned\n* **Returns:**\n  file id of the folder or file dictionary when details = True\n\nExample:\n\n```robotframework\n${root_id}=    Get Drive Folder Id   # returns Drive root folder id\n${folder_id}=  Get Drive Folder Id  subdir\n```\n\n#### get_sheet_by_name(spreadsheet_id: str, sheet_name: str)\n\n#### get_sheet_formulas(spreadsheet_id: str, sheet_name: str)\n\nGet formulas from the sheet.\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **sheet_name** \u2013 name of the sheet\n* **Returns:**\n  \\_description_\n\n#### get_sheet_values(spreadsheet_id: str, sheet_range: str | None = None, value_render_option: str = 'UNFORMATTED_VALUE', datetime_render_option: str = 'FORMATTED_STRING') \u2192 List\n\nGet values from the range in the spreadhsheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 target spreadsheet\n  * **sheet_range** \u2013 target sheet range\n  * **value_render_option** \u2013 how values should be represented\n    in the output defaults to \u201cUNFORMATTED_VALUE\u201d\n  * **datetime_render_option** \u2013 how dates, times, and durations should be\n    represented in the output, defaults to \u201cFORMATTED_STRING\u201d\n* **Returns:**\n  operation result\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.get_sheet_values(spreadsheet_id, \"A1:C1\")\n```\n\n**Robot Framework**\n\n```robotframework\n${values}=  Get Sheet Values  ${SPREADSHEET_ID}  A1:C1\n```\n\n#### get_spreadsheet_basic_information(spreadsheet_id: str) \u2192 List\n\nGet title, id, url and sheets information\nfrom the spreadsheet.\n\n* **Parameters:**\n  **spreadsheet_id** \u2013 ID of the spreadsheet\n* **Returns:**\n  operation result as an dictionary\n\n#### get_spreadsheet_details(spreadsheet_id: str) \u2192 Dict\n\nReturns spreadsheet information as a dictionary.\n\n* **Parameters:**\n  **spreadsheet_id** \u2013 ID of the spreadsheet\n* **Returns:**\n  operation result as an dictionary\n\n#### get_storage_bucket(bucket_name: str) \u2192 Dict\n\nGet Google Cloud Storage bucket\n\n* **Parameters:**\n  **bucket_name** \u2013 name as string\n* **Returns:**\n  bucket\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Get Bucket   visionfolder\n```\n\n#### handle_mimetypes(parsed_parts, part, msg, folder_name)\n\n#### init_apps_script(service_account: str | None = None, credentials: str | None = None, use_robocorp_vault: bool | None = None, scopes: list | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Apps Script client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **credentials** \u2013 file path to credentials file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **scopes** \u2013 list of extra authentication scopes\n  * **token_file** \u2013 file path to token file\n\n#### init_document_ai(service_account: str | None = None, region: str | None = 'us', use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Document AI client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **region** \u2013 region of the service\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\nRobot Framework example:\n\n```robotframework\n# Init using Service Account from a file\nInit Document AI   ${CURDIR}${/}service_account.json  region=eu\n# Init using OAuth token from a file and default \"us\" region\nInit Document AI   ${CURDIR}${/}token.json\n# Init using service account file from the Robocorp Vault\nSet Robocorp Vault\n...         vault_name=DocumentAI\n...         vault_secret_key=google-sa\nInit Document AI    region=eu    use_robocorp_vault=True\n```\n\nPython example:\n\n```python\nGOOGLE = Google()\nGOOGLE.set_robocorp_vault(\"DocumentAI\", \"google-sa\")\nGOOGLE.init_document_ai(region=\"eu\", use_robocorp_vault=True)\n```\n\n#### init_drive(service_account: str | None = None, credentials: str | None = None, use_robocorp_vault: bool | None = None, scopes: list | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Drive client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **credentials** \u2013 file path to credentials file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **scopes** \u2013 list of extra authentication scopes\n  * **token_file** \u2013 file path to token file\n\n#### init_gmail(service_account: str | None = None, credentials: str | None = None, use_robocorp_vault: bool | None = None, scopes: list | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Gmail client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **credentials** \u2013 file path to credentials file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **scopes** \u2013 list of extra authentication scopes\n  * **token_file** \u2013 file path to token file\n\n#### init_natural_language(service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Natural Language client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### init_sheets(service_account: str | None = None, credentials: str | None = None, use_robocorp_vault: bool | None = None, scopes: list | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Sheets client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **credentials** \u2013 file path to credentials file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **scopes** \u2013 list of extra authentication scopes\n  * **token_file** \u2013 file path to token file\n\n#### init_speech_to_text(service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Speech to Text client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### init_storage(service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Storage client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### init_text_to_speech(service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Text to Speech client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### init_translation(project_identifier: str, service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Translation client\n\n* **Parameters:**\n  * **project_identifier** \u2013 identifier for Translation project\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### init_video_intelligence(service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Video Intelligence client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### init_vision(service_account: str | None = None, use_robocorp_vault: bool | None = None, token_file: str | None = None) \u2192 None\n\nInitialize Google Cloud Vision client\n\n* **Parameters:**\n  * **service_account** \u2013 file path to service account file\n  * **use_robocorp_vault** \u2013 use credentials in Robocorp Vault\n  * **token_file** \u2013 file path to token file\n\n#### insert_sheet_values(spreadsheet_id: str, sheet_range: str, values: list, major_dimension: str = 'COLUMNS', value_input_option: str = 'USER_ENTERED') \u2192 Dict\n\nInsert values into sheet cells\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 target spreadsheet\n  * **sheet_range** \u2013 target sheet range\n  * **values** \u2013 list of values to insert into sheet\n  * **major_dimension** \u2013 major dimension of the values, default COLUMNS\n  * **value_input_option** \u2013 controls whether input strings are parsed or not,\n    default USER_ENTERED\n* **Returns:**\n  operation result\n\n**Examples**\n\n**Python**\n\n```python\nvalues = [[11, 12, 13], ['aa', 'bb', 'cc']]\nresult = GOOGLE.insert_sheet_values(spreadsheet_id, \"A:C\", values)\n```\n\n**Robot Framework**\n\n```robotframework\n${values}   Evaluate   [[11, 12, 13], ['aa', 'bb', 'cc']]\n${result}=  Insert Sheet Values   ${SPREADSHEET_ID}  A:B  ${values}\n${result}=  Insert Sheet Values   ${SPREADSHEET_ID}  A:B  ${values}  ROWS\n```\n\n#### list_messages(user_id: str, query: str, folder_name: str | None = None, label_ids: list | None = None, max_results: int | None = None, include_json: bool = False, include_spam: bool = False)\n\nList messages\n\n* **Parameters:**\n  * **user_id** \u2013 user\u2019s email address. The special value me can\n    be used to indicate the authenticated user.\n  * **query** \u2013 message query\n  * **folder_name** \u2013 path where attachments are saved, default current\n    directory\n  * **label_ids** \u2013 message label ids\n  * **max_results** \u2013 maximum number of message to return\n  * **include_json** \u2013 include original response json\n  * **include_spam** \u2013 include messages from SPAM and TRASH\n* **Returns:**\n  messages\n\nExample:\n\n```robotframework\n${messages}=    List Messages    me\n...    from:mika@robocorp.com\n...    folder_name=${CURDIR}${/}target\n...    include_json=True\nFOR    ${msg}    IN    @{messages}\n    Log Many    ${msg}\nEND\n```\n\n#### list_processors(project_id: str, region: str) \u2192 List\n\nList existing document AI processors from given project and region.\n\nRequires documentai.processors.list permission.\n\n* **Parameters:**\n  * **project_id** \u2013 Google Cloud project ID\n  * **region** \u2013 Google Cloud region of the processor\n* **Returns:**\n  list of available processors as a list\n\nRobot Framework example:\n\n```robotframework\n@{processors}=    List Processors    ${PROJECT_ID}    eu\nFOR    ${p}    IN    @{processors}\n    # name: projects/PROJECT_ID/locations/REGION/processors/PROCESSOR_ID\n    Log To Console    Processor name: ${p.name}\n    Log To Console    Processor type: ${p.type_}\n    Log To Console    Processor display name: ${p.display_name}\nEND\n```\n\nPython example:\n\n```python\nprocessors = GOOGLE.list_processors(PROJECT_ID, \"eu\")\nfor p in processors:\n    print(f\"Processor name: {p.name}\")\n    print(f\"Processor type: {p.type_}\")\n    print(f\"Processor name: {p.display_name}\")\n```\n\n#### list_shared_drive_files(query: str | None = None, source: str | None = None) \u2192 List\n\nKeyword for listing shared files in the source folder.\n\nAlias keyword for `Search Drive Files` which can be used to list\nonly files which have been shared.\n\n* **Parameters:**\n  * **query** \u2013 drive query string to find target files\n  * **source** \u2013 source directory where query is executed\n* **Returns:**\n  list of shared files\n\nExample:\n\n```robotframework\n${shared}=    List Shared Drive Files    source=subfolder\nFOR    ${file}    IN    @{shared}\n    Log To Console    ${file}\nEND\n```\n\n#### list_storage_buckets() \u2192 List\n\nList Google Cloud Storage buckets\n\n* **Returns:**\n  list of buckets\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${buckets}=   List Storage Buckets\nFOR  ${bucket}  IN   @{buckets}\n    Log  ${bucket}\nEND\n```\n\n#### list_storage_files(bucket_name: str) \u2192 List\n\nList files in the bucket\n\n* **Parameters:**\n  **bucket_name** \u2013 name as string\n* **Returns:**\n  list of object names in the bucket\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${files}=   List Storage Files  ${BUCKET_NAME}\nFOR  ${bucket}  IN   @{files}\n    Log  ${file}\nEND\n```\n\n#### list_supported_voices(language_code: str | None = None) \u2192 List\n\nList supported voices for the speech\n\n* **Parameters:**\n  **language_code** \u2013 voice languages to list, defaults to None (all)\n* **Returns:**\n  list of supported voices\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   List Supported Voices   en-US\n```\n\n#### load_document_response(filepath: str) \u2192 Document\n\nLoads the binary object saved by `Save Document Response` into\n`documentai.Document` format which is accessible by helper keywords.\n\n* **Parameters:**\n  **filepath** \u2013 source file to read binary document object from\n* **Returns:**\n  processed document response object\n\nRobot Framework example:\n\n```robotframework\n# load previously saved response\n${document}=  Load Document Response  ${CURDIR}${/}google_processed.response\n${entities}=  Get Document Entities  ${document}\n```\n\nPython example:\n\n```python\ndocument = GOOGLE.load_document_response(\"google_doc.response\")\nentities = GOOGLE.get_document_entities(document)\nfor ent in entities:\n    print(ent)\n```\n\n#### move_drive_file(file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, source: str | None = None, target: str | None = None, multiple_ok: bool = False) \u2192 List\n\nMove file specified by id, file dictionary or query string into target folder\n\n* **Parameters:**\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target file, needs to match 1 file\n  * **source** \u2013 name of the folder to move file from, is by default drive\u2019s\n    root folder id\n  * **target** \u2013 name of the folder to move file into, is by default drive\u2019s\n    root folder id\n  * **multiple_ok** \u2013 if True then moving more than 1 file\n* **Returns:**\n  list of file ids\n\nExample:\n\n```robotframework\n${source_id}=  Get Drive Folder Id  sourcefolder\n${query}=      Set Variable  name contains '.json' and '${sourceid}' in parents\n${files}=      Move Drive File  query=${query}  folder=target_folder  multiple_ok=True\n```\n\n#### parse_parts(msg_id, msg, parts, folder_name)\n\nUtility function that parses the content of an email partition\n\n#### process_document(project_id: str, region: str, processor_id: str, file_path: str, mime_type: str | None = None) \u2192 Document\n\nProcess document in the Google Cloud platform\nusing given document processor ID within given project and\nregion.\n\nFor a full list of Document response object attributes, please reference this\n[page](https://cloud.google.com/python/docs/reference/documentai/latest/google.cloud.documentai_v1.types.Document/).\n\n* **Parameters:**\n  * **project_id** \u2013 Google Cloud project ID\n  * **region** \u2013 Google Cloud region of the processor\n  * **processor_id** \u2013 ID of the document processor\n  * **file_path** \u2013 filepath of the document to process\n  * **mime_type** \u2013 given mime type of document (optional),\n    if not given it is auto detected\n* **Returns:**\n  processed document response object\n\nRobot Framework example:\n\n```robotframework\n${document}=    Process Document\n...    project_id=${GOOGLE_PROJECT_ID}\n...    region=eu\n...    processor_id=${RECEIPT_PROCESSOR_ID}\n...    file_path=${CURDIR}${/}mydocument.pdf\n${entities}=    Get Document Entities    ${document}\nFOR  ${ent}  IN  @{entities}\n    Log To Console  Entity: ${ent}\nEND\n${languages}=    Get Document Languages    ${document}\nLog To Console    Languages: ${languages}\n```\n\nPython example:\n\n```python\ndocument = GOOGLE.process_document(\n    project_id=PROJECT_ID,\n    region=\"eu\",\n    processor_id=PROCESSOR_ID,\n    file_path=\"./files/mydocument.pdf\",\n)\nentities = GOOGLE.get_document_entities(document)\nfor ent in entities:\n    print(ent)\nlanguages = GOOGLE.get_document_languages(document)\nfor lang in languages:\n    print(lang)\n```\n\n#### recognize_text_from_audio(audio_file: str | None = None, audio_uri: str | None = None, encoding: str | None = None, language_code: str = 'en_US', audio_channel_count: int = 2, sample_rate: int | None = None) \u2192 Dict\n\nRecognize text in the audio file\n\n* **Parameters:**\n  * **audio_file** \u2013 local audio file path\n  * **audio_uri** \u2013 Google Cloud Storage URI\n  * **encoding** \u2013 audio file encoding\n  * **language_code** \u2013 language in the audio\n  * **audio_channel_count** \u2013 number of audio channel\n  * **sample_rate** \u2013 rate in hertz, for example 16000\n* **Returns:**\n  recognized texts\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=  Recognize Text From Audio   audio_file=${CURDIR}${/}test.mp3\n```\n\n#### remove_all_drive_shares(file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, suppress_errors: bool = False) \u2192 List\n\nKeyword for removing all shares from selected files (only owner\npermission is retained).\n\n* **Parameters:**\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target files\n  * **suppress_errors** \u2013 on True will log warning message instead of\n    raising an exception, defaults to False (exception is raised)\n* **Returns:**\n  list of dictionaries containing information of file permissions removed\n\nExample:\n\n```robotframework\n${removed}=  Remove All Drive Shares    file_id=${FOLDER_ID}\n```\n\n#### remove_drive_share_by_criteria(email: str | None = None, domain: str | None = None, permission_id: str | None = None, file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, source: str | None = None, suppress_errors: bool = False) \u2192 List\n\nKeyword for removing share from file or folder\nbased on criteria.\n\nParameters file_id, file_dict, query and source can be\nused to select files from which sharing is removed.\n\nParameters email, domain or permission_id can be\nused to select which share is removed from selected files.\n\n* **Parameters:**\n  * **email** \u2013 email address of the permission to remove\n  * **domain** \u2013 domain name of the permission to remove\n  * **permission_id** \u2013 id of the permission to remove\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target files\n  * **source** \u2013 name of the folder to search files in, is by default drive\u2019s\n    root folder\n  * **suppress_errors** \u2013 on True will log warning message instead of\n    raising an exception, defaults to False (exception is raised)\n* **Returns:**\n  list of dictionaries containing information of file permissions removed\n\nExample:\n\n```robotframework\n# Remove domain shares for files in the folder ${FOLDER_NAME}\n${removed}=    Remove Drive Share By Criteria\n...    domain=robocorp.com\n...    source=${FOLDER_NAME}\n# Remove email share for a file\n${removed}=    Remove Drive Share By Criteria\n...    query=name = 'okta.png'\n...    email=robocorp.tester@gmail.com\n```\n\n#### remove_drive_share_by_permission_id(permission_id: str, file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, source: str | None = None, suppress_errors: bool = False) \u2192 Dict\n\nKeyword for removing share permission of file or folder\npermission id.\n\nParameters file_id, file_dict, query and source can be\nused to select files from which sharing is removed.\n\n* **Parameters:**\n  * **permission_id** \u2013 id of the permission to remove\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Search Drive Files\n  * **query** \u2013 drive query string to find target file, needs to match 1 file\n  * **source** \u2013 name of the folder to search files in, is by default drive\u2019s\n    root folder\n  * **suppress_errors** \u2013 on True will log warning message instead of\n    raising an exception, defaults to False (exception is raised)\n* **Returns:**\n  dictionary of permission response\n\nExample:\n\n```robotframework\n${share}=   Add Drive Share\n...  query=name = 'sharable-files' and mimeType = 'application/vnd.google-apps.folder'\n...  email=robocorp.tester@gmail.com\n#\n# actions on shared files in the folder 'shareable-files' ....\n#\nRemove Drive Share By Permission Id   ${share}[permission_id]  ${share}[file_id]\n```\n\n#### rename_sheet(spreadsheet_id: str, sheet_name: str, new_sheet_name: str)\n\nRename sheet in the spreadsheet\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 id of the spreadsheet\n  * **sheet_name** \u2013 existing name of the sheet\n  * **new_sheet_name** \u2013 name for the new sheet\n* **Returns:**\n  operation result as an dictionary\n\n**Examples**\n\n**Python**\n\n```python\nresult = GOOGLE.rename_sheet(spreadsheet_id, \"Sheet1\", \"New name\")\n```\n\n**Robot Framework**\n\n```robotframework\n${result}=    Rename Sheet    ${SPREADSHEET_ID}    Sheet1   New name\n```\n\n#### run_script(script_id: str, function_name: str, parameters: dict | None = None) \u2192 None\n\nRun the Google Apps Script function\n\n* **Parameters:**\n  * **script_id** \u2013 Google Script identifier\n  * **function_name** \u2013 name of the script function\n  * **parameters** \u2013 script function parameters as a dictionary\n* **Raises:**\n  **AssertionError** \u2013 thrown when Google Script returns errors\n\nExample:\n\n```robotframework\n&{params}=    Create Dictionary  formid=aaad4232  formvalues=1,2,3\n${response}=  Run Script    abc21397283712da  submit_form   ${params}\nLog Many   ${response}\n```\n\n#### save_document_response(document: Document, filepath: str) \u2192 None\n\nSave `Process Document` response into a binary file.\n\n* **Parameters:**\n  * **document** \u2013 response document object\n  * **filepath** \u2013 target file to save binary object into\n\nRobot Framework example:\n\n```robotframework\n${document}=    Process Document\n...    project_id=101134120147\n...    region=eu\n...    processor_id=${RECEIPT_PROCESSOR}\n...    file_path=${file_in}\n# save response for later\nSave Document Response  ${CURDIR}${/}google_processed.response\n```\n\nPython example:\n\n```python\ndocument = GOOGLE.process_document(\n    project_id=PROJECT_ID,\n    region=\"eu\",\n    processor_id=PROCESSOR_ID,\n    file_path=\"./files/receipt1.jpg\",\n)\nGOOGLE.save_document_response(document, \"receipt.response\")\n```\n\n#### search_drive_files(query: str | None = None, recurse: bool = False, source: str | None = None) \u2192 List\n\nSearch Google Drive for files matching query string\n\n* **Parameters:**\n  * **query** \u2013 search string, defaults to None which means that all files\n    and folders are returned\n  * **recurse** \u2013 set to True if search should recursive\n  * **source** \u2013 source directory where query is executed\n* **Returns:**\n  list of files\n\nExample:\n\n```robotframework\n${files}=  Search Drive Files   query=name contains 'hello'\n${files}=  Search Drive Files   query=modifiedTime > '2020-06-04T12:00:00'\n${files}=  Search Drive Files   query=mimeType contains 'image/' or mimeType contains 'video/'\n${files}=  Search Drive Files   query=name contains '.yaml'  recurse=True\n${files}=  Search Drive Files   query=name contains '.yaml'  source=datadirectory\n```\n\n#### send_message(sender: str, to: str, subject: str, message_text: str, attachments: list | None = None, html: bool = False)\n\nSend an email message.\n\n* **Parameters:**\n  * **sender** \u2013 message sender\n  * **to** \u2013 message recipient\n  * **subject** \u2013 message subject\n  * **message_text** \u2013 message body text\n  * **attachment** \u2013 list of files to add as message attachments\n  * **html** \u2013 set to True if message body is HTML (default False, plain text)\n* **Returns:**\n  sent message\n\nExample:\n\n```robotframework\n${attachments}=  Create List\n...  ${CURDIR}${/}random.txt\n...  ${CURDIR}${/}source.png\nSend Message    me\n...    mika@robocorp.com\n...    message subject\n...    body of the message\n...    ${attachments}\n```\n\n#### set_audio_type(audio_file, audio_uri)\n\n#### set_headers_to_message_dict(payload, message_id, response)\n\n#### set_image_type(image_file: str | None = None, image_uri: str | None = None)\n\n#### set_list_parameters(user_id, query, label_ids, max_results, include_spam)\n\n#### set_robocorp_vault(vault_name: str | None = None, vault_secret_key: str | None = None, auth_type: str = 'serviceaccount')\n\nSet Robocorp Vault name and secret key name\n:param vault_name: Robocorp Vault name\n:param vault_secret_key: Robocorp Vault secret key name\n:param auth_type: either serviceaccount or token\n\n#### synthesize_speech(text: str, language: str = 'en-US', name: str = 'en-US-Standard-B', gender: str = 'MALE', encoding: str = 'MP3', target_file: str = 'synthesized.mp3') \u2192 List\n\nSynthesize speech synchronously\n\n* **Parameters:**\n  * **text** \u2013 input text to synthesize\n  * **language** \u2013 voice language, defaults to \u201cen-US\u201d\n  * **name** \u2013 voice name, defaults to \u201cen-US-Standard-B\u201d\n  * **gender** \u2013 voice gender, defaults to \u201cMALE\u201d\n  * **encoding** \u2013 result encoding type, defaults to \u201cMP3\u201d\n  * **target_file** \u2013 save synthesized output to file,\n    defaults to \u201csynthesized.mp3\u201d\n* **Returns:**\n  synthesized output in bytes\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Synthesize Speech   ${text}\n```\n\n#### to_A1_notation(column_number: int, row_number: int)\n\nConvert a column number and a row number into a cell reference.\n\n* **Parameters:**\n  * **column_number** \u2013 column number to convert\n  * **row_number** \u2013 row number to convert\n* **Returns:**\n  cell reference string\n\n#### to_column_letter(number: int)\n\nConvert a column number into a column letter(s).\n\n* **Parameters:**\n  **number** \u2013 column number to convert\n* **Returns:**\n  column letter(s)\n\n#### translate(text: list | str, source_language: str | None = None, target_language: str | None = None, mime_type: TextType | None = None) \u2192 Dict\n\nTranslate text\n\n* **Parameters:**\n  * **text** \u2013 text to translate\n  * **source_language** \u2013 language code\n  * **target_language** \u2013 language code\n  * **mime_type** \u2013 text or html\n* **Returns:**\n  translated text\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${result}=   Translate   ${TEXT}  target_language=de\n```\n\n#### update_drive_file(file_id: str | None = None, file_dict: dict | None = None, query: str | None = None, source: str | None = None, action: UpdateAction = UpdateAction.star, multiple_ok: bool = False) \u2192 int\n\nUpdate file specified by id, file dictionary or query string\n\nPossible actions:\n- star\n- unstar\n- trash\n- untrash\n\n* **Parameters:**\n  * **file_id** \u2013 drive file id\n  * **file_dict** \u2013 file dictionary returned by Drive Search Files\n  * **query** \u2013 drive query string to find target file, needs to match 1 file\n  * **source** \u2013 source directory where query is executed\n  * **action** \u2013 update action, default star file\n  * **multiple_ok** \u2013 set to True if it is ok to perform update\n    on more than 1 file\n* **Returns:**\n  number of updated files\n\nExample:\n\n```robotframework\n${folder_id}=  Get Drive Folder Id   datafolder\n${updated}=    Update Drive File  query=name contains '.json' and '${folder_id}' in parents\n...            action=star\n...            multiple_ok=True\n```\n\n#### update_sheet_values(spreadsheet_id: str, sheet_range: str, values: list, major_dimension: str = 'COLUMNS', value_input_option: str = 'USER_ENTERED') \u2192 Dict\n\nInsert values into sheet cells\n\n* **Parameters:**\n  * **spreadsheet_id** \u2013 target spreadsheet\n  * **sheet_range** \u2013 target sheet range\n  * **values** \u2013 list of values to insert into sheet\n  * **major_dimension** \u2013 major dimension of the values, default COLUMNS\n  * **value_input_option** \u2013 controls whether input strings are parsed or not,\n    default USER_ENTERED\n* **Returns:**\n  operation result\n\n**Examples**\n\n**Python**\n\n```python\nrow_data = [[11, 12, 13], ['aa', 'bb', 'cc']]\nresult = GOOGLE.update_sheet_values(\n    spreadsheet_id,\n    \"A1:C1\",\n    row_data,\n    \"ROWS\n    )\n```\n\n**Robot Framework**\n\n```robotframework\n${row}  Evaluate   [[22, 33 ,44]]\n${result}=  Update Sheet Values\n...   ${SPREADSHEET_ID}\n...   A6:C6\n...   ${row}\n...   ROWS\n```\n\n#### upload_drive_file(filename: str | None = None, folder: str | None = None, overwrite: bool = False, make_dir: bool = False) \u2192 str\n\nUpload files into Drive\n\n* **Parameters:**\n  * **filename** \u2013 name of the file to upload\n  * **folder** \u2013 target folder for upload\n  * **overwrite** \u2013 set to True if already existing file should be overwritten\n  * **make_dir** \u2013 set to True if folder should be created if it does not exist\n* **Returns:**\n  uploaded file id\n\nExample:\n\n```robotframework\n${file1_id}=  Upload Drive File  data.json  # Upload file to drive root\n${file2_id}=  Upload Drive File  newdata.json  new_folder  make_dir=True\n${file3_id}=  Upload Drive File  data.json  overwrite=True\n```\n\n#### upload_storage_file(bucket_name: str, filename: str, target_name: str) \u2192 None\n\nUpload a file into a bucket\n\n* **Parameters:**\n  * **bucket_name** \u2013 name as string\n  * **filename** \u2013 filepath to upload file\n  * **target_name** \u2013 target object name\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nUpload Storage File  ${BUCKET_NAME}\n...   ${CURDIR}${/}test.txt    test.txt\n```\n\n#### upload_storage_files(bucket_name: str, files: dict) \u2192 None\n\nUpload files into a bucket\n\nExample files:\nfiles = {\u201cmytestimg\u201d: \u201cimage1.png\u201d, \u201cmydoc\u201d: \u201cgoogle.pdf\u201d}\n\n* **Parameters:**\n  * **bucket_name** \u2013 name as string\n  * **files** \u2013 dictionary of object names and filepaths\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n${files}=   Create Dictionary\n...   test1.txt   ${CURDIR}${/}test1.txt\n...   test2.txt   ${CURDIR}${/}test2.txt\nUpload Storage Files   ${BUCKET_NAME}   ${files}\n```\n"
  },
  {
    "module": "RPA.Crypto.Crypto",
    "markdown": "# Python API\n\n## Crypto\n\n### *class* RPA.Crypto.Crypto(encryption_type: str | EncryptionType | None = None)\n\nLibrary for common encryption and hashing operations.\n\nLibrary uses by default the\n[Fernet](https://github.com/fernet/spec/blob/master/Spec.md) format\nfor encryption. More specifically, it uses AES in CBC mode with\na 128-bit key for encryption and HMAC with SHA256 for authentication.\n\nAlternative encryption format for the library is\n[AES256](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard).\n\nTo use the encryption features, generate a key with the command line\nutility `rpa-crypto` or with the keyword `Generate Key`. Store\nthe key in a secure place, such as Robocorp Vault, and load it within\nthe execution before calling encryption/decryption keywords.\n\n**Example usage with Robocorp Vault**\n\nCreate an encryption key with the CLI utility:\n\n```console\n> rpa-crypto key\nrGx1edA07yz7uD08ChiPSunn8vaauRxw0pAbsal9zjM=\n```\n\nStore the key in Robocorp Vault, in this case with the name `EncryptionKey`.\n\nLoad the key from the vault before encryption operations:\n\n```robotframework\nUse encryption key from vault    EncryptionKey\n${encrypted}=   Encrypt file    orders.xlsx\nAdd work item file    ${encrypted}    name=Orders\n```\n\nIn another task, this same key can be used to decrypt the file:\n\n```robotframework\nUse encryption key from vault    EncryptionKey\n${encrypted}=    Get work item file    Orders\n${orders}=   Decrypt file    ${encrypted}\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### decrypt_file(path: str, output: str | None = None, encryption_type: str | EncryptionType | None = None) \u2192 str\n\nDecrypt a file.\n\n* **Parameters:**\n  * **path** \u2013 Path to encrypted input file\n  * **output** \u2013 Path to decrypted output file\n* **Returns:**\n  Path to the decrypted file\n\nIf no output path is given, it will generate one from the input path.\nThe resulting output path is returned.\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${path}=    Decrypt file    orders.xlsx.enc\nLog    Path to decrypted file is: ${path}\n```\n\n#### decrypt_string(data: bytes | str, encoding: str = 'utf-8', encryption_type: str | EncryptionType | None = None) \u2192 str | bytes\n\nDecrypt a string.\n\n* **Parameters:**\n  * **data** \u2013 Encrypted data as base64 string\n  * **encoding** \u2013 Original encoding of string\n* **Returns:**\n  Decrypted string or raw bytes, if None given as encoding\n\nReturns the decrypted string that is parsed with the given encoding,\nor if the encoding is `None` the raw bytes are returned.\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${text}=    Decrypt string    ${token}\nLog    Secret string is: ${text}\n```\n\n#### encrypt_file(path: str, output: str | None = None, encryption_type: str | EncryptionType | None = None) \u2192 str\n\nEncrypt a file.\n\n* **Parameters:**\n  * **path** \u2013 Path to source input file\n  * **output** \u2013 Path to encrypted output file\n* **Returns:**\n  Path to the encrypted file\n\nIf no output path is given, it will generate one from the input path.\nThe resulting output path is returned.\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${path}=    Encrypt file    orders.xlsx\nLog    Path to encrypted file is: ${path}\n```\n\n#### encrypt_string(text: bytes | str, encoding: str = 'utf-8', encryption_type: str | EncryptionType | None = None) \u2192 bytes\n\nEncrypt a string.\n\n* **Parameters:**\n  * **text** \u2013 Source text to encrypt\n  * **encoding** \u2013 Used text encoding\n* **Returns:**\n  Token of the encrypted string in bytes\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${token}=    Encrypt string    This is a secret, don't share it\n```\n\n#### generate_key(encryption_type: str | EncryptionType | None = None) \u2192 str\n\nGenerate a Fernet encryption key as base64 string.\n\n* **Returns:**\n  Generated key as a string\n\nThis key can be used for encryption/decryption operations\nwith this library.\n\n*NOTE:* Store the generated key in a secure place!\nIf the key is lost, the encrypted data can not be recovered.\nIf anyone else gains access to it, they can decrypt your data.\n\n#### hash_file(path: str, method: Hash = Hash.SHA1) \u2192 str\n\nCalculate a hash from a file, in base64 format.\n\n* **Parameters:**\n  * **path** \u2013 Path to file\n  * **method** \u2013 The used hashing method\n* **Returns:**\n  Hash digest of the file\n\nExample:\n\n```robotframework\n${digest}=    Hash file    orders.xlsx    method=MD5\nShould not be equal    ${digest}    uSlyRHlbu8NzY29YMZhDUpdErP4=\n```\n\n#### hash_string(text: str, method: Hash = Hash.SHA1, encoding='utf-8') \u2192 str\n\nCalculate a hash from a string, in base64 format.\n\n* **Parameters:**\n  * **text** \u2013 String to hash\n  * **method** \u2013 Used hashing method\n  * **encoding** \u2013 Used text encoding\n* **Returns:**\n  Hash digest of the string\n\nExample:\n\n```robotframework\n${digest}=    Hash string    A value that will be hashed\nShould be equal    ${digest}    uSlyRHlbu8NzY29YMZhDUpdErP4=\n```\n\n#### use_encryption_key(key: bytes | str, encryption_type: str | EncryptionType | None = None) \u2192 None\n\nSet key for all following encryption/decryption operations.\n\n* **Parameters:**\n  **key** \u2013 Encryption key as base64 string\n\nAssumes the given key has been generated previously using\neither the keyword `Generate Key` or with the matching command\nline utility.\n\nExample:\n\n```robotframework\n${key}=    Read file    encryption.key\nUse encryption key      ${key}\n```\n\n#### use_encryption_key_from_vault(name: str, key: str | None = None, encryption_type: str | EncryptionType | None = None) \u2192 None\n\nLoad an encryption key from Robocorp Vault.\n\n* **Parameters:**\n  * **name** \u2013 Name of secret in Vault\n  * **key** \u2013 Name of encryption key in secret\n\nIf the secret only has one value, the key argument is optional.\n\nExample:\n\n```robotframework\n# Secret with one value\nUse encryption key from vault    Encryption\n# Secret with multiple values\nUse encryption key from vault    name=Encryption    key=CryptoKey\n```\n"
  },
  {
    "module": "RPA.Database.Database",
    "markdown": "# Python API\n\n## Database\n\n### *class* RPA.Database.Database\n\nDatabase is a library for handling different database operations.\n\nAll database operations are supported. Keywords Query and Get Rows\nreturn values by default in RPA.Table format.\n\nLibrary is compatible with any Database API Specification 2.0 module.\n\n**Workaround for inserting large JSON data for Call Stored Procedure**\n\nWorkaround is to use instead Query keyword. At the moment there is\nno known fix for the Call Stored Procedure keyword as it fails if\nJSON string is more than 8000 characters long.\n\n**Robot Framework**\n\n```robotframework\n${data}=    Load JSON from file    random_data.json\n${json}=    Convert JSON to String    ${data}\n# Single quotes around ${json} string are necessary\nQuery    exec InsertJsonDataToSampleTable '${json}'\n```\n\nReferences:\n\n- Database API Specification 2.0 - [http://www.python.org/dev/peps/pep-0249/](http://www.python.org/dev/peps/pep-0249/)\n- Lists of DB API 2.0 - [http://wiki.python.org/moin/DatabaseInterfaces](http://wiki.python.org/moin/DatabaseInterfaces)\n- Python Database Programming - [http://wiki.python.org/moin/DatabaseProgramming/](http://wiki.python.org/moin/DatabaseProgramming/)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary         RPA.Database\n\n*** Tasks ***\nGet Orders From Database\n    Connect To Database  pymysql  tester  user  password  127.0.0.1\n    @{orders}            Query    Select * FROM incoming_orders\n    FOR   ${order}  IN  @{orders}\n        Handle Order  ${order}\n    END\n```\n\n**Python**\n\n```python\nfrom RPA.Database import Database\nfrom RPA.Robocorp.Vault import FileSecrets\n\nfilesecrets = FileSecrets(\"secrets.json\")\nsecrets = filesecrets.get_secret(\"databasesecrets\")\n\ndb = Database()\ndb.connect_to_database('pymysql',\n                    secrets[\"DATABASE\"],\n                    secrets[\"USERNAME\"],\n                    secrets[\"PASSWORD\"],\n                    '127.0.0.1'\n                    )\norders = db.query(\"SELECT * FROM incoming_orders\")\nfor order in orders:\n    print(order)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### call_stored_procedure(name: str, params: List[str] | None = None, sanstran: bool | None = False, as_table: bool | None = True, multiple: bool | None = False) \u2192 Table | List[str]\n\nCall stored procedure with name and params.\n\n* **Parameters:**\n  * **name** \u2013 procedure name\n  * **params** \u2013 parameters for the procedure as a list, defaults to None\n  * **sanstran** \u2013 Run the query without an implicit transaction commit or\n    rollback if such additional action was detected. (turned off by default)\n  * **as_table** \u2013 If the result should be an instance of Table, otherwise a\n    list will be returned. (defaults to True)\n  * **multiple** \u2013 Return results for one result set (default False) or multiple\n    results from all result sets (set this parameter to True)\n* **Returns:**\n  list of results\n\nExample:\n\n```robotframework\n@{params}     Create List   FirstParam   SecondParam   ThirdParam\n@{results}    Call Stored Procedure   mystpr  ${params}\n```\n\n#### connect_to_database(module_name: str | None = None, database: str | None = None, username: str | None = None, password: str | None = None, host: str | None = None, port: int | None = None, charset: str | None = None, config_file: str | None = 'db.cfg', autocommit: bool | None = False) \u2192 None\n\nConnect to database using DB API 2.0 module.\n\n**Note.** The SSL support had been added for mysql\nmodule in rpaframework==17.7.0. The extra configuration\nparameters can be given via configuration file. Extra\nparameters are:\n\n- ssl_ca\n- ssl_cert\n- ssl_key\n- client_flags\n\nExample configuration file:\n\n```ini\n[default]\nhost=hostname.mysql.database.azure.com\nport=3306\nusername=username@hostname\ndatabase=databasename\nclient_flags=SSL,FOUND_ROWS\nssl_ca=DigiCertGlobalRootG2.crt.pem\n```\n\n* **Parameters:**\n  * **module_name** \u2013 database module to use\n  * **database** \u2013 name of the database\n  * **username** \u2013 of the user accessing the database\n  * **password** \u2013 of the user accessing the database\n  * **host** \u2013 SQL server address\n  * **port** \u2013 SQL server port\n  * **charset** \u2013 for example, \u201cutf-8\u201d, defaults to None\n  * **config_file** \u2013 location of configuration file, defaults to \u201cdb.cfg\u201d\n  * **autocommit** \u2013 set autocommit value for connect\n\nExample:\n\n```robotframework\nConnect To Database  pymysql  database  username  password  host  port\nConnect To Database  ${CURDIR}${/}resources${/}dbconfig.cfg\n\n${secrets}=    Get Secret    azuredb\nConnect To Database\n...    mysql.connector\n...    password=${secrets}[password]\n...    config_file=${CURDIR}${/}azure.cfg\n```\n\n#### description(table: str) \u2192 list\n\nGet description of the SQL table\n\n* **Parameters:**\n  **table** \u2013 name of the SQL table\n* **Returns:**\n  database descripton as a list\n\nExample:\n\n```robotframework\nConnect To Database    pymysql  mydb  user  pass  127.0.0.1\n${db_description}      Description  mytable\n```\n\n#### disconnect_from_database() \u2192 None\n\nClose connection to SQL database\n\nExample:\n\n```robotframework\nConnect To Database    pymysql  mydb  user  pass  127.0.0.1\n${result}              Query   Select firstname, lastname FROM table\nDisconnect From Database\n```\n\n#### execute_sql_script(filename: str, sanstran: bool | None = False, encoding: str | None = 'utf-8') \u2192 None\n\nExecute content of SQL script as SQL commands.\n\n* **Parameters:**\n  * **filename** \u2013 filepath to SQL script to execute\n  * **sanstran** \u2013 Run the query without an implicit transaction commit or\n    rollback if such additional action was detected. (turned off by default)\n  * **encoding** \u2013 character encoding of file (utf-8 by default)\n\nExample:\n\n```robotframework\nExecute SQL Script   script.sql\n```\n\n#### get_number_of_rows(table: str, conditions: str | None = None) \u2192 int\n\nGet number of rows in a table. Conditions can be given\nas arguments for WHERE clause.\n\n* **Parameters:**\n  * **table** \u2013 name of the SQL table\n  * **conditions** \u2013 restrictions for selections, defaults to None\n* **Returns:**\n  number or rows\n\nExample:\n\n```robotframework\n${count}   Get Number Of Rows  tablename\n${count}   Get Number Of Rows  tablename  column1=5 and column2='x'\n```\n\n#### get_rows(table, columns: str | None = None, conditions: str | None = None, as_table: bool | None = True) \u2192 List | Dict | Table | Any\n\nGet rows from table. Columns and conditions can be\nset to filter result.\n\n* **Parameters:**\n  * **table** \u2013 name of the SQL table\n  * **columns** \u2013 name of columns to return, defaults to None\n    means that all columns are returned\n  * **conditions** \u2013 limiting result by WHERE clause, defaults to None\n  * **as_table** \u2013 if result should be instance of `Table`, defaults to True\n    False means that return type would be list\n* **Returns:**\n  table or list based on param as_table arguement\n\nExample:\n\n```robotframework\n@{res}   Get Rows  tablename  arvo\n@{res}   Get Rows  tablename  arvo  columns=id,name\n@{res}   Get Rows  tablename  columns=id  conditions=column1='newvalue'\n@{res}   Get Rows  tablename  conditions=column2='updatedvalue'\n```\n\n#### query(statement: str, assertion: str | None = None, sanstran: bool | None = False, as_table: bool | None = True, returning: bool | None = None, data: Dict | Tuple | None = None) \u2192 List | Dict | Table | Any\n\nExecute a SQL query and optionally return the execution result.\n\nSecurity Warning: In order to safely include untrusted data in SQL queries\nit is advisable to use parameterized queries. For more information about\nformatting for specific databases, please see [https://bobby-tables.com/python](https://bobby-tables.com/python)\n\n* **Parameters:**\n  * **statement** \u2013 SQL statement to execute.\n  * **assertion** \u2013 Assert on query result, row_count or columns.\n    Works only for SELECT statements. (defaults to None)\n  * **sanstran** \u2013 Run the query without an implicit transaction commit or\n    rollback if such additional action was detected and this is set to True.\n    (turned off by default, meaning that *commit* is performed on successful\n    queries and *rollback* on failing ones automatically)\n  * **as_table** \u2013 If the result should be an instance of Table, otherwise a\n    list will be returned. (defaults to True)\n  * **returning** \u2013 Set this to True if you want to have rows explicitly\n    returned (instead of the query result), False otherwise. (by default a\n    heuristic detects if it should return or not)\n  * **data** \u2013 The data to use if the SQL statement is parameterized\n* **Returns:**\n  Fetched rows when returning is True or if the heuristic decides\n  that the statement should return (raw rows or as Table if as_table is\n  True), otherwise the object produced by the execution is returned.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Database\n\n*** Tasks ***\nSelect Values From Table\n    @{rows} =    Query   SELECT id,value FROM table\n    FOR  ${row}  IN  @{rows}\n        Log   ${row}\n    END\n    @{res} =    Query   Select * FROM table   row_count > ${EXPECTED}\n    @{res} =    Query   Select * FROM table   'value' in columns\n    @{res} =    Query   Select * FROM table   columns == ['id', 'value']\n    @{res} =    Query   Select * FROM table WHERE value = ?  data=(\"${d}\", )\n    # Calling Stored Procedure with Query keyword requires that parameter\n    # 'returning' is set to 'True'\n    @{res} =    Query   Exec stored_procedure  returning=True\n```\n\n**Python**\n\n```python\nfrom RPA.Database import Database\n\nlib = Database()\n\ndef insert_and_return_names():\n    lib.connect_to_database(\"sqlite3\", \"sqlite.db\")\n    lib.query(\"DROP TABLE IF EXISTS orders;\")\n    lib.query(\"CREATE TABLE orders(id INTEGER PRIMARY KEY, name TEXT);\")\n    data1 = \"my-1st-order\"\n    data2 = \"my-2nd-order\"\n    lib.query(\n        'INSERT INTO orders(id, name) VALUES(1, ?), (2, ?);',\n        data=(data1, data2)\n    )\n    rows = lib.query(\n        'SELECT * FROM orders'\n    )\n    print([row[\"name\"] for row in rows])  # ['my-1st-order', 'my-2nd-order']\n```\n\n#### set_auto_commit(autocommit: bool = True) \u2192 None\n\nSet database auto commit mode.\n\n* **Parameters:**\n  **autocommit** \u2013 boolean value for auto commit, defaults to True\n\nExample:\n\n```robotframework\nSet Auto Commit             # auto commit is set on\nSet Auto Commit   False     # auto commit is turned off\n```\n"
  },
  {
    "module": "RPA.Desktop.Desktop",
    "markdown": "# Python API\n\n## Desktop\n\n### *class* RPA.Desktop.Desktop(locators_path: str | None = None)\n\nDesktop is a cross-platform library for navigating and interacting with\ndesktop environments. It can be used to automate applications through\nthe same interfaces that are available to human users.\n\nThe library includes the following features:\n\n- Mouse and keyboard input emulation\n- Starting and stopping applications\n- Finding elements through image template matching\n- Scraping text from given regions\n- Taking screenshots\n- Clipboard management\n\n#### WARNING\nWindows element selectors are not currently supported, and require the use of `RPA.Desktop.Windows`\n\n**Installation**\n\nThe basic features such as mouse and keyboard input and application\ncontrol work with a default `rpaframework` install.\n\nAdvanced computer-vision features such as image template matching and\nOCR require an additional library called `rpaframework-recognition`.\n\nThe dependency should be added separately by specifing it in your *conda.yaml*\nas `rpaframework-recognition==5.0.1` for example. If installing recognition\nthrough `pip` instead of `conda`, the OCR feature also requires `tesseract`.\n\n**Locating elements**\n\nTo automate actions on the desktop, a robot needs to interact with various\ngraphical elements such as buttons or input fields. The locations of these\nelements can be found using a feature called locators.\n\nA locator describes the properties or features of an element. This information\ncan be later used to locate similar elements even when window positions or\nstates change.\n\nThe currently supported locator types are:\n\n| Name   | Arguments                                        | Description                                                    |\n|--------|--------------------------------------------------|----------------------------------------------------------------|\n| alias  | name (str)                                       | A custom named locator from the locator database, the default. |\n| image  | path (str)                                       | Image of an element that is matched to current screen content. |\n| point  | x (int), y (int)                                 | Pixel coordinates as absolute position.                        |\n| offset | x (int), y (int)                                 | Pixel coordinates relative to current mouse position.          |\n| size   | width (int), height (int)                        | Region of fixed size, around point or screen top-left          |\n| region | left (int), top (int), right (int), bottom (int) | Bounding coordinates for a rectangular region.                 |\n| ocr    | text (str), confidence (float, optional)         | Text to find from the current screen.                          |\n\nA locator is defined by its type and arguments, divided by a colon.\nSome example usages are shown below. Note that the prefix for `alias` can\nbe omitted as its the default type.\n\n```robotframework\nClick       point:50,100\nClick       region:20,20,100,30\n\nMove mouse  image:%{ROBOT_ROOT}/logo.png\nMove mouse  offset:200,0\nClick\n\nClick       alias:SpareBin.Login\nClick       SpareBin.Login\n\nClick       ocr:\"Create New Account\"\n```\n\nYou can also pass internal `region` objects as locators:\n\n```robotframework\n${region}=  Find Element  ocr:\"Customer name\"\nClick       ${region}\n```\n\n**Locator chaining**\n\nOften it is not enough to have one locator, but instead an element\nis defined through a relationship of various locators. For this use\ncase the library supports a special syntax, which we will call\nlocator chaining.\n\nAn example of chaining:\n\n```robotframework\n# Read text from area on the right side of logo\nRead text    image:logo.png + offset:600,0 + size:400,200\n```\n\nThe supported operators are:\n\n| Operator   | Description                               |\n|------------|-------------------------------------------|\n| then, +    | Base locator relative to the previous one |\n| and, &&, & | Both locators should be found             |\n| or, ||, |  | Either of the locators should be found    |\n| not, !     | The locator should not be found           |\n\nFurther examples:\n\n```robotframework\n# Click below either label\nClick    (image:name.png or image:email.png) then offset:0,300\n\n# Wait until dialog disappears\nWait for element    not image:cookie.png\n```\n\n**Named locators**\n\nThe library supports storing locators in a database, which contains\nall of the required fields and various bits of metadata. This enables\nhaving one source of truth, which can be updated if a website\u2019s or applications\u2019s\nUI changes. Robot Framework scripts can then only contain a reference\nto a stored locator by name.\n\nThe main way to create named locators is with [VSCode](https://robocorp.com/docs/developer-tools/visual-studio-code/overview).\n\nRead more on identifying elements and crafting locators:\n\n- [Desktop automation and RPA](https://robocorp.com/docs-robot-framework/development-guide/desktop)\n- [How to find user interface elements using locators and keyboard shortcuts in Windows applications](https://robocorp.com/docs-robot-framework/development-guide/desktop/how-to-find-user-interface-elements-using-locators-and-keyboard-shortcuts-in-windows-applications)\n\n**Keyboard and mouse**\n\nKeyboard keywords can emulate typing text, but also pressing various function keys.\nThe name of a key is case-insensitive and spaces will be converted to underscores,\ni.e. the key `Page Down` and `page_down` are equivalent.\n\nThe following function keys are supported:\n\n| Key          | Description                                                                       |\n|--------------|-----------------------------------------------------------------------------------|\n| shift        | A generic Shift key. This is a modifier.                                          |\n| shift_l      | The left Shift key. This is a modifier.                                           |\n| shift_r      | The right Shift key. This is a modifier.                                          |\n| ctrl         | A generic Ctrl key. This is a modifier.                                           |\n| ctrl_l       | he left Ctrl key. This is a modifier.                                             |\n| ctrl_r       | The right Ctrl key. This is a modifier.                                           |\n| alt          | A generic Alt key. This is a modifier.                                            |\n| alt_l        | The left Alt key. This is a modifier.                                             |\n| alt_r        | The right Alt key. This is a modifier.                                            |\n| alt_gr       | The AltGr key. This is a modifier.                                                |\n| cmd          | A generic command button (Windows / Command / Super key). This may be a modifier. |\n| cmd_l        | The left command button (Windows / Command / Super key). This may be a modifier.  |\n| cmd_r        | The right command button (Windows / Command / Super key). This may be a modifier. |\n| up           | An up arrow key.                                                                  |\n| down         | A down arrow key.                                                                 |\n| left         | A left arrow key.                                                                 |\n| right        | A right arrow key.                                                                |\n| enter        | The Enter or Return key.                                                          |\n| space        | The Space key.                                                                    |\n| tab          | The Tab key.                                                                      |\n| backspace    | The Backspace key.                                                                |\n| delete       | The Delete key.                                                                   |\n| esc          | The Esc key.                                                                      |\n| home         | The Home key.                                                                     |\n| end          | The End key.                                                                      |\n| page_down    | The Page Down key.                                                                |\n| page_up      | The Page Up key.                                                                  |\n| caps_lock    | The Caps Lock key.                                                                |\n| f1 to f20    | The function keys.                                                                |\n| insert       | The Insert key. This may be undefined for some platforms.                         |\n| menu         | The Menu key. This may be undefined for some platforms.                           |\n| num_lock     | The Num Lock key. This may be undefined for some platforms.                       |\n| pause        | The Pause / Break key. This may be undefined for some platforms.                  |\n| print_screen | The Print Screen key. This may be undefined for some platforms.                   |\n| scroll_lock  | The Scroll Lock key. This may be undefined for some platforms.                    |\n\nWhen controlling the mouse, there are different types of actions that can be\ndone. Same formatting rules as function keys apply. They are as follows:\n\n| Action       | Description                         |\n|--------------|-------------------------------------|\n| click        | Click with left mouse button        |\n| left_click   | Click with left mouse button        |\n| double_click | Double click with left mouse button |\n| triple_click | Triple click with left mouse button |\n| right_click  | Click with right mouse button       |\n\nThe supported mouse button types are `left`, `right`, and `middle`.\n\n**Examples**\n\nBoth Robot Framework and Python examples follow.\n\nThe library must be imported first.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Desktop\n```\n\n```python\nfrom RPA.Desktop import Desktop\ndesktop = Desktop()\n```\n\nThe library can open applications and interact with them through\nkeyboard and mouse events.\n\n```robotframework\n*** Keywords ***\nWrite entry in accounting\n    [Arguments]    ${entry}\n    Open application    erp_client.exe\n    Click         image:%{ROBOT_ROOT}/images/create.png\n    Type text     ${entry}\n    Press keys    ctrl    s\n    Press keys    enter\n```\n\n```python\ndef write_entry_in_accounting(entry):\n    desktop.open_application(\"erp_client.exe\")\n    desktop.click(f\"image:{ROBOT_ROOT}/images/create.png\")\n    desktop.type_text(entry)\n    desktop.press_keys(\"ctrl\", \"s\")\n    desktop.press_keys(\"enter\")\n```\n\nTargeting can be currently done using coordinates (absolute or relative),\nbut using template matching is preferred.\n\n```robotframework\n*** Keywords ***\nWrite to field\n    [Arguments]  ${text}\n    Move mouse   image:input_label.png\n    Move mouse   offset:200,0\n    Click\n    Type text    ${text}\n    Press keys   enter\n```\n\n```python\ndef write_to_field(text):\n    desktop.move_mouse(\"image:input_label.png\")\n    desktop.move_mouse(\"offset:200,0\")\n    desktop.click()\n    desktop.type_text(text)\n    desktop.press_keys(\"enter\")\n```\n\nElements can be found by text too.\n\n```robotframework\n*** Keywords ***\nClick New\n    Click       ocr:New\n```\n\n```python\ndef click_new():\n    desktop.click('ocr:\"New\"')\n```\n\nIt is recommended to wait for the elements to be visible before\ntrying any interaction. You can also pass `region` objects as locators.\n\n```robotframework\n*** Keywords ***\nClick New\n    ${region}=  Wait For element  ocr:New\n    Click       ${region}\n```\n\n```python\ndef click_new():\n    region = desktop.wait_for_element(\"ocr:New\")\n    desktop.click(region)\n```\n\nAnother way to find elements by offsetting from an anchor:\n\n```robotframework\n*** Keywords ***\nType Notes\n    [Arguments]        ${text}\n    Click With Offset  ocr:Notes  500  0\n    Type Text          ${text}\n```\n\n```python\ndef type_notes(text):\n    desktop.click_with_offset(\"ocr:Notes\", 500, 0)\n    desktop.type_text(text)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_library_components(library_components: List, translation: dict | None = None, translated_kw_names: list | None = None)\n\n#### clear_clipboard() \u2192 None\n\nClear the system clipboard.\n\n#### click(locator: str | Locator | None = None, action: Action = Action.click) \u2192 None\n\nClick at the element indicated by locator.\n\n* **Parameters:**\n  * **locator** \u2013 Locator for click position\n  * **action** \u2013 Click action, e.g. right click\n\nExample:\n\n```robotframework\nClick\nClick    LoginForm.Button\nClick    coordinates:500,200    triple click\n```\n\n#### click_with_offset(locator: str | Locator | None = None, x: int = 0, y: int = 0, action: Action = Action.click) \u2192 None\n\nClick at a given pixel offset from the given locator.\n\n* **Parameters:**\n  * **locator** \u2013 Locator for click start position\n  * **x** \u2013 Click horizontal offset in pixels\n  * **y** \u2013 Click vertical offset in pixels\n  * **action** \u2013 Click action, e.g. right click\n\nExample:\n\n```robotframework\nClick with offset    Robocorp.Logo    y=400\n```\n\n#### close_all_applications() \u2192 None\n\nClose all opened applications.\n\nExample:\n\n```robotframework\nOpen file    order1.docx\nOpen file    order2.docx\nOpen file    order3.docx\n# Do something with Word\nClose all applications\n```\n\n#### close_application(app: Application) \u2192 None\n\nClose given application. Needs to be started\nwith this library.\n\n* **Parameters:**\n  **app** \u2013 App instance\n\nExample:\n\n```robotframework\n# Open a file with a default application\n${word}=    Open file    template.docx\n# Do something with Word\nClose application    ${word}\n\n# Open a an application with a specific executable\n${ie}=    Open application    iexplore.exe\n# Do something with IE\nClose application    ${ie}\n```\n\n#### copy_to_clipboard(locator: str | Locator) \u2192 str\n\nRead value to system clipboard from given input element.\n\n* **Parameters:**\n  **locator** \u2013 Locator for element\n* **Returns:**\n  Current clipboard value\n\nExample:\n\n```robotframework\n${value}=    Copy to clipboard    ResultPage.Counter\nLog    Copied text: ${value}\n```\n\n#### define_region(left: int, top: int, right: int, bottom: int) \u2192 Region\n\nReturn a new `Region` with the given dimensions.\n\n* **Parameters:**\n  * **left** \u2013 Left edge coordinate.\n  * **top** \u2013 Top edge coordinate.\n  * **right** \u2013 Right edge coordinate.\n  * **bottom** \u2013 Bottom edge coordinate.\n\nUsage examples:\n\n```robotframework\n${region}=  Define Region  10  10  50  30\n```\n\n```python\nregion = desktop.define_region(10, 10, 50, 30)\n```\n\n#### drag_and_drop(source: str | Locator, destination: str | Locator, start_delay: float = 2.0, end_delay: float = 0.5) \u2192 None\n\nDrag mouse from source to destination while holding the left mouse button.\n\n* **Parameters:**\n  * **source** \u2013 Locator for start position\n  * **destination** \u2013 Locator for destination position\n  * **start_delay** \u2013 Delay in seconds after pressing down mouse button\n  * **end_delay** \u2013 Delay in seconds before releasing mouse button\n\n#### find_element(locator: str | Locator) \u2192 Point | Region | Undefined\n\nFind an element defined by locator, and return its position.\nRaises `ElementNotFound` if\\` no matches were found, or\n`MultipleElementsFound` if there were multiple matches.\n\n* **Parameters:**\n  **locator** \u2013 Locator string\n\nExample:\n\n```robotframework\n${match}=    Find element    image:logo.png\nLog    Found logo at ${match.right}, ${match.top}\n```\n\n#### find_elements(locator: str | Locator) \u2192 List[Point | Region | Undefined]\n\nFind all elements defined by locator, and return their positions.\n\n* **Parameters:**\n  **locator** \u2013 Locator string\n\nExample:\n\n```robotframework\n${matches}=    Find elements    image:icon.png\nFOR    ${match}  IN  @{matches}\n    Log    Found icon at ${match.right}, ${match.top}\nEND\n```\n\n#### get_clipboard_value() \u2192 str\n\nRead current value from system clipboard.\n\nExample:\n\n```robotframework\nCopy to clipboard       coordinates:401,198\n${text}=    Get clipboard value\nLog    We just copied '${text}'\n```\n\n#### get_display_dimensions() \u2192 Region\n\nReturns the dimensions of the current virtual display,\nwhich is the combined size of all physical monitors.\n\n#### get_keyword_arguments(name)\n\n#### get_keyword_documentation(name)\n\n#### get_keyword_names()\n\n#### get_keyword_source(keyword_name)\n\n#### get_keyword_tags(name)\n\n#### get_keyword_types(name)\n\n#### get_mouse_position() \u2192 Point\n\nGet current mouse position in pixel coordinates.\n\nExample:\n\n```robotframework\n${position}=    Get mouse position\nLog    Current mouse position is ${position.x}, ${position.y}\n```\n\n#### highlight_elements(locator: str | Locator)\n\nDraw an outline around all matching elements.\n\n#### move_mouse(locator: str | Locator) \u2192 None\n\nMove mouse to given coordinates.\n\n* **Parameters:**\n  **locator** \u2013 Locator for mouse position\n\nExample:\n\n```robotframework\nMove mouse    Robocorp.Logo\nMove mouse    offset:0,400\n```\n\n#### move_region(region: Region, left: int, top: int) \u2192 Region\n\nReturn a new `Region` with an offset from the given region.\n\n* **Parameters:**\n  * **region** \u2013 The region to move.\n  * **left** \u2013 Amount of pixels to move left/right.\n  * **top** \u2013 Amount of pixels to move up/down.\n\nUsage examples:\n\n```robotframework\n${region}=          Find Element  ocr:\"Net Assets\"\n${moved_region}=    Move Region  ${region}  500  0\n```\n\n```python\nregion = desktop.find_element('ocr:\"Net Assets\"')\nmoved_region = desktop.move_region(region, 500, 0)\n```\n\n#### open_application(name_or_path: str, \\*args) \u2192 Application\n\nStart a given application by name (if in PATH),\nor by path to executable.\n\n* **Parameters:**\n  * **name_or_path** \u2013 Name or path of application\n  * **args** \u2013 Command line arguments for application\n* **Returns:**\n  Application instance\n\nExample:\n\n```robotframework\nOpen application    notepad.exe\nOpen application    c:\\path\\to\\program.exe    --example-argument\n```\n\n#### open_file(path: str) \u2192 Application\n\nOpen a file with the default application.\n\n* **Parameters:**\n  **path** \u2013 Path to file\n\nExample:\n\n```robotframework\nOpen file    orders.xlsx\n```\n\n#### paste_from_clipboard(locator: str | Locator) \u2192 None\n\nPaste value from system clipboard into given element.\n\n* **Parameters:**\n  **locator** \u2013 Locator for element\n\nExample:\n\n```robotframework\nCopy to clipboard       coordinates:401,198\nPaste from clipboard    coordinates:822,710\n```\n\n#### press_keys(\\*keys: str) \u2192 None\n\nPress multiple keys down simultaneously.\n\n* **Parameters:**\n  **keys** \u2013 Keys to press\n\nExample:\n\n```robotframework\nPress keys    ctrl  alt  delete\n\nPress keys    ctrl  a\nPress keys    ctrl  c\n${all_text}=  Get clipboard value\nLog    Text box content was: ${all_text}\n```\n\n#### press_mouse_button(button: Any = 'left') \u2192 None\n\nPress down mouse button and keep it pressed.\n\n#### read_text(locator: str | None = None, invert: bool = False, language: str | None = None, configuration: str | None = None)\n\nRead text using OCR from the screen, or an area of the\nscreen defined by the given locator.\n\n* **Parameters:**\n  * **locator** \u2013 Location of element to read text from\n  * **invert** \u2013 Invert image colors, useful for reading white text\n    on dark background\n  * **language** \u2013 3-character ISO 639-2 language code of the text.\n    This is passed directly to the pytesseract lib in the lang parameter.\n    See [https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html#using-one-language](https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html#using-one-language)\n  * **configuration** \u2013 Tesseract specific parameters like Page Segmentation\n    Modes(psm) or OCR Engine Mode (oem). This is passed directly to the\n    pytesseract lib in the config parameter.\n    See [https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html](https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html)\n\nUsage examples:\n\n```robotframework\n${label_region}=  Find Element  image:label.png\n${value_region}=  Move Region   ${label_region}  100  0\n${text}=          Read Text     ${value_region}\n```\n\n```python\nlabel_region = desktop.find_element(\"image:label.png\")\nvalue_region = desktop.move_region(label_region, 100, 0)\ntext = desktop.read_text(value_region)\n```\n\n#### release_mouse_button(button: Any = 'left') \u2192 None\n\nRelease mouse button that was previously pressed.\n\n#### resize_region(region: Region, left: int = 0, top: int = 0, right: int = 0, bottom: int = 0) \u2192 Region\n\nReturn a resized new `Region` from a given region.\n\nExtends edges the given amount outward from the center,\ni.e. positive left values move the left edge to the left.\n\n* **Parameters:**\n  * **region** \u2013 The region to resize.\n  * **left** \u2013 Amount of pixels to resize left edge.\n  * **top** \u2013 Amount of pixels to resize top edge.\n  * **right** \u2013 Amount of pixels to resize right edge.\n  * **bottom** \u2013 Amount of pixels to resize bottom edge.\n\nUsage examples:\n\n```robotframework\n${region}=          Find Element  ocr:\"Net Assets\"\n${resized_region}=  Resize Region  ${region}  bottom=10\n```\n\n```python\nregion = desktop.find_element('ocr:\"Net Assets\"')\nresized_region = desktop.resize_region(region, bottom=10)\n```\n\n#### run_keyword(name, args, kwargs=None)\n\n#### set_clipboard_value(text: str) \u2192 None\n\nWrite given value to system clipboard.\n\nExample:\n\n```robotframework\nSet clipboard value     This is some text.\nPaste from clipboard    coordinates:822,710\n```\n\n#### set_default_confidence(confidence: float | None = None)\n\nSet the default template matching confidence.\n\n* **Parameters:**\n  **confidence** \u2013 Value from 1 to 100\n\n#### set_default_timeout(timeout: float = 3.0)\n\nSet the default time to wait for elements.\n\n* **Parameters:**\n  **timeout** \u2013 Time in seconds\n\n#### take_screenshot(path: str | None = None, locator: str | Locator | None = None, embed: bool = True) \u2192 str\n\nTake a screenshot of the whole screen, or an element\nidentified by the given locator.\n\n* **Parameters:**\n  * **path** \u2013 Path to screenshot. The string `{index}` will be replaced with\n    an index number to avoid overwriting previous screenshots.\n  * **locator** \u2013 Element to crop screenshot to\n  * **embed** \u2013 Embed screenshot into Robot Framework log\n\n#### type_text(text: str, \\*modifiers: str, enter: bool = False) \u2192 None\n\nType text one letter at a time.\n\n* **Parameters:**\n  * **text** \u2013 Text to write\n  * **modifiers** \u2013 Modifier or functions keys held during typing\n  * **enter** \u2013 Press Enter / Return key after typing text\n\nExample:\n\n```robotframework\nType text    this text will be uppercase    shift\n```\n\n#### type_text_into(locator: str | Locator, text: str, clear: bool = False, enter: bool = False) \u2192 None\n\nType text at the position indicated by given locator.\n\n* **Parameters:**\n  * **locator** \u2013 Locator of input element\n  * **text** \u2013 Text to write\n  * **clear** \u2013 Clear element before writing\n  * **enter** \u2013 Press Enter / Return key after typing text\n\nExample:\n\n```robotframework\nType text into    LoginForm.Name      Marky Mark\nType text into    LoginForm.Password  ${PASSWORD}\n```\n\n#### wait_for_element(locator: str | Locator, timeout: float | None = None, interval: float = 0.5) \u2192 Point | Region | Undefined\n\nWait for an element defined by locator to exist, or\nraise a TimeoutException if none were found within timeout.\n\n* **Parameters:**\n  **locator** \u2013 Locator string\n\nExample:\n\n```robotframework\nWait for element    alias:CookieConsent    timeout=30\nClick    image:%{ROBOT_ROOT}/accept.png\n```\n"
  },
  {
    "module": "RPA.Desktop.Clipboard.Clipboard",
    "markdown": "# Python API\n\n## Clipboard\n\n### *class* RPA.Desktop.Clipboard.Clipboard\n\n*DEPRECATED!!* Use library RPA.Desktop\u2019s clipboard functionality instead.\n\nClipboard is a library for managing clipboard - **copy** text to,\n**paste** text from, and **clear** clipboard contents.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Desktop.Clipboard\n\n*** Tasks ***\nClipping\n    Copy To Clipboard   Text from Robot to clipboard\n    ${var}=             Paste From Clipboard\n    Clear Clipboard\n```\n\n**Python**\n\n```python\nfrom RPA.Desktop.Clipboard import Clipboard\n\nclip = Clipboard()\nclip.copy_to_clipboard('Text from Python to clipboard')\ntext = clip.paste_from_clipboard()\nprint(f\"clipboard had text: '{text}'\")\nclip.clear_clipboard()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### clear_clipboard()\n\n*DEPRECATED!!* Use RPA.Desktop library\u2019s Clear Clipboard instead.\nClear clipboard contents\n\n#### copy_to_clipboard(text)\n\n*DEPRECATED!!* Use RPA.Desktop library\u2019s Copy to Clipboard instead.\n\nCopy text to clipboard\n\n* **Parameters:**\n  **text** \u2013 to copy\n\n#### paste_from_clipboard()\n\n*DEPRECATED!!* Use RPA.Desktop library\u2019s Paste from Clipboard instead.\n\n* **Returns:**\n  text\n"
  },
  {
    "module": "RPA.Desktop.OperatingSystem.OperatingSystem",
    "markdown": "# Python API\n\n## OperatingSystem\n\n### *class* RPA.Desktop.OperatingSystem.OperatingSystem\n\nOperatingSystem is a cross-platform library for managing\ncomputer properties and actions.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Desktop.OperatingSystem\n\n*** Tasks ***\nGet computer information\n    ${boot_time}=   Get Boot Time  as_datetime=${TRUE}\n    ${machine}=     Get Machine Name\n    ${username}=    Get Username\n    &{memory}=      Get Memory Stats\n    Log Many        ${memory}\n```\n\n**Python**\n\n```python\nfrom RPA.Desktop.OperatingSystem import OperatingSystem\n\ndef get_computer_information():\n    ops = OperatingSystem()\n    print(f\"Boot time    : { ops.get_boot_time(as_datetime=True) }\"\n          f\"Machine name : { ops.get_machine_name() }\"\n          f\"Username     : { ops.get_username() }\"\n          f\"Memory       : { ops.get_memory_stats() }\")\n\nif __name__ == \"__main__\":\n    get_computer_information()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### boot_time_in_seconds_from_epoch() \u2192 str\n\nGet machine boot time\n\n* **Returns:**\n  boot time in seconds from Epoch\n\nExample:\n\n```robotframework\n${epoch}  Boot Time In Seconds From Epoch\n```\n\n#### get_boot_time(as_datetime: bool = False, datetime_format: str = '%Y-%m-%d %H:%M:%S') \u2192 str\n\nGet computer boot time in seconds from Epoch or in datetime string.\n\n* **Parameters:**\n  * **as_datetime** \u2013 if True returns datetime string, otherwise seconds,\n    defaults to False\n  * **datetime_format** \u2013 datetime string format, defaults to \u201c%Y-%m-%d %H:%M:%S\u201d\n* **Returns:**\n  seconds from Epoch or datetime string\n\nExample:\n\n```robotframework\n${boottime}  Get Boot Time\n${boottime}  Get Boot Time   as_datetime=True\n${boottime}  Get Boot Time   as_datetime=True  datetime_format=%d.%m.%Y\n```\n\n#### get_machine_name() \u2192 str\n\nGet machine name\n\n* **Returns:**\n  machine name as string\n\nExample:\n\n```robotframework\n${machine}  Get Machine Name\n```\n\n#### get_memory_stats(humanized: bool = True) \u2192 dict\n\nGet computer memory stats and return those in bytes\nor in humanized memory format.\n\n* **Parameters:**\n  **humanized** \u2013 if False returns memory information in bytes, defaults to True\n* **Returns:**\n  memory information in dictionary format\n\nExample:\n\n```robotframework\n&{mem}     Get Memory Stats\n&{mem}     Get Memory Stats   humanized=False\n```\n\n#### get_username() \u2192 str\n\nGet username of logged in user\n\n* **Returns:**\n  username as string\n\nExample:\n\n```robotframework\n${user}  Get Username\n```\n\n#### kill_process(process_name: str) \u2192 bool\n\nKill process by name\n\n* **Parameters:**\n  **process_name** \u2013 name of the process\n* **Returns:**\n  True if succeeds False if not\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc  strict=False\n${status}   Kill Process    ${process.name()}\n```\n\n#### kill_process_by_pid(pid: int) \u2192 None\n\nKill process by pid\n\n* **Parameters:**\n  **pid** \u2013 process identifier\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc  strict=False\n${status}   Kill Process By PID   ${process.pid}\n```\n\n#### process_exists(process_name: str, strict: bool = True) \u2192 Any\n\nCheck if process exists by its name\n\n* **Parameters:**\n  * **process_name** \u2013 search for this process\n  * **strict** \u2013 defines how match is made, default True\n    which means that process name needs to be exact match\n    and False does inclusive matching\n* **Returns:**\n  process instance or False\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc\n${process}  Process Exists  calc  strict=False\n```\n\n#### process_id_exists(pid: int) \u2192 Any\n\nCheck if process exists by its id\n\n* **Parameters:**\n  **pid** \u2013 process identifier\n* **Returns:**\n  process instance or False\n\nExample:\n\n```robotframework\n${process}  Process ID Exists  4567\nRun Keyword If   ${process}  Log  Process exists\n```\n\n#### put_system_to_sleep() \u2192 None\n\nPuts system to sleep mode\n\nExample:\n\n```robotframework\nPut System To Sleep\n```\n"
  },
  {
    "module": "RPA.Desktop.Windows.Windows",
    "markdown": "# Python API\n\n## Windows\n\n### *class* RPA.Desktop.Windows.Windows(backend: str = 'uia')\n\nWindows is a library for managing the Windows operating system.\n\n**DEPRECATION WARNING! USE RPA.Windows library instead.**\n\nFor Windows desktop automation Robocorp recommends the `RPA.Windows` library.\n\nNo further updates will be released for this library and new functionality will continue\nto be developed in `RPA.Windows` library.\n\n**Running Windows applications**\n\nWindows applications can be started in several ways. The library supports\nthe following keywords:\n\n- Open Application (dispatch Office applications)\n- Open File (open the file as process which opens the associated application)\n- Open Executable (uses pywinauto start)\n- Open Using Run Dialog (uses Windows run dialog)\n- Open From Search (uses Windows search dialog)\n\n**Locators**\n\nLocator is used to identify the element for interaction - usually for a mouse click.\n\nLocators can investigated for application once it has been opened by calling\nthe keyword get_windows_elements which can store locator information into JSON file\nand screenshot of the element into an image file.\n\n**Identifying locator**\n\nThe element needs to be identified by a unique method, for example, \u201cThree\u201d for button 3\nin the Calculator application. It can be given either as Three or name:Three.\n\nPossible search criterias:\n\n- name\n- class (class_name)\n- type (control_type)\n- id (automation_id)\n- any if none was defined\n\nThe current method of inspecting elements on Windows is inspect.exe which is part\nof [Windows SDK](https://docs.microsoft.com/en-us/windows/win32/winauto/inspect-objects).\n\n**Keyboard**\n\nThe keyword send_keys can be used to send keys to the active window. The keyword\ntype_keys sends keys to the active window element.\n\nSpecial key codes are documented on [pywinauto](https://pywinauto.readthedocs.io/en/latest/code/pywinauto.keyboard.html#)\ndocumentation page.\n\n**FAQ**\n\n1. I see error message AttributeError: module \u2018win32com.gen_py.00020813-0000-0000-C000-000000000046x0x1x9\u2019 has no attribute \u2018CLSIDToClassMap\u2019\n\n1. From PowerShell run this command: Remove-Item -path $env:LOCALAPPDATATempgen_py -recurse\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary          RPA.Desktop.Windows\nSuite Teardown   Close all applications\n\n*** Tasks ***\nOpen Calculator using run dialog\n    ${result}=              Open using run dialog    calc.exe   Calculator\n    ${result}=              Get Window Elements\n    Send Keys               5*2=\n    ${result}=              Get element             partial name:Display is\n    Log Many                ${result}\n    ${result}=              Get element rich text   id:CalculatorResults\n    Should Be Equal As Strings  ${result}  Display is 10\n    ${result}=              Get element rectangle   partial name:Display is\n    ${result}=              Is Element Visible      CalculatorResults\n    ${result}=              Is Element Enabled      partial name:Display is\n```\n\n**Python**\n\n```python\nfrom RPA.Desktop.Windows import Windows\n\nwin = Windows()\n\ndef open_calculator():\n    win.open_from_search(\"calc.exe\", \"Calculator\")\n    elements = win.get_window_elements()\n\ndef make_calculations(expression):\n    win.send_keys(expression)\n    result = win.get_element_rich_text('id:CalculatorResults')\n    return int(result.strip('Display is '))\n\nif __name__ == \"__main__\":\n    open_calculator()\n    exp = '5*2='\n    result = make_calculations(exp)\n    print(f\"Calculation result of '{exp}' is '{result}'\")\n    win.close_all_applications()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### boot_time_in_seconds_from_epoch() \u2192 str\n\nGet machine boot time\n\n* **Returns:**\n  boot time in seconds from Epoch\n\nExample:\n\n```robotframework\n${epoch}  Boot Time In Seconds From Epoch\n```\n\n#### calculate_rectangle_center(rectangle: Any) \u2192 Any\n\nCalculate x and y center coordinates from rectangle.\n\n* **Parameters:**\n  **rectangle** \u2013 element rectangle coordinates\n* **Returns:**\n  x and y coordinates of rectangle center\n\nExample:\n\n```robotframework\nOpen Using Run Dialog   calc  Calculator\n&{rect}=        Get Element Rectangle    CalculatorResults\n${x}  ${y}=     Calculate Rectangle Center   ${rect}\n```\n\n#### click_type(x: int | None = None, y: int | None = None, click_type: str = 'click') \u2192 None\n\nMouse click on coordinates x and y.\n\nDefault click type is click meaning left\n\n* **Parameters:**\n  * **x** \u2013 horizontal coordinate for click, defaults to None\n  * **y** \u2013 vertical coordinate for click, defaults to None\n  * **click_type** \u2013 \u201cclick\u201d, \u201cright\u201d or \u201cdouble\u201d, defaults to \u201cclick\u201d\n* **Raises:**\n  **ValueError** \u2013 if coordinates are not valid\n\nExample:\n\n```robotframework\nClick Type  x=450  y=100\nClick Type  x=450  y=100  click_type=right\nClick Type  x=450  y=100  click_type=double\n```\n\n#### close_all_applications() \u2192 None\n\nClose all applications\n\nExample:\n\n```robotframework\nOpen Application   Excel\nOpen Application   Word\nOpen Executable    notepad.exe   Untitled - Notepad\nClose All Applications\n```\n\n#### connect_by_handle(handle: int, windowtitle: str | None = None, existing_app: bool = False, parse_elements: bool = True) \u2192 Any\n\nConnect to application by its handle\n\n* **Parameters:**\n  * **handle** \u2013 handle of the application\n  * **windowtitle** \u2013 name of the window, defaults to active window if None\n  * **existing_app** \u2013 set True if selecting window which library has already\n    accessed, default False\n  * **parse_elements** \u2013 set False to not to parse elements of the window,\n    default True\n\nExample:\n\n```robotframework\n${appid}  Connect By Handle  88112\n```\n\n#### connect_by_pid(app_pid: str, windowtitle: str | None = None) \u2192 Any\n\nConnect to application by its pid\n\n* **Parameters:**\n  * **app_pid** \u2013 process id of the application\n  * **windowtitle** \u2013 name of the window, defaults to active window if None\n\nExample:\n\n```robotframework\n${appid}  Connect By PID  3231\n```\n\n#### drag_and_drop(src: Any, target: Any, src_locator: str, target_locator: str | None = None, handle_ctrl_key: bool = False, drop_delay: float = 2.0, origin: str = 'middle') \u2192 None\n\nDrag elements from source and drop them on target.\n\nPlease note that if CTRL is not pressed down during drag and drop then\noperation is MOVE operation, on CTRL down the operation is COPY operation.\n\nThere will be also overwrite notification if dropping over existing files.\n\n* **Parameters:**\n  * **src** \u2013 application object or instance id\n  * **target** \u2013 application object or instance id\n  * **src_locator** \u2013 elements to move\n  * **handle_ctrl_key** \u2013 True if keyword should press CTRL down dragging\n  * **drop_delay** \u2013 how many seconds to wait until releasing mouse drop,\n    default 2.0\n* **Raises:**\n  **ValueError** \u2013 on validation errors\n\nExample:\n\n```robotframework\n${app1}=        Open Using Run Dialog    explorer.exe{VK_SPACE}C:\\workfiles\\movethese   movethese\n${app2}=        Open Using Run Dialog    wordpad.exe   Document - WordPad\nDrag And Drop   ${app1}   ${app2}   regexp:testfile_\\d.txt  name:Rich Text Window   handle_ctrl_key=${True}\nDrag And Drop   ${app1}   ${app1}   regexp:testfile_\\d.txt  name:subdir  handle_ctrl_key=${True}\n```\n\n#### find_element(locator: str, search_criteria: str | None = None) \u2192 Any\n\nFind element from window by locator and criteria.\n\n* **Parameters:**\n  * **locator** \u2013 name of the locator\n  * **search_criteria** \u2013 criteria by which element is matched\n* **Returns:**\n  list of matching elements and locators that were found on the window\n\nExample:\n\n```robotframework\n@{elements}   Find Element   CalculatorResults\nLog Many  ${elements[0]}     # list of matching elements\nLog Many  ${elements[1]}     # list of all available locators\n```\n\n#### get_app(app_id: int | None = None) \u2192 Any\n\nGet application object by id\n\nBy default returns active_application application object.\n\n* **Parameters:**\n  **app_id** \u2013 id of the application to get, defaults to None\n* **Returns:**\n  application object\n\nExample:\n\n```robotframework\n${app1}        Open Application   Excel\n&{appdetails}  Get App   ${app1}\n```\n\n#### get_boot_time(as_datetime: bool = False, datetime_format: str = '%Y-%m-%d %H:%M:%S') \u2192 str\n\nGet computer boot time in seconds from Epoch or in datetime string.\n\n* **Parameters:**\n  * **as_datetime** \u2013 if True returns datetime string, otherwise seconds,\n    defaults to False\n  * **datetime_format** \u2013 datetime string format, defaults to \u201c%Y-%m-%d %H:%M:%S\u201d\n* **Returns:**\n  seconds from Epoch or datetime string\n\nExample:\n\n```robotframework\n${boottime}  Get Boot Time\n${boottime}  Get Boot Time   as_datetime=True\n${boottime}  Get Boot Time   as_datetime=True  datetime_format=%d.%m.%Y\n```\n\n#### get_dialog_rectangle(ctrl: Any | None = None, as_dict: bool = False) \u2192 Any\n\nGet dialog rectangle coordinates\n\nIf ctrl is None then get coordinates from dialog\n\n* **Parameters:**\n  **ctrl** \u2013 name of the window control object, defaults to None\n* **Returns:**\n  coordinates: left, top, right, bottom\n\nExample:\n\n```robotframework\n${left}  ${top}  ${right}  ${bottom}=  Get Dialog Rectangle\n&{coords}  Get Dialog Rectangle  as_dict=True\nLog  top=${coords.top} left=${coords.left}\n```\n\n#### get_element(locator: str, screenshot: bool = False, open_dialog: bool = True) \u2192 Any\n\nGet element by locator.\n\n* **Parameters:**\n  * **locator** \u2013 name of the locator\n  * **screenshot** \u2013 takes element screenshot if True, defaults to False\n  * **open_dialog** \u2013 True if dialog should be reopened, default to True\n* **Returns:**\n  element if element was identified, else False\n\nExample:\n\n```robotframework\n${element}  Get Element  CalculatorResults\n${element}  Get Element  Result      screenshot=True\n```\n\n#### get_element_center(element: dict) \u2192 Any\n\nGet element center coordinates\n\n* **Parameters:**\n  **element** \u2013 dictionary of element items\n* **Returns:**\n  coordinates, x and y\n\nExample:\n\n```robotframework\n@{element}   Find Element  CalculatorResults\n${x}  ${y}=  Get Element Center  ${elements[0][0]}\n```\n\n#### get_element_rectangle(locator: str, as_dict: bool = False) \u2192 Any\n\nGet value of element rectangle attribute.\n\n* **Parameters:**\n  * **locator** \u2013 element locator\n  * **as_dict** \u2013 return values in a dictionary, default False\n* **Returns:**\n  (left, top, right, bottom) values if found, else False\n\nExample:\n\n```robotframework\n${left}  ${top}  ${right}  ${bottom}=  Get Element Rectangle  CalculatorResults\n&{coords}  Get Element Rectangle  CalculatorResults  as_dict=True\nLog  top=${coords.top} left=${coords.left}\n```\n\n#### get_element_rich_text(locator: str) \u2192 Any\n\nGet value of element rich text attribute.\n\n* **Parameters:**\n  **locator** \u2013 element locator\n* **Returns:**\n  rich_text value if found, else False\n\nExample:\n\n```robotframework\n${text}  Get Element Rich Text  CalculatorResults\n```\n\n#### get_machine_name() \u2192 str\n\nGet machine name\n\n* **Returns:**\n  machine name as string\n\nExample:\n\n```robotframework\n${machine}  Get Machine Name\n```\n\n#### get_memory_stats(humanized: bool = True) \u2192 dict\n\nGet computer memory stats and return those in bytes\nor in humanized memory format.\n\n* **Parameters:**\n  **humanized** \u2013 if False returns memory information in bytes, defaults to True\n* **Returns:**\n  memory information in dictionary format\n\nExample:\n\n```robotframework\n&{mem}     Get Memory Stats\n&{mem}     Get Memory Stats   humanized=False\n```\n\n#### get_open_applications()\n\nGet list of all open applications\n\nReturns a dictionary\n\nExample:\n\n```robotframework\n${app1}    Open Application   Excel\n${app2}    Open Executable    calc.exe  Calculator\n${app3}    Open File          /path/to/myfile.txt\n&{apps}    Get Open Applications\n```\n\n#### get_spaced_string(text)\n\nReplace spaces in a text with pywinauto.keyboard\nspace characters {VK_SPACE}\n\n* **Parameters:**\n  **text** \u2013 replace spaces in this string\n\nExample:\n\n```robotframework\n${txt}    Get Spaced String   My name is Bond\n# ${txt} = My{VK_SPACE}name{VK_SPACE}is{VK_SPACE}Bond\nSend Keys To Input  ${txt}\n```\n\n#### get_text(locator: str) \u2192 dict\n\nGet text from element\n\n* **Parameters:**\n  **locator** \u2013 element locator\n\nExample:\n\n```robotframework\nOpen Using Run Dialog  calc     Calculator\nType Into    CalculatorResults   11\nType Into    CalculatorResults   55\n&{val}       Get Text   CalculatorResults\n```\n\n#### get_username() \u2192 str\n\nGet username of logged in user\n\n* **Returns:**\n  username as string\n\nExample:\n\n```robotframework\n${user}  Get Username\n```\n\n#### get_window_elements(screenshot: bool = False, element_json: bool = False, outline: bool = False) \u2192 Any\n\nGet element information about all window dialog controls\nand their descendants.\n\n* **Parameters:**\n  * **screenshot** \u2013 save element screenshot if True, defaults to False\n  * **element_json** \u2013 save element json if True, defaults to False\n  * **outline** \u2013 highlight elements if True, defaults to False\n* **Returns:**\n  all controls and all elements\n\nExample:\n\n```robotframework\n@{elements}   Get Window Elements\nLog Many      ${elements[0]}     # list of all available locators\nLog Many      ${elements[1]}     # list of matching elements\n@{elements}   Get Window Elements  screenshot=True  element_json=True  outline=True\n```\n\n#### get_window_list()\n\nGet list of open windows\n\nWindow dictionaries contain:\n\n- automation_id\n- control_id\n- title\n- pid\n- handle\n- is_active\n- keyboard_focus\n- rectangle\n\n* **Returns:**\n  list of window dictionaries\n\nExample:\n\n```robotframework\n@{windows}    Get Window List\nFOR  ${window}  IN  @{windows}\n    Log Many  ${window}\nEND\n```\n\n#### is_element_enabled(locator: str) \u2192 bool\n\nIs element enabled.\n\n* **Parameters:**\n  **locator** \u2013 element locator\n* **Returns:**\n  True if enabled, else False\n\nExample:\n\n```robotframework\n${res}=   Is Element Enabled  CalculatorResults\n```\n\n#### is_element_matching(itemdict: dict, locator: str, criteria: str, wildcard: bool = False) \u2192 bool\n\nIs element matching. Check if locator is found in any field\nor criteria field in the window items.\n\n* **Parameters:**\n  * **itemDict** \u2013 dictionary of element items\n  * **locator** \u2013 name of the locator\n  * **criteria** \u2013 criteria on which to match element\n  * **wildcard** \u2013 whether to do reg exp match or not, default False\n* **Returns:**\n  True if element is matching locator and criteria, False if not\n\n#### is_element_visible(locator: str) \u2192 bool\n\nIs element visible.\n\n* **Parameters:**\n  **locator** \u2013 element locator\n* **Returns:**\n  True if visible, else False\n\nExample:\n\n```robotframework\n${res}=   Is Element Visible  CalculatorResults\n```\n\n#### kill_process(process_name: str) \u2192 bool\n\nKill process by name\n\n* **Parameters:**\n  **process_name** \u2013 name of the process\n* **Returns:**\n  True if succeeds False if not\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc  strict=False\n${status}   Kill Process    ${process.name()}\n```\n\n#### kill_process_by_pid(pid: int) \u2192 None\n\nKill process by pid\n\n* **Parameters:**\n  **pid** \u2013 process identifier\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc  strict=False\n${status}   Kill Process By PID   ${process.pid}\n```\n\n#### lock_screen() \u2192 None\n\nPut windows into lock mode\n\nExample:\n\n```robotframework\nLock Screen\n```\n\n#### log_in(username: str, password: str, domain: str = '.') \u2192 str\n\nLog into Windows domain with username and password.\n\n* **Parameters:**\n  * **username** \u2013 name of the user\n  * **password** \u2013 password of the user\n  * **domain** \u2013 windows domain for the user, defaults to \u201c.\u201d\n* **Returns:**\n  handle\n\nExample:\n\n```robotframework\nLog In  username=myname  password=mypassword  domain=company\n```\n\n#### menu_select(menuitem: str) \u2192 None\n\nSelect item from menu\n\n* **Parameters:**\n  **menuitem** \u2013 name of the menu item\n\nExample:\n\n```robotframework\nOpen Using Run Dialog   notepad     Untitled - Notepad\nMenu Select             File->Print\n```\n\n#### minimize_dialog(windowtitle: str | None = None) \u2192 None\n\nMinimize window by its title\n\n* **Parameters:**\n  **windowtitle** \u2013 name of the window, default None means that\n  active window is going to be minimized\n\nExample:\n\n```robotframework\nOpen Using Run Dialog  calc     Calculator\nOpen Using Run Dialog  notepad  Untitled - Notepad\nMinimize Dialog    # Current window (Notepad)\nMinimize Dialog    Calculator\n```\n\n#### mouse_click(locator: str | None = None, x: int = 0, y: int = 0, off_x: int = 0, off_y: int = 0, image: str | None = None, method: str = 'locator', ctype: str = 'click', focus: str = 'center', tolerance: int | None = None) \u2192 None\n\nMouse click locator, coordinates, or image\n\nWhen using method locator,\\`image\\` or ocr mouse is clicked by default at\ncenter coordinates.\n\nClick types are:\n\n- click normal left button mouse click\n- double\n- right\n\n* **Parameters:**\n  * **locator** \u2013 element locator on active window\n  * **x** \u2013 coordinate x on desktop\n  * **y** \u2013 coordinate y on desktop\n  * **off_x** \u2013 offset x (used for locator and image clicks)\n  * **off_y** \u2013 offset y (used for locator and image clicks)\n  * **image** \u2013 image to click on desktop\n  * **method** \u2013 one of the available methods to mouse click, default \u201clocator\u201d\n  * **ctype** \u2013 type of mouse click\n  * **focus** \u2013 default point for element click is \u2018center\u2019, can be set to \u2018topleft\u2019\n    to click top left corner of the element\n  * **tolerance** \u2013 image matching tolerance between 0 and 1\n\nExample:\n\n```robotframework\nMouse Click  method=coordinates  100   100\nMouse Click  CalculatorResults\nMouse Click  method=image  image=myimage.png  off_x=10  off_y=10  ctype=right\nMouse Click  method=image  image=myimage.png  tolerance=0.8\n${elements}  ${other}=     Find Element  class:Button\nFOR  ${element}  IN  @{elements}\n    Run Keyword If   ${element}[visible]   Mouse Click  ${element}\nEND\nMouse Click  id:TrickyCheckbox  focus=topleft\n```\n\n#### mouse_click_coords(x: int, y: int, ctype: str = 'click', delay_time: float | None = None) \u2192 None\n\nClick at coordinates on desktop\n\n* **Parameters:**\n  * **x** \u2013 horizontal coordinate on the windows to click\n  * **y** \u2013 vertical coordinate on the windows to click\n  * **ctype** \u2013 click type \u201cclick\u201d, \u201cright\u201d or \u201cdouble\u201d, defaults to \u201cclick\u201d\n  * **delay** \u2013 delay in seconds after, default is no delay\n\nExample:\n\n```robotframework\nMouse Click Coords  x=450  y=100\nMouse Click Coords  x=300  y=300  ctype=right\nMouse Click Coords  x=450  y=100  delay=5.0\n```\n\n#### mouse_click_image(template: str, off_x: int = 0, off_y: int = 0, ctype: str = 'click', tolerance: float | None = None) \u2192 None\n\nClick at template image on desktop\n\n* **Parameters:**\n  * **image** \u2013 image to click on desktop\n  * **off_x** \u2013 horizontal offset from top left corner to click on\n  * **off_y** \u2013 vertical offset from top left corner to click on\n  * **ctype** \u2013 type of mouse click\n  * **tolerance** \u2013 matching tolerance between 0 and 1\n\nExample:\n\n```robotframework\nMouse Click  image=myimage.png  off_x=10  off_y=10  ctype=right\nMouse Click  image=myimage.png  tolerance=0.8\n```\n\n#### open_application(application: str) \u2192 int\n\nOpen application by dispatch method\n\nThis keyword is used to launch Microsoft applications like\nExcel, Word, Outlook and Powerpoint.\n\n* **Parameters:**\n  **application** \u2013 name of the application as str\n* **Returns:**\n  application instance id\n\nExample:\n\n```robotframework\n${app1}    Open Application   Excel\n${app2}    Open Application   Word\n```\n\n#### open_dialog(windowtitle: str | None = None, highlight: bool = False, timeout: int = 10, existing_app: bool = False, wildcard: bool = False, parse_elements: bool = True) \u2192 Any\n\nOpen window by its title.\n\n* **Parameters:**\n  * **windowtitle** \u2013 name of the window, defaults to active window if None\n  * **highlight** \u2013 draw outline for window if True, default False\n  * **timeout** \u2013 time to wait for dialog to appear\n  * **existing_app** \u2013 set True if selecting window which library has already\n    accessed, default False\n  * **wildcard** \u2013 set True for inclusive window title search, default False\n  * **parse_elements** \u2013 set False to not to parse elements of the window,\n    default True\n\nExample:\n\n```robotframework\nOpen Dialog       Untitled - Notepad\nOpen Dialog       Untitled - Notepad   highlight=True   timeout=5\nOpen Dialog       Notepad   wildcard=True\n```\n\n#### open_executable(executable: str, windowtitle: str, backend: str | None = None, work_dir: str | None = None, wildcard: bool = False) \u2192 int\n\nOpen Windows executable. Window title name is required\nto get handle on the application.\n\n* **Parameters:**\n  * **executable** \u2013 name of the executable\n  * **windowtitle** \u2013 name of the window\n  * **backend** \u2013 set Windows backend, default None means using\n    library default value\n  * **work_dir** \u2013 path to working directory, default None\n  * **wildcard** \u2013 set True for inclusive window title search, default False\n* **Returns:**\n  application instance id\n\nExample:\n\n```robotframework\n${app1}    Open Executable   calc.exe  Calculator\n${app2}    Open Executable   notepad.exe  Notepad   wildcard=True\n```\n\n#### open_file(filename: str, windowtitle: str | None = None, wildcard: bool = False, timeout: int = 10) \u2192 int | None\n\nOpen associated application when opening file\n\nKeyword Open Dialog is used if windowtitle is given.\n\n* **Parameters:**\n  * **filename** \u2013 path to file\n  * **windowtitle** \u2013 name of the window\n  * **wildcard** \u2013 set True for inclusive window title search, default False\n  * **timeout** \u2013 time to wait for dialog to appear\n* **Returns:**\n  application id or None\n\nExample:\n\n```robotframework\n${app1}    Open File   /path/to/myfile.txt\n```\n\n#### open_from_search(executable: str, windowtitle: str, timeout: int = 10, wildcard: bool = False) \u2192 int\n\nOpen application using Windows search dialog.\nWindow title name is required to get handle on the application.\n\n* **Parameters:**\n  * **executable** \u2013 name of the executable\n  * **windowtitle** \u2013 name of the window\n  * **timeout** \u2013 time to wait for dialog to appear\n  * **wildcard** \u2013 set True for inclusive window title search, default False\n* **Returns:**\n  application instance id\n\nExample:\n\n```robotframework\n${app1}    Open From Search  calculator  Calculator\n${app2}    Open From Search  notepad  Notepad  wildcard=True\n```\n\n#### open_using_run_dialog(executable: str, windowtitle: str, timeout: int = 10, wildcard: bool = False) \u2192 int\n\nOpen application using Windows run dialog.\nWindow title name is required to get handle on the application.\n\n* **Parameters:**\n  * **executable** \u2013 name of the executable\n  * **windowtitle** \u2013 name of the window\n  * **timeout** \u2013 time to wait for dialog to appear\n  * **wildcard** \u2013 set True for inclusive window title search, default False\n* **Returns:**\n  application instance id\n\nExample:\n\n```robotframework\n${app1}    Open Using Run Dialog  notepad  Untitled - Notepad\n${app2}    Open Using Run Dialog  notepad  Notepad    wildcard=True\n```\n\n#### process_exists(process_name: str, strict: bool = True) \u2192 Any\n\nCheck if process exists by its name\n\n* **Parameters:**\n  * **process_name** \u2013 search for this process\n  * **strict** \u2013 defines how match is made, default True\n    which means that process name needs to be exact match\n    and False does inclusive matching\n* **Returns:**\n  process instance or False\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc\n${process}  Process Exists  calc  strict=False\n```\n\n#### process_id_exists(pid: int) \u2192 Any\n\nCheck if process exists by its id\n\n* **Parameters:**\n  **pid** \u2013 process identifier\n* **Returns:**\n  process instance or False\n\nExample:\n\n```robotframework\n${process}  Process ID Exists  4567\nRun Keyword If   ${process}  Log  Process exists\n```\n\n#### put_system_to_sleep() \u2192 None\n\nPut Windows into sleep mode\n\nExample:\n\n```robotframework\nPut System To Sleep\n```\n\n#### quit_application(app_id: int | None = None, send_keys: bool = False) \u2192 None\n\nQuit an application by application id or\nactive application if app_id is None.\n\n* **Parameters:**\n  * **app_id** \u2013 application_id, defaults to None\n  * **send_keys** \u2013 if ALT+F4 should be used to quit, default False\n\nExample:\n\n```robotframework\n${app1}   Open Application   Excel\n${app2}   Open Application   Word\nQuit Application  ${app1}\n```\n\n#### refresh_window()\n\nGet controls and elements for current windows.\n\nShould be called always when window content changes on\nWindows desktop.\n\n* **Returns:**\n  controls (list) and elements (list)\n\n#### restore_dialog(windowtitle: str | None = None) \u2192 None\n\nRestore window by its title\n\n* **Parameters:**\n  **windowtitle** \u2013 name of the window, default None means that\n  active window is going to be restored\n\nExample:\n\n```robotframework\nOpen Using Run Dialog  notepad  Untitled - Notepad\nMinimize Dialog\nSleep             1s\nRestore Dialog\nSleep             1s\nRestore Dialog    Untitled - Notepad\n```\n\n#### screenshot(filename: str, element: dict | None = None, ctrl: Any | None = None, desktop: bool = False, overwrite: bool = True) \u2192 None\n\nSave screenshot into filename.\n\n* **Parameters:**\n  * **filename** \u2013 name of the file\n  * **element** \u2013 take element screenshot, defaults to None\n  * **ctrl** \u2013 take control screenshot, defaults to None\n  * **desktop** \u2013 take desktop screenshot if True, defaults to False\n  * **overwrite** \u2013 overwrite existing image (deprecated, always True)\n\nExample:\n\n```robotframework\n@{element}   Find Element  CalculatorResults\nScreenshot   element.png   ${elements[0][0]}\nScreenshot   desktop.png   desktop=True\nScreenshot   desktop.png   desktop=True  overwrite=True\n```\n\n#### send_keys(keys: str) \u2192 None\n\nSend keys into active windows.\n\n* **Parameters:**\n  **keys** \u2013 list of keys to send\n\nExample:\n\n```robotframework\nOpen Executable  calc.exe  Calculator\nSend Keys        2{+}3{=}\n```\n\n#### send_keys_to_input(keys_to_type: str, with_enter: bool = True, send_delay: float = 0.5, enter_delay: float = 1.5) \u2192 None\n\nSend keys to windows and add ENTER if with_enter is True\n\nAt the end of send_keys there is by default 0.5 second delay.\nAt the end of ENTER there is by default 1.5 second delay.\n\n* **Parameters:**\n  * **keys_to_type** \u2013 keys to type into Windows\n  * **with_enter** \u2013 send ENTER if with_enter is True\n  * **send_delay** \u2013 delay after send_keys\n  * **enter_delay** \u2013 delay after ENTER\n\nExample:\n\n```robotframework\n${txt}    Get Spaced String   My name is Bond, James Bond\nSend Keys To Input  ${txt}    with_enter=False\nSend Keys To Input  {ENTER}THE   send_delay=5.0  with_enter=False\nSend Keys To Input  {VK_SPACE}-{VK_SPACE}END   enter_delay=5.0\n```\n\n#### set_automation_speed(speed: Speed = Speed.DEFAULT)\n\nSet global automation timings\n\n* **Parameters:**\n  **speed** \u2013 possible values \u2018default\u2019, \u2018fast\u2019 or \u2018slow\u2019\n\n#### set_windows_backend(backend: str) \u2192 None\n\nSet Windows backend which is used to interact with Windows\napplications\n\nAllowed values defined by SUPPORTED_BACKENDS\n\n* **Parameters:**\n  **backend** \u2013 name of the backend to use\n\nExample:\n\n```robotframework\nSet Windows Backend   uia\nOpen Executable   calc.exe  Calculator\nSet Windows Backend   win32\nOpen Executable   calc.exe  Calculator\n```\n\n#### switch_to_application(app_id: int) \u2192 None\n\nSwitch to application by id.\n\n* **Parameters:**\n  **app_id** \u2013 application\u2019s id\n* **Raises:**\n  **ValueError** \u2013 if application is not found by given id\n\nExample:\n\n```robotframework\n${app1}    Open Application   Excel\n${app2}    Open Application   Word\nSwitch To Application   ${app1}\n```\n\n#### type_into(locator: str, keys: str, empty_field: bool = False) \u2192 None\n\nType keys into element matched by given locator.\n\n* **Parameters:**\n  * **locator** \u2013 element locator\n  * **keys** \u2013 list of keys to type\n  * **empty_field** \u2013 if field should be emptied before typing, default False\n\nExample:\n\n```robotframework\nOpen Executable  calc.exe  Calculator\nType Into        CalculatorResults  11\nType Into        CalculatorResults  22  empty_field=True\n```\n\n#### type_keys(keys: str) \u2192 None\n\nType keys into active window element.\n\n* **Parameters:**\n  **keys** \u2013 list of keys to type\n\nExample:\n\n```robotframework\nOpen Executable  notepad.exe  Untitled - Notepad\nType Keys   My text\n```\n\n#### wait_for_element(locator: str, use_refreshing: bool = False, search_criteria: str | None = None, timeout: float = 30.0, interval: float = 2.0) \u2192 Any\n\nWait for element to appear into the window.\n\nCan return 1 or more elements matching locator, or raises\nElementNotFoundError if element is not found within timeout.\n\n* **Parameters:**\n  * **locator** \u2013 name of the locator\n  * **use_refreshing** \u2013 wait for element(s) which are not there yet e.g. listbox\n    item or popups, default False\n  * **search_criteria** \u2013 criteria by which element is matched\n  * **timeout** \u2013 defines how long to wait for element to appear,\n    defaults to 30.0 seconds\n  * **interval** \u2013 how often to poll for element,\n    defaults to 2.0 seconds (minimum is 0.5 seconds)\n\nExample:\n\n```robotframework\n@{elements}  Wait For Element  CalculatorResults\n@{elements}  Wait For Element  Results   timeout=10  interval=1.5\n```\n"
  },
  {
    "module": "RPA.DocumentAI.DocumentAI.DocumentAI",
    "markdown": "# Python API\n\n## DocumentAI\n\n### *class* RPA.DocumentAI.DocumentAI.DocumentAI\n\nWrapper library offering generic keywords for initializing, scanning and\nretrieving results as fields from documents (PDF, PNG etc.).\n\nLibrary requires at the minimum rpaframework version **19.0.0**.\n\nThis is a helper facade for the following libraries:\n\n- RPA.Cloud.Google (requires rpaframework-google)\n- RPA.DocumentAI.Base64AI\n- RPA.DocumentAI.Nanonets\n\nWhere the following steps are required:\n\n1. Engine initialization: `Init Engine`\n2. Document scan: `Predict`\n3. Result retrieval: `Get Result`\n\nSo no matter the engine you\u2019re using, the very same keywords can be used, as only\nthe passed parameters will differ (please check the docs on each library for\nparticularities). Once initialized, you can jump between the engines with\n`Switch Engine`. Before scanning documents, you must configure the service first,\nwith a model to scan the files with and an API key for authorizing the access.\n\nSee Portal example: [https://robocorp.com/portal/robot/robocorp/example-document-ai](https://robocorp.com/portal/robot/robocorp/example-document-ai)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.DocumentAI\n\n*** Tasks ***\nScan Documents\n    Init Engine    base64ai    vault=document_ai:base64ai\n    Init Engine    nanonets    vault=document_ai:nanonets\n\n    Switch Engine   base64ai\n    Predict    invoice.png\n    ${data} =    Get Result\n    Log List    ${data}\n\n    Switch Engine   nanonets\n    Predict    invoice.png      model=858e4b37-6679-4552-9481-d5497dfc0b4a\n    ${data} =    Get Result\n    Log List    ${data}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.DocumentAI import DocumentAI, EngineName\n\nlib_docai = DocumentAI()\nlib_docai.init_engine(\n    EngineName.GOOGLE, vault=\"document_ai:serviceaccount\", region=\"eu\"\n)\nlib_docai.predict(\n    \"invoice.pdf\", model=\"df1d166771005ff4\",\n    project_id=\"complete-agency-347912\", region=\"eu\"\n)\nprint(lib_docai.get_result())\n```\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* engine *: Any*\n\n#### get_result(extended: bool = False) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None | Document\n\nRetrieve the result data previously obtained with `Predict`.\n\nThe stored raw result is usually pre-processed with a library specific keyword\nprior the return.\n\n* **Parameters:**\n  **extended** \u2013 Get all the details inside the result data. (main fields only\n  by default)\n* **Returns:**\n  Usually a list of fields detected in the document.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nScan With Base64\n    Document AI Base64\n    ${data} =    Get Result\n    Log List    ${data}\n```\n\n**Example: Python**\n\n```python\nresult = lib_docai.get_result()\nfor field in result:\n    print(field)\n```\n\n#### init_engine(name: EngineName | str, secret: str | Path | Tuple | List | Dict | None = None, vault: Dict | str | None = None, \\*\\*kwargs) \u2192 None\n\nInitialize the engine you want to scan documents with.\n\nThis is required before being able to run `Predict`. Once initialized, you\ndon\u2019t need to run this again, simply use `Switch Engine` to jump between\nthe engines. The final secret value (passed directly with secret or picked up\nautomatically from the Vault with vault) will be split into authorization\nargs and kwargs or just passed as it is to the wrapped library. Keep in mind\nthat some engines are expecting API keys where others tokens or private keys.\nAny optional keyword argument will be passed further in the wrapped library.\n\n* **Parameters:**\n  * **name** \u2013 Name of the engine.\n  * **secret** \u2013 Authenticate with a string/file/object secret directly.\n  * **vault** \u2013 Specify the Vault storage name and secret key in order to\n    authenticate. (\u2018name:key\u2019 or {name: key} formats are supported)\n\n**How secret resolution works**\n\nWhen vault is passed in, the corresponding Vault is retrieved and the value\nbelonging to specified field is returned as a secret. If a secret is used,\nthen this value is returned as it is if this isn\u2019t a path pointing to the file\nholding the value to be returned. We\u2019ll be relying on environment variables in\nthe absence of both the secret and vault.\n\nExpected secret value formats:\n\n- google: <json-service/token> (`RPA.Cloud.Google.Init Document AI`)\n- base64ai: <e-mail>,<api-key>\n  (`RPA.DocumentAI.Base64AI.Set Authorization`)\n- nanonets: <api-key> (`RPA.DocumentAI.Nanonets.Set Authorization`)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Keywords ***\nInit Base64\n    Init Engine    base64ai    vault=document_ai:base64ai\n```\n\n**Example: Python**\n\n```python\nfrom RPA.DocumentAI import DocumentAI\nfrom RPA.Robocorp.Vault import Vault\n\nlib_docai = DocumentAI()\nmail_apikey = Vault().get_secret(\"document_ai\")[\"base64ai\"]\nlib_docai.init_engine(\"base64ai\", secret=mail_apikey)\n```\n\n#### predict(location: Path | str, model: str | List[str] | None = None, \\*\\*kwargs) \u2192 None\n\nScan a document with the currently active engine and store the result\ninternally for a later retrieval.\n\nBased on the selected engine, this wraps a chain of libraries until calling a\nservice API in the end, where the passed file is analyzed. Any optional keyword\nargument will be passed further in the wrapped library. (some engines require\nmandatory parameters like project ID or region)\n\n* **Parameters:**\n  * **location** \u2013 Path to a local file or URL address of a remote one. (not all\n    engines work with URLs)\n  * **model** \u2013 Model name(s) to scan with. (some engines guess the model if\n    not specified)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nDocument AI Base64\n    [Setup]    Init Base64\n    Predict    https://site.com/path/to/invoice.png\n```\n\n**Example: Python**\n\n```python\nlib_docai.predict(\"local/path/to/invoice.png\", model=\"finance/invoice\")\n```\n\n#### *property* result *: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None | Document*\n\n#### switch_engine(name: EngineName | str) \u2192 None\n\nSwitch between already initialized engines.\n\nUse this to jump between engines when scanning with multiple of them.\n\n* **Parameters:**\n  **name** \u2013 Name of the engine to be set as active. (choose between: google, base64ai, nanonets)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nDocument AI All\n    @{engines} =    Create List     base64ai    nanonets\n    FOR    ${engine}    IN    @{engines}\n        Switch Engine    ${engine}\n        Log    Scanning with engine: ${engine}...\n        Predict    invoice.png\n        ${data} =    Get Result\n        Log List    ${data}\n    END\n```\n\n**Example: Python**\n\n```python\nlib_docai.switch_engine(\"base64ai\")\nlib_docai.predict(\"invoice.png\")\n```\n"
  },
  {
    "module": "RPA.DocumentAI.Base64AI.Base64AI",
    "markdown": "# Python API\n\n## Base64AI\n\n### *class* RPA.DocumentAI.Base64AI.Base64AI\n\nLibrary to support [Base64.ai](https://base64.ai/) service for intelligent\ndocument processing (IDP).\n\nLibrary requires at the minimum rpaframework version **19.0.0**.\n\nService supports identifying fields in the documents, which can be given to the\nservice in multiple different file formats and via URL.\n\n**Robot Framework example usage**\n\n```robotframework\n*** Settings ***\nLibrary   RPA.DocumentAI.Base64AI\nLibrary   RPA.Robocorp.Vault\n\n*** Tasks ***\nIdentify document\n    ${secrets}=   Get Secret  base64ai-auth\n    Set Authorization  ${secrets}[email-address]   ${secrets}[apikey]\n    ${results}=  Scan Document File\n    ...   ${CURDIR}${/}invoice.pdf\n    ...   model_types=finance/check/usa,finance/invoice/usa\n    # Scan response contains list of detected models in the document\n    FOR  ${result}  IN  @{results}\n        Log To Console  Model: ${result}[model]\n        Log To Console  Field keys: ${{','.join($result['fields'].keys())}}\n        Log To Console  Fields: ${result}[fields]\n        Log To Console  Text (OCR): ${result}[ocr]\n    END\n```\n\n**Python example usage**\n\n```python\nfrom RPA.DocumentAI.Base64AI import Base64AI\nfrom RPA.Robocorp.Vault import Vault\n\nsecrets = Vault().get_secret(\"base64ai-auth\")\nbaselib = Base64AI()\nbaselib.set_authorization(secrets[\"email-address\"], secrets[\"apikey\"])\nresult = baselib.scan_document_file(\n    \"invoice.pdf\",\n    model_types=\"finance/invoice,finance/check/usa\",\n)\nfor r in result:\n    print(f\"Model: {r['model']}\")\n    for key, props in r[\"fields\"].items():\n        print(f\"FIELD {key}: {props['value']}\")\n    print(f\"Text (OCR): {r['ocr']}\")\n```\n\nPortal example: [https://github.com/robocorp/example-idp-base64](https://github.com/robocorp/example-idp-base64)\n\n#### BASE_URL *= 'https://base64.ai'*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### filter_matching_signatures(match_response: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, confidence_threshold: float = 0.8, similarity_threshold: float = 0.8) \u2192 Dict[Tuple[int, Tuple[int, ...]], List[Dict[str, Any]]]\n\nGets through all the recognized signatures in the queried image and returns\nonly the ones passing the confidence & similarity thresholds.\n\nAdditionally, this keyword simplifies the original input match_response\nstructure and returns a dictionary with all the detected and accepted reference\nsignatures as keys, and lists of similar enough query signatures as values.\n\n- Each reference signature (key) is a tuple of (index, coordinates).\n- Each query signature (sub-value) is a dictionary of {index, coords,\n  similarity}.\n- The coordinates describe the bounding-box enclosing the detected signature\n  portion from the original image, as follows: (left, top, right, bottom)\n  corners.\n\nUse the original match_response object and the indexes from here if you need\nto retrieve extra details not found here (e.g. confidence score). Use the\n`Get Signature Image` to save and preview the image crop belonging to the\nsignature of choice.\n\n* **Parameters:**\n  * **match_response** \u2013 The raw JSON-like response retrieved with the\n    `Get Matching Signatures` keyword.\n  * **confidence_threshold** \u2013 The minimum accepted confidence score (0.0-1.0)\n    for a candidate to be considered a signature. (to avoid false-positives)\n  * **similarity_threshold** \u2013 The minimum accepted similarity score (0.0-1.0)\n    for a query signature to be considered an alike signature. (to discard\n    different or fraudulent signatures)\n* **Returns:**\n  A dictionary of accepted reference signatures and their similar ones\n  found in the queried image.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nMatch Signatures\n    &{matches} =   Filter Matching Signatures      ${sigs}\n    Log Dictionary    ${matches}\n```\n\n**Example: Python**\n\n```python\nmatches = lib.filter_matching_signatures(sigs)\nprint(matches)\n```\n\n#### get_fields_from_prediction_result(prediction: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None) \u2192 List\n\nHelper keyword to get found fields from a prediction result.\nFor example see `Scan Document File` or `Scan Document URL` keyword.\n\n* **Parameters:**\n  **prediction** \u2013 prediction result dictionary\n* **Returns:**\n  list of found fields\n\n#### get_matching_signatures(reference_image: Path | str, query_image: Path | str) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nReturns a list of matching signatures found from the reference into the\nqueried image.\n\nThe input images can be paths to the files or URLs.\n\nThe output JSON-like dictionary contains all the details from the API, like the\ndetected signatures in both the reference and query image and for every such\nsignature, its bounding-box geometry, confidence and similarity score.\nUse the `Filter Matching Signatures` over this value to get a simpler\nstructure.\n\n* **Parameters:**\n  * **reference_image** \u2013 The reference image (jpg/png) to check query signatures\n    against. (e.g. driving license, ID card)\n  * **query_image** \u2013 The query image containing signatures similar to the ones\n    from the reference image. (e.g. signed contract, bank check)\n* **Returns:**\n  A JSON-like dictionary revealing recognized signatures and how much\n  they resemble with each other.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nMatch Signatures\n    ${ref_image} =  Set Variable    driving-license.jpg\n    ${query_image} =  Set Variable    signed-check.png\n    ${sigs} =   Get Matching Signatures     ${ref_image}    ${query_image}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.DocumentAI.Base64AI import Base64AI\n\nlib = Base64AI()\nsigs = lib.get_matching_signatures(\n    \"driving-license.jpg\", \"signed-check.png\"\n)\n```\n\nPortal example: [https://github.com/robocorp/example-signature-match-assistant](https://github.com/robocorp/example-signature-match-assistant)\n\n#### get_signature_image(match_response: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, \\*, index: int, reference: bool = False, path: Path | str | None = None) \u2192 str\n\nRetrieves and saves locally the image cut belonging to the provided index.\n\nThe image data itself is provided with the original match_response object as\nbase64 encoded content. This utility keyword retrieves, decodes and saves it\non the local disk customized with the path parameter. By default, the\nsearched index is considered a query image, switch to the reference type by\nenabling it with the reference parameter.\n\n* **Parameters:**\n  * **match_response** \u2013 The raw JSON-like response retrieved with the\n    `Get Matching Signatures` keyword.\n  * **index** \u2013 The image ID (numeric) found along the coordinates in the output\n    of the `Filter Matching Signatures` keyword. (the list order is stable)\n  * **reference** \u2013 Set this to True if you\u2019re looking for a reference (not\n    query) image instead. (off by default)\n  * **path** \u2013 Set an explicit output path (including file name) for the locally\n    saved image. (uses the output directory as default)\n* **Returns:**\n  The image path of the locally saved file.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nMatch Signatures\n    @{ref_sigs} =   Get Dictionary Keys    ${matches}\n    @{qry_sigs} =    Get From Dictionary    ${matches}    ${ref_sigs}[${0}]\n    &{qry_sig} =    Set Variable    ${qry_sigs}[${0}]\n    ${path} =   Get Signature Image     ${sigs}     index=${qry_sig}[index]\n    Log To Console    Preview query signature image crop: ${path}\n```\n\n**Example: Python**\n\n```python\nqry_sig = list(matches.values())[0][0]\npath = lib.get_signature_image(sigs, index=qry_sig[\"index\"])\nprint(\"Preview query signature image crop: \", path)\n```\n\n#### get_user_data() \u2192 Dict\n\nGet user data including details on credits used and credits remaining\nfor the Base64 service.\n\nReturned user data contains following keys:\n\n> - givenName\n> - familyName\n> - email\n> - hasWorkEmail\n> - companyName\n> - numberOfCredits\n> - numberOfPages\n> - numberOfUploads\n> - numberOfCreditsSpentOnDocuments (visible if used)\n> - numberOfCreditsSpentOnFaceDetection (visible if used)\n> - numberOfCreditsSpentOnFaceRecognition (visible if used)\n> - hasActiveAwsContract\n> - subscriptionType\n> - subscriptionPeriod\n> - tags\n> - ccEmails\n> - status\n> - remainingCredits (calculated by the keyword)\n* **Returns:**\n  object containing details on the API user\n\nRobot Framework example:\n\n```robotframework\n${userdata}=   Get User Data\nLog To Console  I have still ${userdata}[remainingCredits] credits left\n```\n\nPython example:\n\n```python\nuserdata = baselib.get_user_data()\nprint(f\"I have still {userdata['remainingCredits']} credits left\")\n```\n\n#### scan_document_file(file_path: str, model_types: str | List[str] | None = None, mock: bool = False) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nScan a document file. Can be given a `model_types` to\nspecifically target certain models.\n\n* **Parameters:**\n  * **file_path** \u2013 filepath to the file\n  * **model_types** \u2013 single model type or list of model types\n  * **mock** \u2013 set to True to use /mock/scan endpoint instead of /scan\n* **Returns:**\n  result of the document scan\n\nRobot Framework example:\n\n```robotframework\n${results}=    Scan Document File\n...    ${CURDIR}${/}files${/}IMG_8277.jpeg\n...    model_types=finance/check/usa,finance/invoice\nFOR    ${result}    IN    @{results}\n    Log To Console    Model: ${result}[model]\n    Log To Console    Fields: ${result}[fields]\n    Log To Console    Text (OCR): ${result}[ocr]\nEND\n```\n\nPython example:\n\n```python\nresult = baselib.scan_document_file(\n    \"./files/Invoice-1120.pdf\",\n    model_types=\"finance/invoice,finance/check/usa\",\n)\nfor r in result:\n    print(f\"Model: {r['model']}\")\n    for key, val in r[\"fields\"].items():\n        print(f\"{key}: {val['value']}\")\n    print(f\"Text (OCR): {r['ocr']}\")\n```\n\n#### scan_document_url(url: str, model_types: str | List[str] | None = None, mock: bool = False) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nScan a document URL. Can be given a `model_types` to\nspecifically target certain models.\n\n* **Parameters:**\n  * **url** \u2013 valid url to a file\n  * **model_types** \u2013 single model type or list of model types\n  * **mock** \u2013 set to True to use /mock/scan endpoint instead of /scan\n* **Returns:**\n  result of the document scan\n\nRobot Framework example:\n\n```robotframework\n${results}=    Scan Document URL\n...    https://base64.ai/static/content/features/data-extraction/models//2.png\nFOR    ${result}    IN    @{results}\n    Log To Console    Model: ${result}[model]\n    Log To Console    Fields: ${result}[fields]\n    Log To Console    Text (OCR): ${result}[ocr]\nEND\n```\n\nPython example:\n\n```python\nresult = baselib.scan_document_url(\n    \"https://base64.ai/static/content/features/data-extraction/models//2.png\"\n)\nfor r in result:\n    print(f\"Model: {r['model']}\")\n    for key, props in r[\"fields\"].items():\n        print(f\"FIELD {key}: {props['value']}\")\n    print(f\"Text (OCR): {r['ocr']}\")\n```\n\n#### set_authorization(api_email: str, api_key: str) \u2192 None\n\nSet Base64 AI request headers with email and key related to API.\n\n* **Parameters:**\n  * **api_email** \u2013 email address related to the API\n  * **api_key** \u2013 key related to the API\n\nRobot Framework example:\n\n```robotframework\n${secrets}=   Get Secret  base64ai-auth\nSet Authorization    ${secrets}[email-address]    ${secrets}[apikey]\n```\n\nPython example:\n\n```python\nsecrets = Vault().get_secret(\"base64ai-auth\")\nbaselib = Base64AI()\nbaselib.set_authorization(secrets[\"email-address\"], secrets[\"apikey\"])\n```\n"
  },
  {
    "module": "RPA.DocumentAI.Nanonets.Nanonets",
    "markdown": "# Python API\n\n## Nanonets\n\n### *class* RPA.DocumentAI.Nanonets.Nanonets\n\nLibrary to support [Nanonets](https://nanonets.com/) service for intelligent document processing (IDP).\n\nLibrary requires at the minimum rpaframework version **19.0.0**.\n\nService supports identifying fields in the documents, which can be given to the\nservice in multiple different file formats and via URL.\n\n**Robot Framework example usage**\n\n```robotframework\n*** Settings ***\nLibrary   RPA.DocumentAI.Nanonets\nLibrary   RPA.Robocorp.Vault\n\n*** Tasks ***\nIdentify document\n    ${secrets}=   Get Secret  nanonets-auth\n    Set Authorization    ${secrets}[apikey]\n    ${result}=    Predict File\n    ...  ${CURDIR}${/}files${/}eckero.jpg\n    ...  ${secrets}[receipts-model-id]\n    ${fields}=    Get Fields From Prediction Result    ${result}\n    FOR    ${field}    IN    @{fields}\n        Log To Console    Label:${field}[label] Text:${field}[ocr_text]\n    END\n    ${tables}=    Get Tables From Prediction Result    ${result}\n    FOR    ${table}    IN    @{tables}\n        FOR    ${rows}    IN    ${table}[rows]\n            FOR    ${row}    IN    @{rows}\n                ${cells}=    Evaluate    [cell['text'] for cell in $row]\n                Log To Console    ROW:${{\" | \".join($cells)}}\n            END\n        END\n    END\n```\n\n**Python example usage**\n\n```python\nfrom RPA.DocumentAI.Nanonets import Nanonets\nfrom RPA.Robocorp.Vault import Vault\n\nsecrets = Vault().get_secret(\"nanonets-auth\")\nnanolib = Nanonets()\nnanolib.set_authorization(secrets[\"apikey\"])\nresult = nanolib.predict_file(file_to_scan, secrets[\"receipts-model-id\"])\nfields = nanolib.get_fields_from_prediction_result(result)\nfor field in fields:\n    print(f\"Label: {field['label']} Text: {field['ocr_text']}\")\ntables = nanolib.get_tables_from_prediction_result(result)\nfor table in tables:\n    rpatable = Tables().create_table(table[\"rows\"])\n    for row in table[\"rows\"]:\n        cells = [cell[\"text\"] for cell in row]\n        print(f\"ROW: {' | '.join(cells)}\")\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### get_all_models() \u2192 Dict\n\nGet all available models related to the API key.\n\n* **Returns:**\n  object containing available models\n\nRobot Framework example:\n\n```robotframework\n${models}=  Get All Models\nFOR  ${model}  IN  @{models}\n    Log To Console  Model ID: ${model}[model_id]\n    Log To Console  Model Type: ${model}[model_type]\nEND\n```\n\nPython example:\n\n```python\nmodels = nanolib.get_all_models()\nfor model in models:\n    print(f\"model id: {model['model_id']}\")\n    print(f\"model type: {model['model_type']}\")\n```\n\n#### get_fields_from_prediction_result(prediction: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None) \u2192 List\n\nHelper keyword to get found fields from a prediction result.\n\nFor example. see `Predict File` keyword\n\n* **Parameters:**\n  **prediction** \u2013 prediction result dictionary\n* **Returns:**\n  list of found fields\n\n#### get_tables_from_prediction_result(prediction: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None) \u2192 List\n\nHelper keyword to get found tables from a prediction result.\n\nFor another example. see `Predict File` keyword\n\n* **Parameters:**\n  **prediction** \u2013 prediction result dictionary\n* **Returns:**\n  list of found tables\n\nRobot Framework example:\n\n```robotframework\n# It is possible to create ``RPA.Tables`` compatible tables from the result\n${tables}=    Get Tables From Prediction Result    ${result}\nFOR    ${table}    IN    @{tables}\n    ${rpatable}=    Create Table    ${table}[rows]\n    FOR    ${row}    IN    @{rpatable}\n        Log To Console    ${row}\n    END\nEND\n```\n\nPython example:\n\n```python\n# It is possible to create ``RPA.Tables`` compatible tables from the result\ntables = nanolib.get_tables_from_prediction_result(result)\nfor table in tables:\n    rpatable = Tables().create_table(table[\"rows\"])\n    for row in rpatable:\n        print(row)\n```\n\n#### ocr_fulltext(filename: str, filepath: str) \u2192 List\n\nOCR fulltext a given file. Returns words and full text.\n\nFilename and filepath needs to be given separately.\n\n* **Parameters:**\n  * **filename** \u2013 name of the file\n  * **filepath** \u2013 path of the file\n* **Returns:**\n  the result in a list format\n\nRobot Framework example:\n\n```robotframework\n${results}=  OCR Fulltext\n...   invoice.pdf\n...   ${CURDIR}${/}invoice.pdf\nFOR  ${result}  IN  @{results}\n    Log To Console  Filename: ${result}[filename]\n    FOR  ${pagenum}  ${page}  IN ENUMERATE  @{result.pagedata}   start=1\n        Log To Console  Page ${pagenum} raw Text: ${page}[raw_text]\n    END\nEND\n```\n\nPython example:\n\n```python\nresults = nanolib.ocr_fulltext(\"IMG_8277.jpeg\", \"./IMG_8277.jpeg\")\nfor result in results:\n    print(f\"FILENAME: {result['filename']}\")\n    for page in result[\"page_data\"]:\n        print(f\"Page {page['page']+1}: {page['raw_text']}\")\n```\n\n#### predict_file(filepath: str, model_id: str) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nGet prediction result for a file by a given model id.\n\n* **Parameters:**\n  * **filepath** \u2013 filepath to the file\n  * **model_id** \u2013 id of the Nanonets model to categorize a file\n* **Returns:**\n  the result in a list format\n\nRobot Framework example:\n\n```robotframework\n${result}=  Predict File  ./document.pdf   ${MODEL_ID}\n${fields}=    Get Fields From Prediction Result    ${result}\nFOR    ${field}    IN    @{fields}\n    Log To Console    Label:${field}[label] Text:${field}[ocr_text]\nEND\n${tables}=    Get Tables From Prediction Result    ${result}\nFOR    ${table}    IN    @{tables}\n    FOR    ${rows}    IN    ${table}[rows]\n        FOR    ${row}    IN    @{rows}\n            ${cells}=    Evaluate    [cell['text'] for cell in $row]\n            Log To Console    ROW:${{\" | \".join($cells)}}\n        END\n    END\nEND\n```\n\nPython example:\n\n```python\nresult = nanolib.predict_file(\"./docu.pdf\", secrets[\"receipts-model-id\"])\nfields = nanolib.get_fields_from_prediction_result(result)\nfor field in fields:\n    print(f\"Label: {field['label']} Text: {field['ocr_text']}\")\ntables = nanolib.get_tables_from_prediction_result(result)\nfor table in tables:\n    for row in table[\"rows\"]:\n        cells = [cell[\"text\"] for cell in row]\n        print(f\"ROW: {' | '.join(cells)}\")\n```\n\n#### set_authorization(apikey: str) \u2192 None\n\nSet Nanonets request headers with key related to API.\n\n* **Parameters:**\n  **apikey** \u2013 key related to the API\n\nRobot Framework example:\n\n```robotframework\n${secrets}=   Get Secret  nanonets-auth\nSet Authorization    ${secrets}[apikey]\n```\n\nPython example:\n\n```python\nsecrets = Vault().get_secret(\"nanonets-auth\")\nnanolib = Nanonets()\nnanolib.set_authorization(secrets[\"apikey\"])\n```\n"
  },
  {
    "module": "RPA.Email.Exchange.Exchange",
    "markdown": "# Python API\n\n## Exchange\n\n### *class* RPA.Email.Exchange.Exchange(vault_name: str | None = None, vault_token_key: str | None = None, tenant: str | None = None)\n\nExchange is a library for sending, reading, and deleting emails.\nExchange is interfacing with Exchange Web Services (EWS).\n\nFor more information about server settings, see\n[this Microsoft support article](https://support.microsoft.com/en-us/office/server-settings-you-ll-need-from-your-email-provider-c82de912-adcc-4787-8283-45a1161f3cc3).\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Email.Exchange\n...     vault_name=email_oauth_microsoft    vault_token_key=token\n...     tenant=ztzvn.onmicrosoft.com  # your custom tenant here\nTask Setup      Ensure Auth\n\n*** Variables ***\n${ACCOUNT}              ACCOUNT_NAME\n${RECIPIENT_ADDRESS}    RECIPIENT\n${IMAGES}               myimage.png\n${ATTACHMENTS}          C:${/}files${/}mydocument.pdf\n\n*** Keywords ***\nEnsure Auth\n    ${secrets} =    Get Secret    email_oauth_microsoft\n    RPA.Email.Exchange.Authorize    ${ACCOUNT}\n    ...    is_oauth=${True}  # use the OAuth2 auth code flow (required)\n    ...    client_id=${secrets}[client_id]  # app ID\n    ...    client_secret=${secrets}[client_secret]  # app password\n    ...    token=${secrets}[token]  # token dict (access, refresh, scope etc.)\n\n*** Tasks ***\nTask of sending email\n    Send Message  recipients=${RECIPIENT_ADDRESS}\n    ...           subject=Exchange Message from RPA Robot\n    ...           body=<p>Exchange RPA Robot message body<br><img src='myimage.png'/></p>\n    ...           save=${TRUE}\n    ...           html=${TRUE}\n    ...           images=${IMAGES}\n    ...           cc=EMAIL_ADDRESS\n    ...           bcc=EMAIL_ADDRESS\n    ...           attachments=${ATTACHMENTS}\n\nTask of listing messages\n    # Attachments are saved specifically with a keyword Save Attachments\n    ${messages}=    List Messages\n    FOR    ${msg}    IN    @{messages}\n        Log Many    ${msg}\n        ${attachments}=    Run Keyword If    \"${msg}[subject]\"==\"about my orders\"\n        ...    Save Attachments\n        ...    ${msg}\n        ...    save_dir=${CURDIR}${/}savedir\n    END\n    # Using save_dir all attachments in listed messages are saved\n    ${messages}=    List Messages\n    ...    INBOX/Problems/sub1\n    ...    criterion=subject:'about my orders'\n    ...    save_dir=${CURDIR}${/}savedir2\n    FOR    ${msg}    IN    @{messages}\n        Log Many    ${msg}\n    END\n\nTask of moving messages\n    Move Messages    criterion=subject:'about my orders'\n    ...    source=INBOX/Processed Purchase Invoices/sub2\n    ...    target=INBOX/Problems/sub1\n```\n\n**Python**\n\n```python\nfrom RPA.Email.Exchange import Exchange\nfrom RPA.Robocorp.Vault import Vault\n\nvault_name = \"email_oauth_microsoft\"\nsecrets = Vault().get_secret(vault_name)\nex_account = \"ACCOUNT_NAME\"\n\nmail = Exchange(\n    vault_name=vault_name,\n    vault_token_key=\"token\",\n    tenant=\"ztzvn.onmicrosoft.com\"\n)\nmail.authorize(\n    username=ex_account,\n    is_oauth=True,\n    client_id=secrets[\"client_id\"],\n    client_secret=secrets[\"client_secret\"],\n    token=secrets[\"token\"]\n)\nmail.send_message(\n    recipients=\"RECIPIENT\",\n    subject=\"Message from RPA Python\",\n    body=\"RPA Python message body\",\n)\n```\n\n**OAuth2**\n\nThe OAuth2 flow is the only way of authorizing at the moment as Microsoft disabled\nentirely the usage of passwords, even App Passwords. And since you have to work\nwith tokens now and because this library has the capability to automatically\nrefresh an expired token, please don\u2019t forget to initialize the library with the\nfollowing parameters: vault_name, vault_token_key and tenant.\n\nLearn more on how to use the OAuth2 flow in this Portal robot\n[example-oauth-email](https://github.com/robocorp/example-oauth-email).\n\n**About criterion parameter**\n\nFollowing table shows possible criterion keys that can be used to filter emails.\nThere apply to all keywords which have `criterion` parameter.\n\n| Key               | Effective search                    |\n|-------------------|-------------------------------------|\n| subject           | subject to match                    |\n| subject_contains  | subject to contain                  |\n| body              | body to match                       |\n| body_contains     | body to contain                     |\n| sender            | sender (from) to match              |\n| sender_contains   | sender (from) to contain            |\n| before            | received time before this time      |\n| after             | received time after this time       |\n| between           | received time between start and end |\n| category          | categories to match                 |\n| category_contains | categories to contain               |\n| importance        | importance to match                 |\n\nKeys before, after and between at the moment support two\ndifferent timeformats either %d-%m-%Y %H:%M or %d-%m-%Y. These\nkeys also support special string NOW which can be used especially\ntogether with keyword `Wait for message  criterion=after:NOW`.\n\nWhen giving time which includes hours and minutes then the whole\ntime string needs to be enclosed into single quotes.\n\n```bash\nbefore:25-02-2022\nafter:NOW\nbetween:'31-12-2021 23:50 and 01-01-2022 00:10'\n```\n\nDifferent criterion keys can be combined.\n\n```bash\nsubject_contains:'new year' between:'31-12-2021 23:50 and 01-01-2022 00:10'\n```\n\nPlease **note** that all values in the criterion that contain spaces need\nto be enclosed within single quotes.\n\nIn the following example the email subject is going to matched\nonly against new not new year.\n\n```bash\nsubject_contains:new year\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### TO_PROTECT *= ['authorize', 'get_oauth_token', 'refresh_oauth_token']*\n\n#### authorize(username: str, password: str | None = None, autodiscover: bool = True, access_type: AccessType | str = AccessType.DELEGATE, server: str | None = None, primary_smtp_address: str | None = None, is_oauth: bool = False, client_id: str | None = None, client_secret: str | None = None, token: dict | None = None) \u2192 None\n\nConnect to Exchange account\n\n* **Parameters:**\n  * **username** \u2013 account username\n  * **password** \u2013 account password (can be skipped with OAuth2)\n  * **autodiscover** \u2013 use autodiscover or set it off (on by default)\n  * **access_type** \u2013 default \u201cDELEGATE\u201d, other option \u201cIMPERSONATION\u201d\n  * **server** \u2013 required for configuration setting (with autodiscover off)\n  * **primary_smtp_address** \u2013 by default set to username, but can be\n    set to be different from username\n  * **is_oauth** \u2013 use the OAuth2 authorization code flow (instead of basic auth)\n  * **client_id** \u2013 registered application ID\n  * **client_secret** \u2013 registered application secret (password)\n  * **token** \u2013 contains access and refresh tokens, type, scope, expiry etc.\n\n#### create_folder(folder_name: str, parent_folder: str | None = None)\n\nCreate email folder.\n\n* **Parameters:**\n  * **folder_name** \u2013 name for the new folder (required)\n  * **parent_folder** \u2013 name for the parent folder, by default INBOX\n\n#### delete_folder(folder_name: str, parent_folder: str | None = None)\n\nDelete email folder.\n\n* **Parameters:**\n  * **folder_name** \u2013 current folder name (required)\n  * **parent_folder** \u2013 name for the parent folder, by default INBOX\n\n#### delete_message(message: Dict)\n\nDelete message.\n\n* **Parameters:**\n  **message** \u2013 dictionary containing message details\n\n#### empty_folder(folder_name: str, parent_folder: str | None = None, delete_sub_folders: bool | None = False)\n\nEmpty email folder of all items\n\n* **Parameters:**\n  * **folder_name** \u2013 current folder name (required)\n  * **parent_folder** \u2013 name for the parent folder, by default INBOX\n  * **delete_sub_folders** \u2013 delete sub folders or not, by default False\n* **Returns:**\n  True if operation was successful, False if not\n\n#### forward_message(message: Dict, recipients: str | List)\n\nForward message.\n\n* **Parameters:**\n  * **message** \u2013 dictionary containing message details\n  * **recipients** \u2013 email address or list of email addresses\n\n#### generate_oauth_url(client_id: str) \u2192 str\n\nGenerates an authorization URL which must be opened by the user to start the\nOAuth2 flow and obtain an authorization code as response.\n\n* **Parameters:**\n  **client_id** \u2013 Client app ID. (generated by the provider)\n* **Returns:**\n  Authorization URL string not containing any sensitive info in it.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nStart OAuth Flow\n    ${auth_url} =    Generate OAuth URL\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    Log     Start OAuth2 flow: ${auth_url}\n```\n\n#### get_oauth_token(client_secret: str, response_url: str) \u2192 dict\n\nExchanges the code obtained previously with `Generate OAuth URL` for a\ntoken.\n\n* **Parameters:**\n  * **client_secret** \u2013 Client app secret. (generated by the provider)\n  * **response_url** \u2013 The final URL containing the authorization code found in\n    the address bar after authenticating and authorizing the Client app\n    through the authorization URL.\n* **Returns:**\n  A dictionary containing the access & refresh token, plus metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nFinish OAuth Flow\n    ${token} =      Get OAuth Token\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     response_url=${resp_url}  # redirect of `Generate OAuth URL`\n```\n\n#### list_messages(folder_name: str | None = None, criterion: str | None = None, contains: bool | None = False, count: int | None = 100, save_dir: str | None = None, items_only: bool | None = False) \u2192 list\n\nList messages in the account inbox. Order by descending\nreceived time.\n\n* **Parameters:**\n  * **folder_name** \u2013 name of the email folder, default INBOX\n  * **criterion** \u2013 list messages matching criterion\n  * **contains** \u2013 if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n  * **count** \u2013 number of messages to list\n  * **save_dir** \u2013 set to path where attachments should be saved,\n    default None (attachments are not saved)\n  * **items_only** \u2013 return only list of Message objects (instead of dictionaries)\n\n#### list_unread_messages(folder_name: str | None = None, criterion: str | None = None, contains: bool | None = False, count: int | None = 100, save_dir: str | None = None) \u2192 list\n\nList unread messages in the account inbox. Order by descending\nreceived time.\n\n* **Parameters:**\n  * **folder_name** \u2013 name of the email folder, default INBOX\n  * **criterion** \u2013 list messages matching criterion\n  * **contains** \u2013 if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n  * **count** \u2013 number of messages to list\n  * **save_dir** \u2013 set to path where attachments should be saved,\n    default None (attachments are not saved)\n\n#### move_message(msg: dict | None, target: str | None)\n\nMove a message into target folder\n\n* **Parameters:**\n  * **msg** \u2013 dictionary of the message\n  * **target** \u2013 path to target folder\n* **Raises:**\n  **AttributeError** \u2013 if msg is not a dictionary containing\n  id and changekey attributes\n\nExample:\n\n```robotframework\n${messages}=    List Messages\n...    INBOX\n...    criterion=subject:about my orders\nFOR    ${msg}    IN    @{messages}\n    Run Keyword If    \"${msg}[sender][email_address]\"==\"${priority_account}\"\n    ...    Move Message    ${msg}    target=INBOX / Problems / priority\nEND\n```\n\n#### move_messages(criterion: str | None = '', source: str | None = None, target: str | None = None, contains: bool | None = False) \u2192 bool\n\nMove message(s) from source folder to target folder\n\n* **Parameters:**\n  * **criterion** \u2013 move messages matching this criterion\n  * **source** \u2013 source folder\n  * **target** \u2013 target folder\n  * **contains** \u2013 if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n* **Returns:**\n  boolean result of operation, True if 1+ items were moved else False\n\nCriterion examples:\n\n- subject:my message subject\n- body:something in body\n- sender:sender@domain.com\n\n#### refresh_oauth_token(client_id: str, client_secret: str, token: dict) \u2192 dict\n\nRefreshes the token as the access one usually expires after 1h and the\nrefresh one never expires. (as long as it doesn\u2019t get revoked)\n\n* **Parameters:**\n  * **client_id** \u2013 Client app ID. (generated by the provider)\n  * **client_secret** \u2013 Client app secret. (generated by the provider)\n  * **token** \u2013 Full token dictionary previously obtained with\n    `Get OAuth Token`.\n* **Returns:**\n  A token dictionary containing a new access token and updated\n  metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRefresh OAuth Flow\n    ${token} =      Refresh OAuth Token\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     token=${token}  # from `Get OAuth Token`\n```\n\n#### rename_folder(oldname: str, newname: str, parent_folder: str | None = None)\n\nRename email folder\n\n* **Parameters:**\n  * **oldname** \u2013 current folder name\n  * **newname** \u2013 new name for the folder\n  * **parent_folder** \u2013 name for the parent folder, by default INBOX\n* **Returns:**\n  True if operation was successful, False if not\n\n#### save_attachments(message: dict | str, save_dir: str | None = None, attachments_from_emls: bool = False, overwrite: bool = False) \u2192 list\n\nSave attachments from message into given directory.\n\n* **Parameters:**\n  * **message** \u2013 dictionary or .eml file path containing message details\n  * **save_dir** \u2013 file path where attachments will be saved\n  * **attachments_from_emls** \u2013 pass True if the attachment is an EML file (for\n    saving attachments from that EML file instead), False otherwise (default)\n  * **overwrite** \u2013 overwrite existing downloaded attachments with the same name\n    if set to True, False otherwise (default)\n* **Returns:**\n  list of saved attachments\n\nExample:\n\n```robotframework\n${messages} =    List Messages\nFOR    ${msg}    IN    @{messages}\n    Save Attachments    ${msg}    %{ROBOT_ARTIFACTS}\n    ...    attachments_from_emls=${True}\nEND\n\n${attachments} =    Save Attachments    ${CURDIR}${/}saved.eml\n...    %{ROBOT_ARTIFACTS}    overwrite=${True}\n```\n\n#### save_message(message: dict, filename: str)\n\nSave email as .eml file.\n\n* **Parameters:**\n  * **message** \u2013 dictionary containing message details\n  * **filename** \u2013 name of the file to save message into\n\n#### send_message(recipients: List[str] | str | None = None, subject: str | None = '', body: str | None = '', attachments: List[str] | str | None = None, html: bool | None = False, images: List[str] | str | None = None, cc: List[str] | str | None = None, bcc: List[str] | str | None = None, save: bool | None = False, reply_to: str | None = None) \u2192 None\n\nKeyword for sending message through connected Exchange account.\n\n* **Parameters:**\n  * **recipients** \u2013 list of email addresses\n  * **subject** \u2013 message subject, defaults to \u201c\u201d\n  * **body** \u2013 message body, defaults to \u201c\u201d\n  * **attachments** \u2013 list of filepaths to attach, defaults to None\n  * **html** \u2013 if message content is in HTML, default False\n  * **images** \u2013 list of filepaths for inline use, defaults to None\n  * **cc** \u2013 list of email addresses\n  * **bcc** \u2013 list of email addresses\n  * **save** \u2013 is sent message saved to Sent messages folder or not,\n    defaults to False\n  * **reply_to** \u2013 email address to reply to\n\nEmail addresses can be prefixed with `ex:` to indicate an Exchange\naccount address.\n\nAt least one target needs to exist for recipients, cc or bcc.\n\n#### send_reply_message(message: Message | str, body: str, subject: str | None = None, reply_all: bool = False)\n\nSend reply to a message.\n\n* **Parameters:**\n  * **message** \u2013 either Message object or ID of the message\n    for the message which this is replying to\n  * **body** \u2013 message body for the reply\n  * **subject** \u2013 optional subject for the reply, defaults to None\n  * **reply_all** \u2013 if True then reply is sent to all recipients,\n    defaults to False\n\n**Robot Framework example**\n\n```robotframework\n${messages}=    List Messages    criterion=subject:'I have new query'\nFOR    ${m}    IN    @{messages}\n    # Verifying that this is email that I want to reply to\n    ${now}=    RPA.Calendar.Time Now   UTC  return_format=YYYY-MM-DD HH:mm\n    ${received}=    Evaluate    str($m[\"datetime_received\"])\n    ${diff}=   RPA.Calendar.Time Difference In Minutes   ${received}  ${now}\n    # message was received less than 5 minutes\n    # and it came from the expected address\n    IF    $diff < 5 and \"${m}[sender]\" == \"mika@robocorp.com\"\n        Send Reply Message\n        ...  ${m}[id]\n        ...  body=I totally agree\n    END\nEND\n```\n\n#### wait_for_message(criterion: str | None = '', timeout: float | None = 5.0, interval: float | None = 1.0, contains: bool | None = False, save_dir: str | None = None) \u2192 Any\n\nWait for email matching criterion to arrive into INBOX.\n\n* **Parameters:**\n  * **criterion** \u2013 wait for message matching criterion\n  * **timeout** \u2013 total time in seconds to wait for email, defaults to 5.0\n  * **interval** \u2013 time in seconds for new check, defaults to 1.0 (minimum)\n  * **contains** \u2013 if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n    THIS PARAMETER IS DEPRECATED AS OF rpaframework 12.9.0\n  * **save_dir** \u2013 set to path where attachments should be saved,\n    default None (attachments are not saved)\n* **Returns:**\n  list of messages\n"
  },
  {
    "module": "RPA.Email.ImapSmtp.ImapSmtp",
    "markdown": "# Python API\n\n## ImapSmtp\n\n### *class* RPA.Email.ImapSmtp.ImapSmtp(smtp_server: str | None = None, smtp_port: int = 587, imap_server: str | None = None, imap_port: int = 993, account: str | None = None, password: str | None = None, encoding: str = 'utf-8', provider: OAuthProvider | str = OAuthProvider.GOOGLE, tenant: str | None = None)\n\nImapSmtp is a library for sending, reading, and deleting emails.\nImapSmtp is interfacing with SMTP and IMAP protocols.\n\n**\\*About criteria argument\\***\n\nVarious keywords like `List Messages` and `Move Messages` have keyword\nargument called `criterion` which can be used to filter emails according\nto given criteria.\n\nSyntax needs to according to specification and more information about that\ncan be read from [https://robocorp.com/docs-robot-framework/development-guide/email/sending-emails-with-gmail-smtp#listing-email-messages-by-criteria](https://robocorp.com/docs-robot-framework/development-guide/email/sending-emails-with-gmail-smtp#listing-email-messages-by-criteria)\n\n**Troubleshooting**\n\n- Authentication error with GMail - \u201cApplication-specific password required\u201d\n  : See: [https://support.google.com/mail/answer/185833?hl=en](https://support.google.com/mail/answer/185833?hl=en)\n- More secure apps (XOAUTH2 protocol) - Use the OAuth2 flow as in this Portal robot:\n  : [example-oauth-email](https://github.com/robocorp/example-oauth-email)\n    <br/>\n    Make sure to specify a provider (and optionally a tenant) when importing\n    the library and planning to use this flow.\n\n**Examples**\n\n**Robot Framework**\n\nIt is highly recommended to secure your passwords and take care\nthat they are not stored in version control by mistake.\nSee `RPA.Robocorp.Vault` to see how to store secrets in\nRobocorp Vault.\n\nWhen sending HTML content with IMG tags, the `src` filenames must match\nthe base image name given with the `images` parameter.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Email.ImapSmtp   smtp_server=smtp.gmail.com  smtp_port=587\nTask Setup  Authorize  account=${GMAIL_ACCOUNT}  password=${GMAIL_PASSWORD}\n\n*** Variables ***\n${GMAIL_ACCOUNT}        ACCOUNT_NAME\n${GMAIL_PASSWORD}       APP_PASSWORD\n${RECIPIENT_ADDRESS}    RECIPIENT\n${BODY_IMG1}            ${IMAGEDIR}${/}approved.png\n${BODY_IMG2}            ${IMAGEDIR}${/}invoice.png\n${EMAIL_BODY}     <h1>Heading</h1><p>Status: <img src='approved.png' alt='approved image'/></p>\n...               <p>INVOICE: <img src='invoice.png' alt='invoice image'/></p>\n\n*** Tasks ***\nSending email\n    Send Message  sender=${GMAIL_ACCOUNT}\n    ...           recipients=${RECIPIENT_ADDRESS}\n    ...           subject=Message from RPA Robot\n    ...           body=RPA Robot message body\n\nSending HTML Email With Image\n    [Documentation]     Sending email with HTML content and attachment\n    Send Message\n    ...                 sender=${GMAIL_ACCOUNT}\n    ...                 recipients=${RECIPIENT_ADDRESS}\n    ...                 subject=HTML email with body images (2) plus one attachment\n    ...                 body=${EMAIL_BODY}\n    ...                 html=${TRUE}\n    ...                 images=${BODY_IMG1}, ${BODY_IMG2}\n    ...                 attachments=example.png\n```\n\n**Python**\n\n```python\nfrom RPA.Email.ImapSmtp import ImapSmtp\n\ngmail_account = \"ACCOUNT_NAME\"\ngmail_password = \"APP_PASSWORD\"\n\nmail = ImapSmtp(smtp_server=\"smtp.gmail.com\", smtp_port=587)\nmail.authorize(account=gmail_account, password=gmail_password)\nmail.send_message(\n    sender=gmail_account,\n    recipients=\"RECIPIENT\",\n    subject=\"Message from RPA Python\",\n    body=\"RPA Python message body\",\n)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### TO_PROTECT *= ['authorize', 'authorize_imap', 'authorize_smtp', 'set_credentials', 'generate_oauth_string', 'get_oauth_token', 'refresh_oauth_token']*\n\n#### add_gmail_labels(labels, criterion, source_folder: str = None) \u2192 bool\n\nAdd GMail labels to messages matching criterion and if given,\nsource folder\n\n* **Parameters:**\n  * **labels** \u2013 comma separated list of labels to add\n  * **criterion** \u2013 label messages matching criterion\n  * **source_folder** \u2013 look for messages in this folder, default all folders\n* **Returns:**\n  status of the operation\n\nExample:\n\n```robotframework\nAdd Gmail Labels  customer1   SUBJECT \"order confirmation\"\nAdd Gmail Labels  wip         SUBJECT \"order confirmation\"   customerfolder\n```\n\n#### authorize(account: str | None = None, password: str | None = None, smtp_server: str | None = None, imap_server: str | None = None, smtp_port: int | None = None, imap_port: int | None = None, is_oauth: bool = False) \u2192 None\n\nAuthorize user to SMTP and IMAP servers.\n\n* **Parameters:**\n  * **account** \u2013 user account as string, defaults to None\n  * **password** \u2013 user password as string, defaults to None\n  * **smtp_server** \u2013 SMTP server address, defaults to None\n  * **imap_server** \u2013 IMAP server address, defaults to None\n  * **smtp_port** \u2013 SMTP server port, defaults to None (587 for SMTP)\n  * **imap_port** \u2013 IMAP server port, defaults to None\n  * **is_oauth** \u2013 Use XOAUTH2 protocol with a base64 encoded OAuth2 string as\n    password\n\nWill use separately set credentials or those given in keyword call.\n\nExample:\n\n```robotframework\nAuthorize    ${username}   ${password}  smtp_server=smtp.gmail.com  smtp_port=587\n```\n\n#### authorize_imap(account: str | None = None, password: str | None = None, imap_server: str | None = None, imap_port: int | None = None, is_oauth: bool = False) \u2192 None\n\nAuthorize to IMAP server.\n\n* **Parameters:**\n  * **account** \u2013 IMAP account name, defaults to None\n  * **password** \u2013 IMAP account password, defaults to None\n  * **imap_server** \u2013 IMAP server address, defaults to None\n  * **imap_port** \u2013 IMAP server port, defaults to None\n  * **is_oauth** \u2013 Use XOAUTH2 protocol with a base64 encoded OAuth2 string as\n    password\n\nCan be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword `Set Credentials` has been called.\n\nExample:\n\n```robotframework\nAuthorize IMAP    ${username}   ${password}  imap.gmail.com  993\n```\n\n#### authorize_smtp(account: str | None = None, password: str | None = None, smtp_server: str | None = None, smtp_port: int | None = None, is_oauth: bool = False) \u2192 None\n\nAuthorize to SMTP server.\n\n* **Parameters:**\n  * **account** \u2013 SMTP account name, defaults to None\n  * **password** \u2013 SMTP account password, defaults to None\n  * **smtp_server** \u2013 SMTP server address, defaults to None\n  * **smtp_port** \u2013 SMTP server port, defaults to None (587 for SMTP)\n  * **is_oauth** \u2013 Use XOAUTH2 protocol with a base64 encoded OAuth2 string as\n    password\n\nCan be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword `Set Credentials` has been called.\n\nExample:\n\n```robotframework\nAuthorize SMTP    ${username}   ${password}  smtp.gmail.com  587\n```\n\n#### convert_eml_file_into_message(eml_filepath: str, save_attachments_directory: str | None = None)\n\nConverts EML file into message dictionary.\n\nReturned dictionary contains:\n\n- **headers** of the email\n- **attachments** the filenames of the attachments or if attachments\n  have been saved then they are absolute filepaths to each attachment\n- **body_text** is the TEXT formatted content of the email body\n- **body_html** is the HTML formatted content of the email body\n\n* **Parameters:**\n  * **eml_filepath** \u2013 filepath to the EML file\n  * **save_attachments_directory** \u2013 path to the directory where possible\n    attachments will be saved to, if not given then attachment filenames are\n    returned in a list of the return dictionary in the key \u2018attachments\u2019\n* **Returns:**\n  dictionary containing information aboutthe EML message\n\n#### create_folder(folder_name: str = None) \u2192 bool\n\nCreate email folder\n\n* **Parameters:**\n  **folder_name** \u2013 name for the new folder\n* **Returns:**\n  True if operation was successful, False if not\n\nExample:\n\n```robotframework\nCreate Folder   filtered\n```\n\n#### delete_folder(folder_name: str = None) \u2192 bool\n\nDelete email folder\n\n* **Parameters:**\n  **folder_name** \u2013 current folder name\n* **Returns:**\n  True if operation was successful, False if not\n\nExample:\n\n```robotframework\nDelete Folder   filtered\n```\n\n#### delete_message(criterion: str | dict = None, source_folder: str = None) \u2192 bool\n\nDelete single message from server based on criterion.\n\n* **Parameters:**\n  * **criterion** \u2013 filter messages based on this search, can also be a\n    message dictionary\n  * **source_folder** \u2013 defaults to already selected folder, but can be\n    set to delete message in a specific folder\n* **Returns:**\n  True if success, False if not\n\nIf criterion does not return exactly 1 message then delete is not done.\n\nExample:\n\n```robotframework\nDelete Message  SUBJECT \"Greetings RPA developer\"\n```\n\n#### delete_messages(criterion: str | list = None, limit: int = None, source_folder: str = None) \u2192 bool\n\nDelete messages from server based on criterion.\n\n* **Parameters:**\n  * **criterion** \u2013 filter messages based on this search, can also be a\n    list of message dictionaries\n  * **limit** \u2013 maximum number of message to delete\n  * **source_folder** \u2013 defaults to already selected folder, but can be\n    set to delete message in a specific folder\n* **Returns:**\n  True if success, False if not\n\nExample:\n\n```robotframework\nDelete Messages  SUBJECT Greetings\n```\n\n#### do_message_actions(criterion: str = '', actions: list = None, source_folder: str = None, target_folder: str = None, labels: str = None, limit: int = None, overwrite: bool = False, prefix: str = None) \u2192 Any\n\nDo actions to messages matching criterion and if given,\nsource folder\n\nActions can be:\n\n- msg_copy\n- msg_delete\n- msg_flag\n- msg_unflag\n- msg_read\n- msg_unread\n- msg_save\n- msg_attachment_save\n- glabel_add\n- glabel_remove\n\nResult object contains following attributes:\n\n- actions_done, number of messages on which action was performed\n- message_count, number of messages matching criterion\n- ids, message ids matching criterion\n- uids, dictionary of message uids and message content\n\n* **Parameters:**\n  * **criterion** \u2013 perform actions on messages matching this\n  * **actions** \u2013 list of actions to perform on matching messages\n  * **source_folder** \u2013 look for messages in this folder, default all folders\n  * **target_folder** \u2013 can be file path or email folder\n    (for example action: msg_copy)\n  * **labels** \u2013 comma separated list of labels (for example action: glabel_add)\n  * **limit** \u2013 maximum number of messages (for example action: msg_delete)\n  * **overwrite** \u2013 to control if file should overwrite\n    (for example action: msg_attachment_save)\n  * **prefix** \u2013 prefix to be added into filename (for example: msg_save)\n* **Returns:**\n  result object\n\nExample:\n\n```robotframework\n${actions}=   Create List  msg_unflag  msg_read  msg_save  msg_attachment_save\nDo Message Actions    SUBJECT \"Order confirmation\"\n...                   ${actions}\n...                   source_folder=XXX\n...                   target_folder=${CURDIR}\n...                   overwrite=True\n```\n\n#### email_to_document(input_source: str | Path | BinaryIO | bytes, output_path: str | Path)\n\nConvert a raw e-mail into a Word document.\n\nThis keyword extracts the HTML (or Text) content from the passed input e-mail\nand saves it into docx format at the provided output path.\n\n* **Parameters:**\n  * **input_source** \u2013 Path, bytes or file-like object with the input raw e-mail\n    content\n  * **output_path** \u2013 Where to save the output docx file\n\nExample:\n\n**Robot Framework**\n\n```robotframework\nConvert email to docx\n    ${mail_file} =     Get Work Item File    mail.eml\n    Email To Document    ${mail_file}    ${OUTPUT_DIR}${/}mail.docx\n```\n\n**Python**\n\n```python\nfrom pathlib import Path\nfrom RPA.Email.ImapSmtp import ImapSmtp\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nlib_work = WorkItems()\nlib_mail = ImapSmtp()\n\ndef convert_email_to_docx():\n    lib_work.get_input_work_item()\n    mail_file = lib_work.get_work_item_file(\"mail.eml\")\n    lib_mail.email_to_document(mail_file, Path(\"./output\") / \"mail.docx\")\n```\n\n#### flag_messages(criterion: str | dict = None, unflag: bool = False) \u2192 Any\n\nMark messages as flagged\n\n* **Parameters:**\n  * **criterion** \u2013 mark messages matching criterion\n  * **unflag** \u2013 to mark messages as not flagged\n* **Returns:**\n  successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${flagged}  ${oftotal}    Flag Messages   SUBJECT rpa\n${unflagged}  ${oftotal}  Flag Messages   SUBJECT rpa  unflag=True\n```\n\n#### generate_oauth_string(username: str, access_token: str) \u2192 str\n\nGenerate and return an OAuth2 string compatible with the IMAP/POP/SMTP\nXOAUTH2 protocol.\n\nThis string usually gets passed to the `Authorize` keyword as password when\nis_oauth=${True}.\n\n* **Parameters:**\n  * **username** \u2013 The e-mail address you\u2019re going to send the e-mail with.\n  * **access_token** \u2013 Access token string found in the dictionary obtained with\n    `Get OAuth Token` or `Refresh OAuth Token`.\n* **Returns:**\n  Base64 encoded string packing these credentials and replacing the\n  legacy password when enabling the OAuth2 flow.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nAuthorize ImapSmtp\n    ${password} =   Generate OAuth String    ${username}\n    ...    ${token}[access_token]\n    Authorize    account=${username}    is_oauth=${True}\n    ...     password=${password}\n```\n\n#### generate_oauth_url(client_id: str) \u2192 str\n\nGenerates an authorization URL which must be opened by the user to start the\nOAuth2 flow and obtain an authorization code as response.\n\n* **Parameters:**\n  **client_id** \u2013 Client app ID. (generated by the provider)\n* **Returns:**\n  Authorization URL string not containing any sensitive info in it.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nStart OAuth Flow\n    ${auth_url} =    Generate OAuth URL\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    Log     Start OAuth2 flow: ${auth_url}\n```\n\n#### get_decoded_email_body(message, html_first: bool = False) \u2192 Tuple[str, bool]\n\nDecodes email body and extracts its text/html content.\n\nAutomatically detects character set if the header is not set.\n\n* **Parameters:**\n  * **message** \u2013 Raw 7-bit message body input e.g. from imaplib. Double\n    encoded in quoted-printable and latin-1\n  * **html_first** \u2013 Prioritize html extraction over text when this is True\n* **Returns:**\n  Message body as unicode string and a boolean telling if the message\n  has attachments\n\n#### get_folder_list(subdirectory: str = None, pattern: str = None) \u2192 list\n\nGet list of folders on the server\n\n* **Parameters:**\n  * **subdirectory** \u2013 list subdirectories for this folder\n  * **pattern** \u2013 list folders matching this pattern\n* **Returns:**\n  list of folders\n\nExample:\n\n```robotframework\n@{folders}  Get Folder List\n@{folders}  Get Folder List  pattern=important\n@{folders}  Get Folder List  subdirectory=sub\n```\n\n#### get_oauth_token(client_secret: str, response_url: str) \u2192 dict\n\nExchanges the code obtained previously with `Generate OAuth URL` for a\ntoken.\n\n* **Parameters:**\n  * **client_secret** \u2013 Client app secret. (generated by the provider)\n  * **response_url** \u2013 The final URL containing the authorization code found in\n    the address bar after authenticating and authorizing the Client app\n    through the authorization URL.\n* **Returns:**\n  A dictionary containing the access & refresh token, plus metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nFinish OAuth Flow\n    ${token} =      Get OAuth Token\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     response_url=${resp_url}  # redirect of `Generate OAuth URL`\n```\n\n#### list_messages(criterion: str = '', source_folder: str = None, readonly: bool = True) \u2192 Any\n\nReturn list of messages matching criterion.\n\n* **Parameters:**\n  * **criterion** \u2013 list emails matching this, defaults to \u201c\u201d\n  * **source_folder** \u2013 list messages from this folder\n  * **readonly** \u2013 set False if you want to mark matching messages as read\n* **Returns:**\n  list of messages\n\n*Note.* listing messages without source_folder might take a long time\n\nExample:\n\n```robotframework\n@{emails}  List Messages  SUBJECT \"rpa task\"\nFOR  ${email}  IN  @{EMAILS}\n    Log  ${email}[Subject]\n    Log  ${email}[From]\n    Log  ${email}[Date]\n    Log  ${email}[Delivered-To]\n    Log  ${email}[Received]\n    Log  ${email}[Has-Attachments]\n    Log  ${email}[uid]\nEND\n```\n\n#### mark_as_read(criterion: str | dict = None, unread: bool = False) \u2192 Any\n\nMark messages as read\n\n* **Parameters:**\n  * **criterion** \u2013 mark messages matching criterion\n  * **unread** \u2013 to mark messages as not read\n* **Returns:**\n  successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${read}  ${oftotal}  Mark As Read   SUBJECT rpa\n```\n\n#### mark_as_unread(criterion: str | dict = None) \u2192 Any\n\nMark messages as not read\n\n* **Parameters:**\n  **criterion** \u2013 mark messages matching criterion\n* **Returns:**\n  successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${unread}  ${oftotal}  Mark As Unread   SUBJECT rpa\n```\n\n#### move_messages(criterion: str | dict = None, target_folder: str = None, source_folder: str = None) \u2192 bool\n\nMove messages from source folder to target folder\n\n* **Parameters:**\n  * **criterion** \u2013 move messages matching criterion\n  * **source_folder** \u2013 location of the messages, default INBOX\n  * **target_folder** \u2013 where messages should be move into\n* **Returns:**\n  True if all move operations succeeded, False if not\n\nExample:\n\n```robotframework\n${result}=    Move Messages\n...    criterion=SUBJECT \"order confirmation 32\"\n...    target_folder=yyy\n\n${result}=    Move Messages\n...    criterion=ALL\n...    source_folder=yyy\n...    target_folder=XXX\n```\n\n#### move_messages_by_ids(message_ids: str | List, target_folder: str, source_folder: str, use_gmail_search: bool = False) \u2192 bool\n\nMove message by their Message-ID\u2019s from source folder to target folder\n\n* **Parameters:**\n  * **message_ids** \u2013 one Message-ID as string or list of Message-IDs\n  * **source_folder** \u2013 location of the messages, default INBOX\n  * **target_folder** \u2013 where messages should be move into\n  * **use_gmail_search** \u2013 set to True to use Rfc822msgid search, default\n    is HEADER Message-ID search\n* **Returns:**\n  True if all move operations succeeded, False if not\n\n#### refresh_oauth_token(client_id: str, client_secret: str, token: dict) \u2192 dict\n\nRefreshes the token as the access one usually expires after 1h and the\nrefresh one never expires. (as long as it doesn\u2019t get revoked)\n\n* **Parameters:**\n  * **client_id** \u2013 Client app ID. (generated by the provider)\n  * **client_secret** \u2013 Client app secret. (generated by the provider)\n  * **token** \u2013 Full token dictionary previously obtained with\n    `Get OAuth Token`.\n* **Returns:**\n  A token dictionary containing a new access token and updated\n  metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRefresh OAuth Flow\n    ${token} =      Refresh OAuth Token\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     token=${token}  # from `Get OAuth Token`\n```\n\n#### remove_gmail_labels(labels, criterion, source_folder: str = None) \u2192 bool\n\nRemove GMail labels to messages matching criterion and if given,\nsource folder\n\n* **Parameters:**\n  * **labels** \u2013 comma separated list of labels to remove\n  * **criterion** \u2013 unlabel messages matching criterion\n  * **source_folder** \u2013 look for messages in this folder, default all folders\n* **Returns:**\n  status of the operation\n\nExample:\n\n```robotframework\nRemove Gmail Labels  wip  SUBJECT \"order confirmation\"\nRemove Gmail Labels  wip  SUBJECT \"order confirmation\"  customerfolder\n```\n\n#### rename_folder(oldname: str = None, newname: str = None, suppress_error: bool = False) \u2192 bool\n\nRename email folder\n\n* **Parameters:**\n  * **oldname** \u2013 current folder name\n  * **newname** \u2013 new name for the folder\n  * **suppress_error** \u2013 to silence warning message, defaults to False\n* **Returns:**\n  True if operation was successful, False if not\n\nExample:\n\n```robotframework\nRename Folder   subfolder   filtered\n```\n\n#### save_attachment(message: dict | Message, target_folder: str | None, overwrite: bool, prefix: str | None = None) \u2192 List[str]\n\nSave mail attachment of a single given email on the local disk.\n\n* **Parameters:**\n  * **message** \u2013 message item\n  * **target_folder** \u2013 local folder for saving attachments to (needs to exist),\n    defaults to user\u2019s home directory if None\n  * **overwrite** \u2013 overwrite existing file if True, defaults to False\n  * **prefix** \u2013 optional filename prefix added to the attachments, empty by\n    default\n* **Returns:**\n  list of saved attachments (list of absolute filepaths) in one email\n\nExample:\n\n```robotframework\n@{emails} =    List Messages    ALL\nFOR    ${email}    IN    @{emails}\n    IF    ${email}[Has-Attachments]\n        Log To Console    Saving attachment for: ${email}[Subject]\n        ${attachments} =    Save Attachment\n        ...    ${email}\n        ...    target_folder=${CURDIR}\n        ...    overwrite=${True}\n        Log To Console    Saved attachments: ${attachments}\n    END\nEND\n```\n\n#### save_attachments(criterion: str = '', target_folder: str | None = None, overwrite: bool = False, prefix: str | None = None) \u2192 List[str]\n\nSave mail attachments of emails matching criterion on the local disk.\n\n* **Parameters:**\n  * **criterion** \u2013 attachments are saved for mails matching this, defaults to \u201c\u201d\n  * **target_folder** \u2013 local folder for saving attachments to (needs to exist),\n    defaults to user\u2019s home directory if None\n  * **overwrite** \u2013 overwrite existing file if True, defaults to False\n  * **prefix** \u2013 optional filename prefix added to the attachments, empty by\n    default\n* **Returns:**\n  list of saved attachments (absolute file paths) of all emails\n\nExample:\n\n```robotframework\n${attachments} =    Save Attachments    SUBJECT \"rpa task\"\n...    target_folder=${CURDIR}${/}messages  overwrite=${True}\nFOR  ${file}  IN  @{attachments}\n    OperatingSystem.File Should Exist  ${file}\nEND\n```\n\n#### save_messages(criterion: str | dict | list | None = None, target_folder: str | None = None, prefix: str | None = None) \u2192 bool\n\nSave messages based on criteria and store them to target folder\nwith attachment files.\n\nDoes not save message if target_folder is not given.\n\n* **Parameters:**\n  * **criterion** \u2013 filter messages based on this, defaults to \u201c\u201d\n  * **target_folder** \u2013 path to folder where message are saved, defaults to None\n  * **prefix** \u2013 optional filename prefix added to the attachments, empty by\n    default\n* **Returns:**\n  True if succeeded, False otherwise\n\nExample:\n\n```robotframework\nSave Messages  SUBJECT Important message  target_folder=${USERDIR}${/}messages\n```\n\n#### select_folder(folder_name: str = 'INBOX', readonly: bool = False) \u2192 int\n\nSelect folder by name\n\n* **Parameters:**\n  * **folder_name** \u2013 name of the folder to select\n  * **readonly** \u2013 if set to True then message flags are not modified\n* **Returns:**\n  message count in the selected folder\n\nReturns number of messages in the folder or\nexception if folder does not exist on the server.\n\nExample:\n\n```robotframework\nSelect Folder   subfolder\n```\n\n#### send_message(sender: str, recipients: List[str] | str | None = None, subject: str = '', body: str = '', attachments: List[str] | str | None = None, html: bool = False, images: List[str] | str | None = None, cc: List[str] | str | None = None, bcc: List[str] | str | None = None, attachment_position: AttachmentPosition | None = AttachmentPosition.TOP, in_reply_to: str | None = None, return_path: str | None = None, reply_to: str | None = None) \u2192 bool\n\nSend SMTP email\n\n* **Parameters:**\n  * **sender** \u2013 who is sending, ie. \u2018from\u2019\n  * **recipients** \u2013 who is receiving, ie. \u2018to\u2019\n  * **subject** \u2013 mail subject field\n  * **body** \u2013 mail body content\n  * **attachments** \u2013 list of filepaths to attach\n  * **html** \u2013 if message content is in HTML, default False\n  * **images** \u2013 list of filepaths for inline images\n  * **cc** \u2013 list of email addresses for email \u2018cc\u2019 field\n  * **bcc** \u2013 list of email addresses for email \u2018bcc\u2019 field\n  * **attachment_position** \u2013 content position for attachment, default top\n  * **in_reply_to** \u2013 the \u2018Message ID\u2019 to which this message is in reply to,\n    for example <message_id_for_reply_to>\n  * **return_path** \u2013 email address which should receive \u201cbounce messages\u201d\n  * **reply_to** \u2013 email address which should receive the reply\n\n**Valid sender values**\n\n- First Lastname <[address@domain](mailto:address@domain)>\n- [address@domain](mailto:address@domain)\n\n**About in_reply_to**\n\nIn addition of setting in_reply_to parameter to match the \u2018Message ID\u2019\nof the email this message is replying to, some email servers require that\nalso subject of the original email is included in the reply email subject\nwith \n\n```\n`\n```\n\nre: \\` prefix, ie. \u201cre: Why it is best to use Robocorp RPA\u201d or with\nthe original email subject.\n\nAnd please note that in_reply_to the \u2018Message ID\u2019 needs to contain < in\nthe start of the ID and > at the end of the ID.\n\n**About return_path**\n\nEmail servers tend to set \u2018Return-Path\u2019 of the email on their own so in\nsome cases user given address won\u2019t work as the email server does not\nuse the user set address. If possible, the email server\u2019s configuration\ncan be changed to ensure that \u2018Return-Path\u2019 header is respected.\n\nExample:\n\n```robotframework\nSend Message  sender@domain.com  recipient@domain.com\n...           cc=need_to_know@domain.com\n...           bcc=hidden_copy@domain.com\n...           subject=Greetings Software Robot Developer\n...           body=${email_body}\n...           attachments=${CURDIR}${/}report.pdf\n\n# Fixing attachments to the bottom of the content\nSend Message  sender@domain.com  recipient@domain.com\n...           subject=Greetings Software Robot Developer\n...           body=${email_body}\n...           attachments=${CURDIR}${/}report.pdf\n...           attachment_position=bottom\n```\n\n#### send_smtp_hello() \u2192 None\n\nSend hello message to SMTP server.\n\nRequired step when creating SMTP connection.\n\n#### set_credentials(account: str | None = None, password: str | None = None) \u2192 None\n\nSet credentials\n\n* **Parameters:**\n  * **account** \u2013 user account as string, defaults to None\n  * **password** \u2013 user password as string, defaults to None\n\nExample:\n\n```robotframework\nSet Credentials   ${username}   ${password}\nAuthorize\n```\n\n#### unflag_messages(criterion: str | dict = None) \u2192 Any\n\nMark messages as not flagged\n\n* **Parameters:**\n  **criterion** \u2013 mark messages matching criterion\n* **Returns:**\n  successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${unflagged}  ${oftotal}  Unflag Messages   SUBJECT rpa\n```\n\n#### wait_for_message(criterion: str = '', timeout: float = 5.0, interval: float = 1.0, readonly: bool = True) \u2192 Any\n\nWait for email matching criterion to arrive into mailbox.\n\n* **Parameters:**\n  * **criterion** \u2013 message filter to wait for, defaults to \u201c\u201d\n  * **timeout** \u2013 total time in seconds to wait for email, defaults to 5.0\n  * **interval** \u2013 time in seconds for new check, defaults to 1.0\n  * **readonly** \u2013 set False if you want to mark matching messages as read\n* **Returns:**\n  list of messages\n\nExample:\n\n```robotframework\n@{emails}  Wait For Message  SUBJECT \"rpa task\"  timeout=300  interval=10\n```\n"
  },
  {
    "module": "RPA.Excel.Application.Application",
    "markdown": "# Python API\n\n## Excel.Application\n\n### *class* RPA.Excel.Application.Application(\\*args, \\*\\*kwargs)\n\nExcel.Application is a library for controlling the Excel application.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary             RPA.Excel.Application\nTask Setup          Open Application\nTask Teardown       Quit Application\n\n*** Tasks ***\nManipulate Excel application\n    Open Workbook           workbook.xlsx\n    Set Active Worksheet    sheetname=new stuff\n    Write To Cells          row=1\n    ...                     column=1\n    ...                     value=my data\n    Save Excel\n\nRun Excel Macro\n    Open Workbook   orders_with_macro.xlsm\n    Run Macro       Sheet1.CommandButton1_Click\n\nExport Workbook as PDF\n    Open Workbook           workbook.xlsx\n    Export as PDF           workbook.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.Excel.Application import Application\n\napp = Application()\n\napp.open_application()\napp.open_workbook('workbook.xlsx')\napp.set_active_worksheet(sheetname='new stuff')\napp.write_to_cells(row=1, column=1, value='new data')\napp.save_excel()\napp.quit_application()\n```\n\n**Caveats**\n\nThis library works on a Windows operating system with UI enabled only, and you must\nensure that you open the app first with `Open Application` before running any\nother relevant keyword which requires to operate on an open app. The application is\nautomatically closed at the end of the task execution, so this can be changed by\nimporting the library with the autoexit=${False} setting.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Excel|Outlook|Word.Application    autoexit=${False}\n```\n\nIf you\u2019re running the Process by Control Room through a custom self-hosted Worker\nservice, then please make sure that you enable an RDP session by ticking \u201cUse\nDesktop Connection\u201d under the Step configuration.\n\nIf you still encounter issues with opening a document, please ensure that file can\nbe opened first manually and dismiss any alert potentially blocking the process.\n\nCheck the documentation below for more info:\n\n- [https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop](https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop)\n\n#### APP_DISPATCH *= 'Excel.Application'*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_new_sheet(sheetname: str, create_workbook: bool = True) \u2192 None\n\nAdd new worksheet to workbook. Workbook is created by default if\nit does not exist.\n\n* **Parameters:**\n  * **sheetname** \u2013 name for sheet\n  * **create_workbook** \u2013 create workbook if True, defaults to True\n* **Raises:**\n  **ValueError** \u2013 error is raised if workbook does not exist and\n  create_workbook is False\n\n#### add_new_workbook() \u2192 None\n\nAdds new workbook for Excel application\n\n#### *property* app\n\n#### close_document(save_changes: bool = False) \u2192 None\n\nClose the active document and app (if open).\n\n* **Parameters:**\n  **save_changes** \u2013 Enable changes saving on quit. (False by default)\n\n#### create_pivot_field(data_column: str, operation: str, numberformat: str | None = None) \u2192 PivotField\n\nCreate pivot field object parameters.\n\n*Note.* At the moment operation \u201cDISTINCT COUNT\u201d is not\nsupported as there seems to be issues in the COM interface,\nwhich have not been resolved yet (regarding this library\nimplementation).\n\nPython example:\n\n```python\nfield_count = excel.create_pivot_field(\"price\", \"count\", \"#\")\nfield_avg = excel.create_pivot_field(\"price\", \"average\", \"#0,#0\")\n```\n\nRobot Framework example:\n\n```robotframework\n${field_sum}=    Create Pivot Field    price    sum    #,#0\n${field_max}=    Create Pivot Field    price    max    #,#0\n```\n\n* **Parameters:**\n  * **data_column** \u2013 name of the data column\n  * **operation** \u2013 name of the possible operations\n    (SUM, AVERAGE, MAX, MIN, COUNT)\n  * **numberformat** \u2013 Excel cell number format, by default\n    number format is not set for the field\n* **Returns:**\n  field object\n\n#### create_pivot_table(source_worksheet: str, pivot_worksheet: str, rows: List[str], fields: List[PivotField], sort_field: PivotField | None = None, sort_direction: str = 'descending', data_range: Any | None = None, pivot_name: str = 'PivotTable1', collapse_rows: bool = True, show_grand_total: bool = True) \u2192 Any\n\nCreate a pivot table in the specified worksheet.\n\nThis is a initial implementation of the pivot table creation,\nwhich might not work in all cases. The alternative way\nof creating pivot tables is to use a macro an run it.\n\nPython example:\n\n```python\nrows = [\"products\", \"expense_type\"]\nfield_count = excel.create_pivot_field(\"price\", \"count\", \"#\")\nfield_avg = excel.create_pivot_field(\"price\", \"average\", \"#0,#0\")\npivottable = excel.create_pivot_table(\n    source_worksheet=\"data\",\n    pivot_worksheet=\"test!R5C5\",\n    rows=rows,\n    fields=[field_count, field_avg]\n)\n```\n\nRobot Framework example:\n\n```robotframework\n@{rows}=    Create List    products    expense_type\n${field_sum}=    Create Pivot Field    price    sum    #,#0\n${field_max}=    Create Pivot Field    price    max    #,#0\n@{fields}=   Create List   ${field_sum}    ${field_max}\n${pivottable}=    Create Pivot Table\n...    source_worksheet=data\n...    pivot_worksheet=test!R5C5\n...    rows=${rows}\n...    fields=${fields}\n```\n\n* **Parameters:**\n  * **source_worksheet** \u2013 name of the source worksheet\n  * **pivot_worksheet** \u2013 name of the pivot worksheet, can\n    be the same as the source worksheet but then cell location\n    of the pivot table needs to be given in the format \u201cR1C1\u201d\n    (R is a column numbe and C is a row number, e.g. \u201cR1C1\u201d is A1)\n  * **rows** \u2013 columns in the source_worksheet which are used\n    as pivot table rows\n  * **fields** \u2013 columns for the pivot table data fields\n  * **sort_field** \u2013 field to sort the pivot table by (one of the\n    fields)\n  * **sort_direction** \u2013 sort direction (ascending or descending),\n    default is descending\n  * **data_range** \u2013 source data range, if not given then\n    the whole used range of source_worksheet will be used\n  * **pivot_name** \u2013 name of the pivot table, if not given\n    then the name is \u201cPivotTable1\u201d\n  * **collapse_rows** \u2013 if True then the first row will be collapsed\n  * **show_grand_total** \u2013 if True then the grand total will be shown\n    for the columns\n* **Returns:**\n  created PivotTable object\n\n#### create_table(table_name: str, table_range: Any | None = None) \u2192 None\n\nCreate a table in the current worksheet.\n\n* **Parameters:**\n  * **table_name** \u2013 name for the table\n  * **table_range** \u2013 source table range, if not given then\n    the whole used range of source_worksheet will be used\n\n#### export_as_pdf(pdf_filename: str, excel_filename: str | None = None) \u2192 None\n\nExport Excel as PDF file\n\nIf Excel filename is not given, the currently open workbook\nwill be exported as PDF.\n\n* **Parameters:**\n  * **pdf_filename** \u2013 PDF filename to save\n  * **excel_filename** \u2013 Excel filename to open\n\n#### find(search_string: str, search_range: Any | None = None, max_results: int | None = None, search_order: SearchOrder = SearchOrder.ROWS, match_case: bool = False, search_type: str | None = None, search_after: str | None = None, exact: bool = False) \u2192 List[Any]\n\nKeyword for finding text in the current worksheet.\n\nWildcard can be used in a search string. The asterisk (\\*) represents\nany series of characters, and the question mark (?) represents a single\ncharacter.\n\nPython example:\n\n```python\nranges = excel.find(\"32.145.???.1\", \"IP!E1:E9999\", 6)\nfor r in ranges:\n    print(f\"ADDR = {r.Address} VALUE = {r.Value}\")\n    r.Value = r.Value.replace(\"32.145.\", \"192.168.\")\n    r.BorderAround()\n```\n\nRobot Framework example:\n\n```robotframework\n${ranges}=    Find\n...    search_string=32.145.*\n...    search_range=IP!A1:A9999\n...    max_results=6\n...    search_order=COLUMNS\n\nFOR    ${ranges}    IN    @{ranges}\n    ${value}=    Set Variable    ${range.Value}\n    Log to console    ADDR = ${range.Address} VALUE = ${value}\n    ${new_value}=    Replace String    ${value}    32.145.    192.168.\n    Set Object Property    ${range}    Value    ${new_value}\n    Call Method    ${range}    BorderAround\nEND\n```\n\n* **Parameters:**\n  * **search_string** \u2013 what to search for\n  * **search_range** \u2013 if not given will search the current\n    worksheet\n  * **max_results** \u2013 can be used to limit number of results\n  * **search_order** \u2013 by default search is executed by ROWS,\n    can be changed to COLUMNS\n  * **match_case** \u2013 if True then the search is case sensitive\n  * **search_type** \u2013 can be FORMULAS, VALUES, COMMENTS or COMMENTS THREADED\n  * **search_after** \u2013 search after this cell\n  * **exact** \u2013 if True then the search is expected to be a exact match\n* **Returns:**\n  list of Range objects\n\n#### find_first_available_cell(worksheet: Any = None, row: int = 1, column: int = 1) \u2192 Any\n\nFind first available free cell\n\n* **Parameters:**\n  * **worksheet** \u2013 worksheet to handle, defaults to active worksheet if None\n  * **row** \u2013 starting row for search, defaults to 1\n  * **column** \u2013 starting column for search, defaults to 1\n* **Returns:**\n  tuple (row, column) or (None, None) if not found\n\n#### find_first_available_row(worksheet: Any | None = None, row: int = 1, column: int = 1) \u2192 Any\n\nFind first available free row\n\n* **Parameters:**\n  * **worksheet** \u2013 worksheet to handle, defaults to active worksheet if None\n  * **row** \u2013 starting row for search, defaults to 1\n  * **column** \u2013 starting column for search, defaults to 1\n* **Returns:**\n  row or None\n\n#### get_pivot_tables(pivot_table_name: str | None = None, as_list: bool = True) \u2192 Dict[str, Any]\n\nReturn pivot tables in the current worksheet.\n\nPython example:\n\n```python\nfrom RPA.Tables import Tables\n\npivot_tables = excel.get_pivot_tables()\n\nfor tbl_name, tbl_list in pivot_tables.items():\n    print(f\"TABLE NAME: {tbl_name}\")\n    table = Tables().create_table(data=tbl_list[1:], columns=tbl_list[0])\n    print(table)\n```\n\nRobot Framework example:\n\n```robotframework\n${pivots}=    Get Pivot Tables\nFOR    ${tablename}    ${pivot}    IN    &{pivots}\n    Log To Console    ${tablename}\n    ${table}=    RPA.Tables.Create Table\n    ...   data=${{$pivot[1:]}}\n    ...   columns=${{$pivot[0]}}\n    Log To Console    ${table}\nEND\n```\n\n* **Parameters:**\n  * **pivot_table_name** \u2013 name of the pivot table to return,\n    will return by default all pivot tables\n  * **as_list** \u2013 if True then the pivot table data is returned as list\n    of lists, if False then the data is returned as list of Range objects\n* **Returns:**\n  dictionary of pivot tables (names as keys and table data as values)\n\n#### get_range(table_range: str) \u2192 Any\n\nGet range object for the given range address.\n\nThese object properties and methods can be then called.\n\nPython example:\n\n```python\nsource = excel.get_range('A1:B2')\nfor r in source:\n    print(f\"ADDR = {r.Address} VAL = {r.Value}\")\n    r.BorderAround()\nsource.Merge()\n# Creating a formula and copying it to another range\nexcel.get_range(\"E4\").Formula = \"=SUM(C4:D4)\"\ndestination = excel.get_range(\"E5:E10\")\nexcel.get_range(\"E4\").Copy(destination)\n```\n\nRobot Framework example:\n\n```robotframework\n${range}=    Get Range    data!A1:A4\nFOR    ${r}    IN    @{range}\n    Log To Console    ADDR = ${r.Address} VAL = ${r.Value}\n    Call Method  ${r}    BorderAround\nEND\nCall Method    ${range}    Merge\n```\n\n* **Parameters:**\n  **table_range** \u2013 range to return\n* **Returns:**\n  range object\n\n#### list_tables() \u2192 List[str]\n\nReturn tables in the current worksheet.\n\n* **Returns:**\n  list of table names\n\n#### merge_range(initial_range: Any) \u2192 None\n\nMerges a range of cells.\n\n* **Parameters:**\n  **initial_range** \u2013 range of cells to merge\n\n#### open_application(visible: bool = False, display_alerts: bool = False) \u2192 None\n\nOpen the application.\n\n* **Parameters:**\n  * **visible** \u2013 Show the window on opening. (False by default)\n  * **display_alerts** \u2013 Display alert popups. (False by default)\n\n#### open_workbook(filename: str) \u2192 None\n\nOpen Excel by filename\n\nBy default sets active worksheet to sheet number 1\n\n* **Parameters:**\n  **filename** \u2013 path to filename\n\n#### quit_application(save_changes: bool = False) \u2192 None\n\nQuit the application.\n\n* **Parameters:**\n  **save_changes** \u2013 Enable to save changes on quit. (False by default)\n\n#### read_from_cells(worksheet: Any = None, row: int = None, column: int = None) \u2192 str\n\nRead value from cell.\n\n* **Parameters:**\n  * **worksheet** \u2013 worksheet to handle, defaults to active worksheet if None\n  * **row** \u2013 target row, defaults to None\n  * **column** \u2013 target row, defaults to None\n* **Raises:**\n  **ValueError** \u2013 if cell is not given\n\n#### remove_hidden_columns_and_rows(initial_range: Any, worksheet: str | None = None) \u2192 Any\n\nRemoves hidden columns and rows from a range and returns a new range.\n\n* **Parameters:**\n  * **initial_range** \u2013 range of cells to remove hidden columns and rows from\n  * **worksheet** \u2013 set active worksheet (name) before removing hidden\n    columns and rows\n* **Returns:**\n  new range or initial range if no hidden cells found\n\n#### run_macro(macro_name: str, \\*args: Any) \u2192 None\n\nRun Excel macro with given name\n\n* **Parameters:**\n  * **macro_name** \u2013 macro to run\n  * **args** \u2013 arguments to pass to macro\n\n#### save_excel() \u2192 None\n\nSaves Excel file\n\n#### save_excel_as(filename: str, autofit: bool = False, file_format=None) \u2192 None\n\nSave Excel with name if workbook is open\n\n* **Parameters:**\n  * **filename** \u2013 where to save file\n  * **autofit** \u2013 autofit cell widths if True, defaults to False\n  * **file_format** \u2013 format of file\n\n**Note:** Changing the file extension for the path does not\naffect the actual format. To use an older format, use\nthe `file_format` argument with one of the following values:\n\n[https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat](https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat)\n\nExamples:\n\n```robotframework\n# Save workbook in modern format\nSave excel as    orders.xlsx\n\n# Save workbook in Excel 97 format (format from above URL)\nSave excel as    legacy.xls   file_format=${56}\n```\n\n#### set_active_worksheet(sheetname: str = None, sheetnumber: int = None) \u2192 None\n\nSet active worksheet by either its sheet number or name\n\n* **Parameters:**\n  * **sheetname** \u2013 name of Excel sheet, defaults to None\n  * **sheetnumber** \u2013 index of Excel sheet, defaults to None\n\n#### set_object_property(object_instance, property_name: str, value: str)\n\nSet the property of any object.\n\nThis is a utility keyword for Robot Framework syntax to set object\nproperty values.\n\n```robotframework\n${new_value}=    Replace String    ${value}    10.132.    5511.11.\nSet Object Property    ${result}    Value    ${new_value}\n```\n\n* **Parameters:**\n  * **object_instance** \u2013 object instance to set the property\n  * **property_name** \u2013 property name to set\n  * **value** \u2013 value to set\n\n#### unmerge_range(initial_range: Any) \u2192 None\n\nUnmerges a range of cells.\n\n* **Parameters:**\n  **initial_range** \u2013 range of cells to unmerge\n\n#### write_data_to_range(target_range: Any, values: Table | List[List], log_warnings: bool = True)\n\nWrites data to the specified range(s) in the Excel worksheet.\n\nThe range width should match the number of columns in the data.\n\nMultiple ranges can be specified by separating them with a semicolon, but\nstill the total width of ranges should match the number of columns in the data.\n\nPython example:\n\n```python\nfrom RPA.Tables import Tables\nfrom RPA.Excel.Application import Application\n\nexcel = Application()\n\ntable = Tables().read_table_from_csv(\"input.csv\", header=True)\nexcel.open_workbook(\"result.xslx)\nexcel.write_data_to_range(\"A2:P100\", table)\n```\n\nRobot Framework example:\n\n```robotframework\n${input_table}=    Read table from CSV    input.csv    header=True\nOpen Workbook      result.xlsx\nWrite Data To Range    A2:L21    ${input_table}   # Single range\nWrite Data To Range    C2:E21;G2:I21    ${input_table}   # Multiple ranges\n```\n\n* **Parameters:**\n  * **target_range** \u2013 A1 string presentation of the range(s) to write or\n    Range object.\n  * **values** \u2013 Table or list of lists to write to the range(s).\n  * **log_warnings** \u2013 on False will suppress logging warning, default\n    is True (warnings are logged)\n\n#### write_to_cells(worksheet: Any = None, row: int = None, column: int = None, value: str = None, number_format: str = None, formula: str = None) \u2192 None\n\nWrite value, number_format and/or formula into cell.\n\n* **Parameters:**\n  * **worksheet** \u2013 worksheet to handle, defaults to active worksheet if None\n  * **row** \u2013 target row, defaults to None\n  * **column** \u2013 target row, defaults to None\n  * **value** \u2013 possible value to set, defaults to None\n  * **number_format** \u2013 possible number format to set, defaults to None\n  * **formula** \u2013 possible format to set, defaults to None\n* **Raises:**\n  **ValueError** \u2013 if cell is not given\n"
  },
  {
    "module": "RPA.Excel.Files.Files",
    "markdown": "# Python API\n\n## Excel.Files\n\n### *class* RPA.Excel.Files.Files\n\nThe Excel.Files library can be used to read and write Excel\nfiles without the need to start the actual Excel application.\n\nIt supports both legacy `.xls` files and modern `.xlsx` files.\n\n**Note:** To run macros or load password protected worksheets,\nplease use the Excel application library.\n\n**Examples**\n\n**Robot Framework**\n\nA common use-case is to load an existing Excel file as a table,\nwhich can be iterated over later in a Robot Framework keyword or task:\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Tables\nLibrary    RPA.Excel.Files\n\n*** Keywords ***\nRead orders as table\n    Open workbook    ${ORDERS_FILE}\n    ${worksheet}=    Read worksheet   header=${TRUE}\n    ${orders}=       Create table     ${worksheet}\n    [Return]         ${orders}\n    [Teardown]       Close workbook\n```\n\nProcessing all worksheets in the Excel file and checking row count:\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Excel.Files\n\n*** Variables ***\n${EXCEL_FILE}   /path/to/excel.xlsx\n\n*** Tasks ***\nRows in the sheet\n    [Setup]      Open Workbook    ${EXCEL_FILE}\n    @{sheets}=   List Worksheets\n    FOR  ${sheet}  IN   @{sheets}\n        ${count}=  Get row count in the sheet   ${sheet}\n        Log   Worksheet '${sheet}' has ${count} rows\n    END\n\n*** Keywords ***\nGet row count in the sheet\n    [Arguments]      ${SHEET_NAME}\n    ${sheet}=        Read Worksheet   ${SHEET_NAME}\n    ${rows}=         Get Length  ${sheet}\n    [Return]         ${rows}\n```\n\nCreating a new Excel file with a dictionary:\n\n```robotframework\n*** Tasks ***\nCreating new Excel\n    Create Workbook  my_new_excel.xlsx\n    FOR    ${index}    IN RANGE    20\n        &{row}=       Create Dictionary\n        ...           Row No   ${index}\n        ...           Amount   ${index * 25}\n        Append Rows to Worksheet  ${row}  header=${TRUE}\n    END\n    Save Workbook\n```\n\nCreating a new Excel file with a list:\n\n```robotframework\n*** Variables ***\n@{heading}   Row No   Amount\n@{rows}      ${heading}\n\n*** Tasks ***\nCreating new Excel\n    Create Workbook  my_new_excel.xlsx\n    FOR    ${index}    IN RANGE   1  20\n        @{row}=         Create List   ${index}   ${index * 25}\n        Append To List  ${rows}  ${row}\n    END\n    Append Rows to Worksheet  ${rows}\n    Save Workbook\n```\n\n**Python**\n\nThe library can also be imported directly into Python.\n\n```python\nfrom RPA.Excel.Files import Files\n\ndef read_excel_worksheet(path, worksheet):\n    lib = Files()\n    lib.open_workbook(path)\n    try:\n        return lib.read_worksheet(worksheet)\n    finally:\n        lib.close_workbook()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### append_rows_to_worksheet(content: Any, name: str | None = None, header: bool = False, start: int | None = None, formatting_as_empty: bool | None = False) \u2192 List[dict]\n\nAppend values to the end of the worksheet.\n\n* **Parameters:**\n  * **content** \u2013 Rows of values to append\n  * **name** \u2013 Name of worksheet to append to (optional).\n    Defaults to the active worksheet.\n  * **header** \u2013 Set rows according to existing header row\n  * **start** \u2013 Start of data, NOTE: Only required when header is True\n  * **formatting_as_empty** \u2013 if True, the cells containing only\n    formatting (no values) are considered empty.\n* **Returns:**\n  List of dictionaries that represents the worksheet\n\nThe `content` argument can be of any tabular format. Typically,\nthis is a Table object created by the `RPA.Tables` library,\nbut it can also be a list of lists, or a list of dictionaries.\n\nIf the `header` flag is enabled, the existing header in the worksheet\nis used to insert values in the correct columns. This assumes that\nthat source data has this data available.\n\nIf the header is not on the first row of the worksheet,\nthe `start` argument can be used to give the correct row index.\n\nExamples:\n\n```robotframework\n# Append an existing Table object\n # Create a new table using a Dictionary of Lists\n@{table_name}=    Create List    Sara    Beth    Amy\n@{table_age}=    Create List    ${48}    ${21}    ${57}\n&{table}=    Create Dictionary    name=${table_name}    age=${table_age}\nCreate Table    ${table}\nAppend rows to worksheet    ${table}\nSave Workbook\n\n# Append to a worksheet with headers on row 5\n # Create a new table using a Dictionary of Lists\n@{table_name}=    Create List    Sara    Beth    Amy\n@{table_age}=    Create List    ${48}    ${21}    ${57}\n&{table}=    Create Dictionary    name=${table_name}    age=${table_age}\nCreate Table    ${table}\nAppend rows to worksheet    ${table}    header=${TRUE}   start=5\nSave Workbook\n```\n\n```python\n# Append an existing Table object\ntable = {\n    \"name\": [\"Sara\", \"Beth\", \"Amy\"],\n    \"age\":  [    48,     21,     57],\n    }\nlib.append_rows_to_worksheet(table)\nlib.save_workbook()\n\n# Append to a worksheet with headers on row 5\ntable = {\n    \"name\": [\"Sara\", \"Beth\", \"Amy\"],\n    \"age\":  [    48,     21,     57],\n    }\nlib.append_rows_to_worksheet(table, header=True, start=5)\nlib.save_workbook()\n```\n\n#### auto_size_columns(start_column: int | str, end_column: int | str | None = None, width: int | None = None)\n\nAuto size column widths.\n\nNote. non-default font sizes might cause auto sizing issues\n\n* **Parameters:**\n  * **start_column** \u2013 column number or name to start from\n  * **end_column** \u2013 optional column number or name for last column\n  * **width** \u2013 if given will resize columns to this size, otherwise\n    will auto_size\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nAuto Size Columns   A   D    # will try auto size\nAuto Size Columns   B   D   16  # will set A-D columns sizes to 16\nAuto Size Columns   A   width=24  # will set column A size to 24\n```\n\nPython example.\n\n```python\nlib.auto_size_columns(\"A\", \"D\")\nlib.auto_size_columns(\"C\", width=40)\n```\n\n#### clear_cell_range(range_string: str)\n\nClear cell values for a given range.\n\n* **Parameters:**\n  **range_string** \u2013 single cell or range of cells\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n# area of cells\nClear Cell Range    A9:A100\n# single cell\nClear Cell Range    A2\n```\n\nPython example.\n\n```python\nlib.clear_cell_range(\"A1\")\nlib.clear_cell_range(\"B2:B50\")\n```\n\n#### close_workbook() \u2192 None\n\nClose the active workbook.\n\nExamples:\n\n```robotframework\n# Close active workbook\nClose Workbook\n```\n\n```python\n# Close active workbook\nlib.close_workbook()\n```\n\n#### copy_cell_values(source_range: str, target: str)\n\nCopy cells from source to target.\n\n* **Parameters:**\n  * **source_range** \u2013 single cell or range of cells\n  * **target** \u2013 copy to this cell\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nCopy Cell Values   A1:D4   G10\n```\n\nPython example.\n\n```python\nlib.copy_cell_values(\"A1:D4\", \"G10\")\n```\n\n#### create_workbook(path: str | None = None, fmt: str = 'xlsx', sheet_name: str | None = None) \u2192 XlsWorkbook | XlsxWorkbook\n\nCreate and open a new Excel workbook.\n\nAutomatically also creates a new worksheet with the name sheet_name.\n(defaults to \u201cSheet\u201d)\n\n**Note:** Must be paired with the `Save Workbook` keyword\nor the newly created workbook will be deleted upon robot completion.\n\n**Note:** The file name/path must be set in either the `Create Workbook`\nkeyword or the `Save Workbook` keyword and must include the file extension.\n\n* **Parameters:**\n  * **path** \u2013 Save path for workbook; defaults to robot root if not provided.\n  * **fmt** \u2013 Format of workbook, i.e. xlsx or xls; Defaults to xlsx if not\n    provided.\n  * **sheet_name** \u2013 Custom name for the initial sheet.\n* **Returns:**\n  Workbook object.\n\nExamples:\n\n```robotframework\n# Create modern format workbook.\nCreate Workbook\nSave Workbook    orders.xlsx\n\n# Create modern format workbook with custom sheet name.\nCreate Workbook  sheet_name=MyCustomSheetName\nSave Workbook    orders.xlsx\n\n# Create modern format workbook with a path set.\nCreate Workbook    path=${OUTPUT_DIR}${/}orders.xlsx\nSave Workbook\n\n# Create legacy format workbook.\nCreate Workbook    fmt=xls\nSave Workbook    orders.xls\n\n# Create legacy format workbook with a path set.\n# Note that the file name must be set in the `Create Workbook` keyword\n#  if the path argument is used.\nCreate Workbook    path=${OUTPUT_DIR}${/}orders.xls    fmt=xls\nSave Workbook\n```\n\n```python\n# Create modern format workbook with defaults.\nlib = Files()\nlib.create_workbook()\nlib.save_workbook(\"orders.xlsx\")\n\n# Create modern format workbook with a path set.\nlib = Files()\nlib.create_workbook(path=\"./output/orders.xlsx\", fmt=\"xlsx\")\nlib.save_workbook()\n\n# Create legacy format workbook.\nlib = Files()\nlib.create_workbook(fmt=\"xls\")\nlib.save_workbook(\"orders.xls\")\n\n# Create legacy format workbook with a path set.\n# Note that the file name must be set in the `Create Workbook` keyword\n#  if the path is used.\nlib = Files()\nlib.create_workbook(path=\"./output/orders.xls\", fmt=\"xls\")\nlib.save_workbook()\n```\n\n#### create_worksheet(name: str, content: Any | None = None, exist_ok: bool | None = False, header: bool | None = False) \u2192 None\n\nCreate a new worksheet in the current workbook.\n\n* **Parameters:**\n  * **name** \u2013 Name of new worksheet\n  * **content** \u2013 Optional content for worksheet\n  * **exist_ok** \u2013 If False, raise an error if name is already in use\n  * **header** \u2013 If content is provided, write headers to worksheet\n\nExamples:\n\n```robotframework\n# Create a new blank worksheet named \"Customers\"\nCreate Worksheet    Customers\n\n# Create a new worksheet with headers and contents using\n# a List of Dictonaries\n# Don't forget to `Save Workbook` once your changes are complete\n&{Employees_Row1}=    Create Dictionary    name=Mark    age=${58}\n&{Employees_Row2}=    Create Dictionary    name=John    age=${22}\n&{Employees_Row3}=    Create Dictionary    name=Adam    age=${67}\n@{Worksheet_Data}=    Create List\n...    ${Worksheet_Data_row1}\n...    ${Worksheet_Data_row2}\n...    ${Worksheet_Data_row3}\nCreate Worksheet\n...    name=Employees\n...    content=${Worksheet_Data}\n...    header=True\nSave Workbook\n\n# Create a new workseet using a Dictionary of Lists\n# Don't forget to `Save Workbook` once your changes are complete\n@{Employees_name}=    Create List    Mark    John    Adam\n@{Employees_age}=    Create List    ${58}    ${22}    ${67}\n&{Worksheet_Data}=    Create Dictionary\n...    name=${Worksheet_Data_name}\n...    age=${Worksheet_Data_age}\nCreate Worksheet\n...    name=Employees\n...    content=${Worksheet_Data}\n...    header=True\nSave Workbook\n```\n\n```python\n# Create a new blank worksheet named \"Customers\"\nlib.create_worksheet(\"Customers\")\n\n# Create a new workseet using a List of Dictionaries\n# Don't forget to `Save Workbook` once your changes are complete\nWorksheet_Data = [\n    {\"name\": \"Mark\", \"age\": 58},\n    {\"name\": \"John\", \"age\": 22},\n    {\"name\": \"Adam\", \"age\": 67},\n    ]\nlib.create_worksheet(name=\"Employees\",content=Worksheet_Data,header=True)\nlib.save_workbook()\n\n# Create a new workseet using a Dictionary of Lists\n# Don't forget to `Save Workbook` once your changes are complete\nWorksheet_Data = {\n    \"name\": [\"Mark\", \"John\", \"Adam\"],\n    \"age\":  [    58,     22,     67],\n    }\nlib.create_worksheet(name=\"Employees\",content=Worksheet_Data,header=True)\nlib.save_workbook()\n```\n\n#### delete_columns(start: int | str, end: int | str | None = None)\n\nDelete column or columns beginning from start column number/name to\npossible end column number/name.\n\n* **Parameters:**\n  * **start** \u2013 column number or name to start deletion from\n  * **end** \u2013 optional column number or name for last column to delete\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nDelete Columns   C       # delete column C\nDelete Columns   3       # delete column 3 (same as C)\nDelete Columns   E  AA   # delete rows E-AA\n```\n\nPython example.\n\n```python\nlib.delete_columns(\"D\")\nlib.delete_rows(1, \"JJ\")\n```\n\n#### delete_rows(start: int, end: int | None = None)\n\nDelete row or rows beginning from start row number to\npossible end row number.\n\n* **Parameters:**\n  * **start** \u2013 row number to start deletion from\n  * **end** \u2013 optional row number for last row to delete\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nDelete Rows   2       # delete row 2\nDelete Rows   5  10   # delete rows 5-10\n```\n\nPython example.\n\n```python\nlib.delete_rows(2)\nlib.delete_rows(5,10)\n```\n\n#### find_empty_row(name: str | None = None) \u2192 int\n\nFind the first empty row after existing content,\nand return the row number.\n\n* **Parameters:**\n  **name** \u2013 Name of worksheet (optional). Defaults to the active worksheet.\n* **Returns:**\n  First row number of empty row\n\nExamples:\n\n```robotframework\n${next}=    Find empty row\n```\n\n```python\nnext = lib.find_empty_row()\n```\n\n#### get_active_worksheet() \u2192 str\n\nGet the name of the worksheet which is currently active.\n\n* **Returns:**\n  Active worksheet name\n\nExamples:\n\n```robotframework\n${Active_Worksheet}=    Get Active Worksheet\n```\n\n```python\nActive_Worksheet = lib.get_active_worksheet()\n```\n\n#### get_cell_value(row: int, column: str | int, name: str | None = None) \u2192 Any\n\nGet a cell value in the given worksheet.\n\n* **Parameters:**\n  * **row** \u2013 Index of row to read, e.g. 3\n  * **column** \u2013 Name or index of column, e.g. C or 7\n  * **name** \u2013 Name of worksheet (optional). Defaults to active worksheet.\n* **Returns:**\n  Cell value\n\nExamples:\n\n```robotframework\n# Read header names\n${column1}=    Get cell value    1    A\n${column2}=    Get cell value    1    B\n${column3}=    Get cell value    1    C\n```\n\n```python\n# Read header names\ncolumn1 = lib.get_cell_value(1, \"A\")\ncolumn2 = lib.get_cell_value(1, \"B\")\ncolumn3 = lib.get_cell_value(1, \"C\")\n```\n\n#### get_worksheet_value(row: int, column: str | int, name: str | None = None) \u2192 Any\n\nAlias for keyword `Get cell value`, see the original keyword\nfor documentation.\n\n#### hide_columns(start_column: int | str, end_column: int | str | None = None)\n\nHide column or columns in worksheet.\n\n* **Parameters:**\n  * **start_column** \u2013 column number or name to start from\n  * **end_column** \u2013 optional column number or name for last column\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nHide Columns   A   D    # hide columns A-D\nHide Columns   A        # hide column A\n```\n\nPython example.\n\n```python\nlib.hide_columns(\"A\", \"D\")\nlib.hide_columns(\"A\")\n```\n\n#### insert_columns_after(column: int | str, amount: int = 1)\n\nInsert column or columns after a column number/name.\n\n* **Parameters:**\n  * **column** \u2013 insert after this column\n  * **amount** \u2013 number of columns to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Columns After   C      # insert 1 column after column C\nInsert Columns Before   A  3   # insert 3 columns after column A\n```\n\nPython example.\n\n```python\nlib.insert_columns_after(\"C\")\nlib.insert_columns_after(\"A\", 3)\n```\n\n#### insert_columns_before(column: int | str, amount: int = 1)\n\nInsert column or columns before a column number/name.\n\n* **Parameters:**\n  * **column** \u2013 insert before this column\n  * **amount** \u2013 number of columns to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Columns Before   C      # insert 1 column before column C\nInsert Columns Before   A  3   # insert 3 columns before column A\n```\n\nPython example.\n\n```python\nlib.insert_columns_before(\"C\")\nlib.insert_columns_before(\"A\", 3)\n```\n\n#### insert_image_to_worksheet(row: int, column: int | str, path: str, scale: float = 1.0, name: str | None = None) \u2192 None\n\nInsert an image into the given cell.\n\nThe `path` argument should be a local file path to the image file.\n\nBy default the image is inserted in the original size, but it can\nbe scaled with the `scale` argument. It\u2019s scaled with a factor\nwhere the value `1.0` is the default.\n\n* **Parameters:**\n  * **row** \u2013 Index of row to write\n  * **column** \u2013 Name or index of column\n  * **path** \u2013 Path to image file\n  * **scale** \u2013 Scale of image (optional). Default value is \u201c1.0\u201d.\n  * **name** \u2013 Name of worksheet (optional). Defaults to the active worksheet.\n\nExamples:\n\n```robotframework\nInsert image to worksheet    ${last_row}    A    screenshot.png\n```\n\n```python\nlib.insert_image_to_worksheet(last_row, \"A\", \"screenshot.png\")\n```\n\n#### insert_rows_after(row: int, amount: int = 1)\n\nInsert row or rows after a row number.\n\n* **Parameters:**\n  * **row** \u2013 insert after this row\n  * **amount** \u2013 number of rows to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Rows After   3      # insert 1 row after row 3\nInsert Rows After   1  3   # insert 3 rows after row 1\n```\n\nPython example.\n\n```python\nlib.insert_rows_after(1)\nlib.insert_rows_after(1, 3)\n```\n\n#### insert_rows_before(row: int, amount: int = 1)\n\nInsert row or rows before a row number.\n\n* **Parameters:**\n  * **row** \u2013 insert before this row\n  * **amount** \u2013 number of rows to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Rows Before   3      # insert 1 row before row 3\nInsert Rows Before   1  3   # insert 3 rows before row 1\n```\n\nPython example.\n\n```python\nlib.insert_rows_before(1)\nlib.insert_rows_before(1, 3)\n```\n\n#### list_worksheets() \u2192 List[str]\n\nList all names of worksheets in the given workbook.\n\n* **Returns:**\n  List containing the names of the worksheets\n\nExamples:\n\n```robotframework\n# List Worksheets will read the worksheet names into a list variable\n# The variable should be declared with the List type \"@\" when being used\n# to store the sheet names from the List Worksets keyword\n@{sheets}=    List Worksheets\n```\n\n```python\n# List Worksheets will read the worksheet names into a list variable\n# The variable should be declared with the List type \"@\" when being used\n# to store the sheet names from the List Worksets keyword\nsheets = lib.list_worksheets()\n```\n\n#### move_range(range_string: str, rows: int = 0, columns: int = 0, translate: bool = True)\n\nMove range of cells by given amount of rows and columns.\n\nFormulas are translated to match new location by default.\n\n*Note*. There is a bug in the openpyxl on moving negative rows/columns.\n\n* **Parameters:**\n  * **range_string** \u2013 cell range\n  * **rows** \u2013 number of rows to move\n  * **columns** \u2013 number of columns to move\n  * **translate** \u2013 are formulas translated for a new location\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n# move range 4 rows down\nMove Range   E2:E10    rows=4\n# move range 2 rows down, 2 columns right\nMove Range   E2:E10    rows=2  columns=2\n```\n\nPython example.\n\n```python\nlib.move_range(\"E2:E10\", rows=4)\nlib.move_range(\"E2:E10\", rows=2, columns=2)\n```\n\n#### open_workbook(path: str, data_only: bool | None = False, read_only: bool | None = False) \u2192 XlsWorkbook | XlsxWorkbook\n\nOpen an existing Excel workbook.\n\nOpens the workbook in memory and sets it as the active workbook.\n**This library can only have one workbook open at a time, and\nany previously opened workbooks are closed first.**\n\nThe file can be in either `.xlsx` or `.xls` format.\n\n* **Parameters:**\n  * **path** \u2013 path to Excel file\n  * **data_only** \u2013 controls whether cells with formulas have either\n    the formula (default, False) or the value stored the last time Excel\n    read the sheet (True). Affects only `.xlsx` files.\n* **Returns:**\n  Workbook object\n\nExamples:\n\n```robotframework\n# Open workbook with only path provided\nOpen Workbook    path/to/file.xlsx\n\n# Open workbook with path provided and reading formulas in cells\n# as the value stored\n# Note: Can only be used with XLSX workbooks\nOpen Workbook    path/to/file.xlsx    data_only=True\n```\n\n```python\n# Open workbook with only path provided\nlib.open_workbook(path=\"path/to/file.xlsx\")\n\n# Open workbook with path provided and reading formulas in cells\n# as the value stored\n# Note: Can only be used with XLSX workbooks\nlib.open_workbook(path=\"path/to/file.xlsx\", data_only=True)\n```\n\n#### read_worksheet(name: str | None = None, header: bool | None = False, start: int | None = None) \u2192 List[dict]\n\nRead the content of a worksheet into a list of dictionaries.\n\nEach key in the dictionary will be either values from the header row,\nor Excel-style column letters.\n\n* **Parameters:**\n  * **name** \u2013 Name of worksheet to read (optional).\n    Defaults to the active worksheet.\n  * **header** \u2013 If True, use the first row of the worksheet\n    as headers for the rest of the rows. Default is False.\n  * **start** \u2013 Row index to start reading data from (1-indexed).\n    Default value is row 1.\n* **Returns:**\n  List of dictionaries that represents the worksheet\n\nExamples:\n\n```robotframework\n# The most simple form. Column keys will be Column letters.\n${rows}=    Read Worksheet\n\n# Since `header=True` the keys will be the header values\n${rows}=    Read Worksheet     header=True\n\n# Uses the header values as keys and starts reading at row 3\n${rows}=    Read Worksheet     header=True    start=${3}\n```\n\n```python\n# The most simple form. Keys will be Column letters.\nrows = lib.read_worksheet()\n\n# Since `header=True` the keys will be the header values\nrows = lib.read_worksheet(header=True)\n\n# Uses the header values as keys and starts reading at row 3\nrows = lib.read_worksheet(header=True, start=3)\n```\n\n#### read_worksheet_as_table(name: str | None = None, header: bool = False, trim: bool = True, start: int | None = None) \u2192 Table\n\nRead the contents of a worksheet into a Table container. Allows\nsorting/filtering/manipulating using the `RPA.Tables` library.\n\n* **Parameters:**\n  * **name** \u2013 Name of worksheet to read (optional).\n    Defaults to the active worksheet.\n  * **header** \u2013 If True, use the first row of the worksheet\n    as headers for the rest of the rows. Default value is False.\n  * **trim** \u2013 Remove all empty rows from the end of the worksheet.\n    Default value is True.\n  * **start** \u2013 Row index to start reading data from (1-indexed).\n    Default value is row 1.\n* **Returns:**\n  Table object that represents the worksheet\n\nExamples:\n\n```robotframework\n# The most simple form. Column keys will be Column letters.\n${table}=    Read Worksheet As Table\n\n# Since `header=True` the keys will be the header values\n${table}=    Read Worksheet As Table     header=True\n\n# Uses the header values as keys and starts reading at row 3\n${table}=    Read Worksheet As Table     header=True    start=${3}\n```\n\n```python\n# The most simple form. Keys will be Column letters.\ntable = lib.read_worksheet_as_table()\n\n# Since `header=True` the keys will be the header values\ntable = lib.read_worksheet_as_table(header=True)\n\n# Uses the header values as keys and starts reading at row 3\ntable = lib.read_worksheet_as_table(header=True, start=3)\n```\n\n#### remove_worksheet(name: str | None = None) \u2192 None\n\nRemove a worksheet from the active workbook.\n\n* **Parameters:**\n  **name** \u2013 Name of worksheet to remove (optional).\n  Defaults to the active worksheet.\n\nExamples:\n\n```robotframework\n# Remove last worksheet\n${sheets}=       List worksheets\nRemove worksheet    ${sheets}[-1]\n\n# Remove worksheet by name\nRemove Worksheet    Sheet\n```\n\n```python\n# Remove last worksheet\nsheets = lib.list_worksheets()\nlib.remove_worksheet(sheets[-1])\n\n# Remove worksheet by name\nlib.remove_worksheet(\"Sheet\")\n```\n\n#### rename_worksheet(src_name: str, dst_name: str) \u2192 None\n\nRename an existing worksheet in the active workbook.\n\n* **Parameters:**\n  * **src_name** \u2013 Current name of worksheet\n  * **dst_name** \u2013 Future name of worksheet\n\nExamples:\n\n```robotframework\nRename worksheet    Sheet    Orders\n```\n\n```python\nlib.rename_worksheet(\"Sheet\",\"Orders\")\n```\n\n#### save_workbook(path: str | None = None) \u2192 XlsWorkbook | XlsxWorkbook\n\nSave the active workbook.\n\n**Note:** No changes to the workbook are saved to the actual file unless\nthis keyword is called.\n\n* **Parameters:**\n  **path** \u2013 Path to save to. If not given, uses path given\n  when opened or created.\n* **Returns:**\n  Workbook object\n\nExamples:\n\n```robotframework\n# Saving the active workbook to a new location/filename or saving to\n# a new location/filename\n# Note: You cannot use Save Workbook to convert from XLSX to XLS\n# or vice-versa\nSave Workbook   path=${OUTPUT_DIR}${/}orders.xlsx\n\n# Saving the active workbook changes if location/filename were set\n# in Create Workbook or Open Workbook\nSave Workbook\n```\n\n```python\n# Saving the active workbook to a new location/filename or saving to\n# a new location/filename\n# Note: You cannot use Save Workbook to convert from XLSX to XLS\n# or vice-versa\nlib.save_workbook(path=\"./output/orders.xlsx\")\n\n# Saving the active workbook changes if location/filename were set\n# in Create Workbook or Open Workbook\nlib.save_workbook()\n```\n\n#### set_active_worksheet(value: str | int) \u2192 None\n\nSet the active worksheet.\n\nThis keyword can be used to set the default worksheet for keywords,\nwhich removes the need to specify the worksheet name for each keyword.\nIt can always be overridden on a per-keyword basis.\n\n* **Parameters:**\n  **value** \u2013 Index or name of worksheet\n\nExamples:\n\n```robotframework\n# Set using the name of the worksheet\nSet Active Worksheet    Customers\n\n# Set using the index of the worksheet\n# Worksheet index begings at 0\nSet Active Worksheet    2\n```\n\n```python\n# Set using the name of the worksheet\nlib.set_active_worksheet(\"Customers\")\n\n# Set using the index of the worksheet\n# Worksheet index begings at 0\nlib.set_active_worksheet(2)\n```\n\n#### set_cell_format(row: int, column: str | int, fmt: str | float, name: str | None = None) \u2192 None\n\nSet format for cell.\n\nDoes not affect the values themselves, but changes how the values\nare displayed when opening with an external application such as\nMicrosoft Excel or LibreOffice Calc.\n\n* **Parameters:**\n  * **row** \u2013 Index of row to write, e.g. 3\n  * **column** \u2013 Name or index of column, e.g. C or 7\n  * **fmt** \u2013 Format code for cell\n  * **name** \u2013 Name of worksheet (optional). Defaults to active worksheet.\n\nThe `fmt` argument accepts all format code values that\nare supported by the aforementioned applications.\n\nSome examples of valid values:\n\n| Format   | Explanation                       |\n|----------|-----------------------------------|\n| 0.00     | Number with two decimal precision |\n| 0%       | Percentage without decimals       |\n| MM/DD/YY | Date with month, day, and year    |\n| @        | Text value                        |\n| BOOLEAN  | Boolean value                     |\n\nExamples:\n\n```robotframework\n# Set value to have one decimal precision\nSet cell format   2  B    00.0\n```\n\n```python\n# Set value to have one decimal precision\nlib.set_cell_format(2, \"B\", 00.0)\n```\n\n#### set_cell_formula(range_string: str, formula: str, transpose: bool = False)\n\nSet cell formula for given range of cells.\n\nIf transpose is set then formula is set for first cell of the\nrange and the rest of cells will transpose the function to match\nto that cell.\n\nOtherwise (by default) all cells will get the same formula.\n\n* **Parameters:**\n  * **range_string** \u2013 cell range\n  * **formula** \u2013 formula for the cell\n  * **transpose** \u2013 on True the cell formulas will be transposed\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n# all cells will have same formula\nSet Cell Formula   E2:E10    =B2+5\n# cells will have transposed formulas\n# E2 will have =B2+5\n# E3 will have =B3+5\n# etc\nSet Cell Formula   E2:E10    =B2+5   True\n```\n\nPython example.\n\n```python\nlib.set_cell_formula(\"E2:E10\", \"=B2+5\")\nlib.set_cell_formula(\"E2:E10\", \"=B2+5\", True)\n```\n\n#### set_cell_value(row: int, column: str | int, value: Any, name: str | None = None, fmt: str | float | None = None) \u2192 None\n\nSet a cell value in the given worksheet.\n\n* **Parameters:**\n  * **row** \u2013 Index of row to write, e.g. 3\n  * **column** \u2013 Name or index of column, e.g. C or 7\n  * **value** \u2013 New value of cell\n  * **name** \u2013 Name of worksheet (optional). Defaults to active worksheet.\n  * **fmt** \u2013 Format code for cell (optional)\n\nExamples:\n\n```robotframework\n# Set a value in the first row and column\nSet cell value    1    1    Some value\nSet cell value    1    A    Some value\n\n# Set a value with cell formatting\nSet cell value    2    B    ${value}    fmt=0%\n```\n\n```python\n# Set a value in the first row and column\nlib.set_cell_value(1, 1, \"Some value\")\nlib.set_cell_value(1, \"A\", \"Some value\")\n\n# Set a value with cell formatting\nlib.set_cell_value(2, \"B\", value, fmt=\"0%\")\n```\n\n#### set_cell_values(start_cell: str, values: list | Table, table_heading: bool = False)\n\nSet cell values given as list of lists or as a RPA.Tables.Table.\n\n*Note.* Will overwrite cells if table structure causes cells to overlap.\n\n* **Parameters:**\n  * **start_cell** \u2013 starting cell in a string\n  * **values** \u2013 list of lists or a Table\n  * **table_heading** \u2013 if values are given as a Table, this parameter\n    defines if Table headings should be inserted as a row\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n@{all_rows}=    Create List\n${headers}=    Create List    first    second   third  fourth\nFOR    ${num}    IN RANGE    1    2000\n    @{row}=    Create List    ${num}    ${num+1}    ${num*2}    ${num*4}\n    Append To List    ${all_rows}    ${row}\nEND\n#  Set Cell Values from Table (include headers)\n${table}=    Create Table    ${all_rows}    columns=${headers}\nSet Cell Values   G1   ${table}   True\n#  Set Cell Values from a list of lists\n# uncomment if headings should be added\n# Append To List  ${all_rows}   ${headers}\nSet Cell Values   M1   ${all_rows}\n\n# Simplest form of adding values\n@{values}=    Evaluate    [[1,2,3],[4,5,6],['a','b','c','d']]\nSet Cell Values   A1   ${values}\n```\n\nPython example.\n\n```python\ndata =  [[1,2,3],[4,5,6],['a','b','c','d']]\nlib.set_cell_values(\"E2\", data)\n```\n\n#### set_styles(range_string: str, font_name: str | None = None, family: str | None = None, size: int | None = None, bold: bool = False, italic: bool = False, underline: bool = False, strikethrough: bool = False, cell_fill: str | None = None, color: str | None = None, align_horizontal: str | None = None, align_vertical: str | None = None, number_format: str | None = None)\n\nSet styles for range of cells.\n\nPossible values for the align_horizontal:\n\n> - general\n> - left\n> - center\n> - right\n> - fill\n> - justify\n> - centerContinuous\n> - distributed\n\nPossible values for the align_vertical:\n\n> - top\n> - center\n> - bottom\n> - justify\n> - distributed\n\nSome examples for number_formats:\n\n> - General\n> - 0\n> - 0.00\n> - #,##0\n> - #,##0.00\n> - \u201c$\u201d#,##0_);(\u201c$\u201d#,##0)\n> - \u201c$\u201d#,##0_);[Red](\u201c$\u201d#,##0)\n> - 0%\n> - 0.00%\n> - 0.00E+00\n> - # ?/?\n> - # ??/??\n> - mm-dd-yy\n> - d-mmm-yy\n> - d-mmm\n> - h:mm AM/PM\n> - h:mm:ss AM/PM\n> - h:mm\n> - h:mm:ss\n> - m/d/yy h:mm\n* **Parameters:**\n  * **range_string** \u2013 single cell or range of cells\n  * **font_name** \u2013 name of the font\n  * **family** \u2013 font family name\n  * **size** \u2013 size for the font\n  * **bold** \u2013 font style bold\n  * **italic** \u2013 font style italics\n  * **underline** \u2013 font style underline\n  * **strikethrough** \u2013 font style strikethrough\n  * **cell_fill** \u2013 cell fill color, in hex or color name\n  * **color** \u2013 font color, in hex or color name\n  * **align_horizontal** \u2013 cell horizontal alignment\n  * **align_vertical** \u2013 cell vertical alignment\n  * **number_format** \u2013 cell number format\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nSet Styles    A1:D4\n...  bold=True\n...  cell_fill=lightblue\n...  align_horizontal=center\n...  number_format=h:mm AM/PM\n\nSet Styles    E2\n...  strikethrough=True\n...  color=FF0000\n```\n\nPython example.\n\n```python\nlib.set_styles(\"A1:D4\", bold=True, font_name=\"Arial\", size=24)\n```\n\n#### set_worksheet_value(row: int, column: str | int, value: Any, name: str | None = None, fmt: str | float | None = None) \u2192 Any\n\nAlias for keyword `Set cell value`, see the original keyword\nfor documentation.\n\n#### unhide_columns(start_column: int | str, end_column: int | str | None = None)\n\nUnhide column or columns in worksheet.\n\n* **Parameters:**\n  * **start_column** \u2013 column number or name to start from\n  * **end_column** \u2013 optional column number or name for last column\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nUnhide Columns   A   D    # unhide columns A-D\nUnhide Columns   A        # unhide column A\n```\n\nPython example.\n\n```python\nlib.unhide_columns(\"A\", \"D\")\nlib.unhide_columns(\"A\")\n```\n\n#### worksheet_exists(name: str) \u2192 bool\n\nReturn True if worksheet with given name is in workbook.\n\n* **Parameters:**\n  **name** \u2013 Name of worksheet you are looking for\n* **Returns:**\n  True if the worksheet exists, False otherwise\n\nExamples:\n\n```robotframework\n# To use Worksheet Exists in a conditional statement set it to\n# a variable first, like you see here, and then compare the\n# variable to ${TRUE} or ${FALSE}\n${Does_Worksheet_Exist}=    Worksheet Exists    Sheet\n```\n\n```python\nDoes_Worksheet_Exist = lib.worksheet_exists(\"Sheet\")\n```\n"
  },
  {
    "module": "RPA.FileSystem.FileSystem",
    "markdown": "# Python API\n\n## FileSystem\n\n### *class* RPA.FileSystem.FileSystem\n\nThe FileSystem library can be used to interact with files and directories\non the local computer. It can inspect and list files, remove and create them,\nread contents from files, and write data out.\n\nIt shadows the built-in OperatingSystem library but contains keywords\nwhich are more RPA-oriented.\n\n**Examples**\n\n**Robot Framework**\n\nThe library allows, for instance, iterating over files and inspecting them.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.FileSystem\n\n*** Keywords ***\nDelete large files\n    ${files}=    List files in directory    archive/orders/\n    FOR    ${file}  IN  @{FILES}\n        Run keyword if    ${file.size} > 10**8    Remove file    ${file}\n    END\n\nRead process output\n    Start external program\n    Wait until modified    process.log\n    ${output}=  Read file  process.log\n    [Return]    ${output}\n```\n\n**Python**\n\nThe library can also be used inside Python.\n\n```python\nfrom RPA.FileSystem import FileSystem\n\ndef move_to_archive():\n    lib = FileSystem()\n\n    matches = lib.find_files(\"**/*.xlsx\")\n    if matches:\n        lib.create_directory(\"archive\")\n        lib.move_files(matches, \"archive\")\n```\n\n#### PATH_TYPE\n\nalias of `str` | `Path`\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### absolute_path(path: str | Path) \u2192 str\n\nReturns the absolute path to a file, and resolves symlinks.\n\n* **Parameters:**\n  **path** \u2013 path that will be resolved\n* **Returns:**\n  absolute path to file as a string\n\n#### append_to_binary_file(path: str | Path, content: Any) \u2192 None\n\nAppends binary content to the given file.\n\nSee `Create Binary File` for usage example.\n\n* **Parameters:**\n  * **path** \u2013 path to file to append to\n  * **content** \u2013 content to append\n\n#### append_to_file(path: str | Path, content: str, encoding: str = 'utf-8') \u2192 None\n\nAppends text to the given file.\n\nSee `Create File` for usage example.\n\n* **Parameters:**\n  * **path** \u2013 path to file to append to\n  * **content** \u2013 content to append\n  * **encoding** \u2013 character encoding of appended content\n\n#### change_file_extension(path: str | Path, extension: str) \u2192 None\n\nReplaces file extension for file at given path. the file\nextension can be removed by passing an empty string.\n\n* **Parameters:**\n  * **path** \u2013 path to file to rename\n  * **extension** \u2013 new extension, e.g. .xlsx\n\nExample:\n\n```robotframework\n*** Tasks ***\nChange a file extension\n    Change file extension\n    ...    devdata/work-items-in/default/orders.xls\n    ...    .xlsx\n```\n\n#### copy_directory(source: str | Path, destination: str | Path) \u2192 None\n\nCopy directory from source path to destination path.\n\n* **Parameters:**\n  * **source** \u2013 path to source directory\n  * **destination** \u2013 path to copy destination\n\nExample:\n\n```robotframework\n*** Tasks ***\nCopy a directory\n    Copy directory    output    temp\n```\n\n#### copy_file(source: str | Path, destination: str | Path) \u2192 None\n\nCopy a file from source path to destination path.\n\nSee `Is Directory Empty` for usage example.\n\n* **Parameters:**\n  * **source** \u2013 path to source file\n  * **destination** \u2013 path to copy destination\n\n#### copy_files(sources: List[str | Path], destination: str | Path) \u2192 None\n\nCopy multiple files to destination folder.\n\n* **Parameters:**\n  * **sources** \u2013 list of source files\n  * **destination** \u2013 path to destination folder\n\nExample:\n\n```robotframework\n*** Tasks ***\nCopy some files\n    ${files}=    Find files    devdata/*.json\n    Copy files    ${files}    output\n```\n\n#### create_binary_file(path: str | Path, content: Any | None = None, overwrite: bool = False) \u2192 None\n\nCreates a new binary file, and writes content if any is given.\n\n* **Parameters:**\n  * **path** \u2013 path to file to write\n  * **content** \u2013 content to write to file (optional)\n  * **overwrite** \u2013 replace destination file if it already exists\n\nExample:\n\n```robotframework\n*** Tasks ***\nCreate a new file\n    ${content}=    Get\n    ...    url=https://file-examples.com/storage/fe88505b6162b2538a045ce/2017/10/file_example_JPG_100kB.jpg\n    Create binary file    output/sample.jpg    content=${content.content}    overwrite=${True}\n```\n\n#### create_directory(path: str | Path, parents: bool = False, exist_ok: bool = True) \u2192 None\n\nCreates a directory and (optionally) non-existing parent directories.\n\n* **Parameters:**\n  * **path** \u2013 path to new directory\n  * **parents** \u2013 create missing parent directories (defaults to `False`)\n  * **exist_ok** \u2013 continue without errors if directory\n    already exists (defaults to `True`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nCreate new path\n    Create directory    output/my/new/path    parents=${True}\n```\n\n#### create_file(path: str | Path, content: str | None = None, encoding: str = 'utf-8', overwrite: bool = False) \u2192 None\n\nCreates a new text file, and writes content if any is given.\n\n* **Parameters:**\n  * **path** \u2013 path to file to write\n  * **content** \u2013 content to write to file (optional)\n  * **encoding** \u2013 character encoding of written content (default `utf-8`)\n  * **overwrite** \u2013 replace destination file if it already\n    exists (default `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nCreate a new file\n    ${content}=    Get    url=https://www.example.com\n    Create file    output/newfile.html    content=${content.text}\n    ...    overwrite=${True}\n```\n\n#### does_directory_exist(path: str | Path) \u2192 bool\n\nReturns True if the given directory exists, False if not.\n\nSee `Does Directory Not Exist` for usage example.\n\n* **Parameters:**\n  **path** \u2013 path to inspected directory\n* **Returns:**\n  true or false if the directory exists\n\n#### does_directory_not_exist(path: str | Path) \u2192 bool\n\nReturns True if the directory does not exist, False if it does.\n\n* **Parameters:**\n  **path** \u2013 path to inspected directory\n* **Returns:**\n  true or false if the directory does not exists\n\nExample:\n\n```robotframework\n*** Tasks  ***\nCheck for directory\n    ${directory_exists}=    Does directory not exist    output\n    IF    ${directory_exists}    Create directory    output\n```\n\n#### does_file_exist(path: str | Path) \u2192 bool\n\nReturns True if the given file exists, False if not.\n\n* **Parameters:**\n  **path** \u2013 path to inspected file\n* **Returns:**\n  true or false if file exists\n\nExample:\n\n```robotframework\n*** Tasks  ***\nCheck for file\n    ${log_exists}=    Does file exist    output/log.html\n    IF    ${log_exists}\n        ${file}=    Find files    output/log.html\n        Open user browser    ${file}[0]\n    END\n```\n\n#### does_file_not_exist(path: str | Path) \u2192 bool\n\nReturns True if the file does not exist, False if it does.\n\nSee `Does File Exist` for usage example.\n\n* **Parameters:**\n  **path** \u2013 path to inspected file\n* **Returns:**\n  true or false if the files does not exist\n\n#### empty_directory(path: str | Path) \u2192 None\n\nRemoves all the files in the given directory.\n\n* **Parameters:**\n  **path** \u2013 directory to remove files from\n\nExample:\n\n```robotframework\n*** Tasks ***\nEmpty out directory\n    Empty directory    output\n```\n\n#### find_files(pattern: str | Path, include_dirs: bool = True, include_files: bool = True) \u2192 list\n\nFind files recursively according to a pattern.\n\n* **Parameters:**\n  * **pattern** \u2013 search path in glob format pattern,\n    e.g.  *.xls or \\**/orders.txt\n  * **include_dirs** \u2013 include directories in results (defaults to True)\n  * **include_files** \u2013 include files in results (defaults to True)\n* **Returns:**\n  list of paths that match the pattern\n\nExample:\n\n```robotframework\n*** Tasks  ***\nFinding files recursively\n    ${files}=    Find files    **/*.log\n    FOR    ${file}    IN    @{files}\n        Read file    ${file}\n    END\n```\n\n#### get_file_creation_date(path: str | Path) \u2192 float\n\nReturns the creation time in seconds.\nNote: Linux sets this whenever file metadata changes\n\n* **Parameters:**\n  **path** \u2013 path to file to inspect\n* **Returns:**\n  creation time in seconds as a float\n\n#### get_file_extension(path: str | Path) \u2192 str\n\nReturns the suffix for the file.\n\n* **Parameters:**\n  **path** \u2013 path to file\n* **Returns:**\n  file suffix as a string\n\n#### get_file_modified_date(path: str | Path) \u2192 float\n\nReturns the modified time in seconds.\n\n* **Parameters:**\n  **path** \u2013 path to file to inspect\n* **Returns:**\n  modified time in seconds as a float\n\n#### get_file_name(path: str | Path) \u2192 str\n\nReturns only the full file name portion of a path.\n\n* **Parameters:**\n  **path** \u2013 path to file\n* **Returns:**\n  filename portion of a path as a string\n\n#### get_file_owner(path: str | Path) \u2192 str\n\nReturn the name of the user who owns the file.\n\n* **Parameters:**\n  **path** \u2013 path to file to inspect\n* **Returns:**\n  file owner as a string\n\n#### get_file_size(path: str | Path) \u2192 int\n\nReturns the file size in bytes.\n\n* **Parameters:**\n  **path** \u2013 path to file to inspect\n* **Returns:**\n  file size in bytes as an int\n\n#### get_file_stem(path: str | Path) \u2192 str\n\nReturns the name of the file without its extension.\n\n* **Parameters:**\n  **path** \u2013 path to file\n* **Returns:**\n  filename without its suffix as a string\n\n#### is_directory_empty(path: str | Path | None = None) \u2192 bool\n\nReturns True if the given directory has no files or subdirectories.\n\n* **Parameters:**\n  **path** \u2013 path to inspected directory\n* **Returns:**\n  true or false if the directory is empty\n\nExample:\n\n```robotframework\n*** Tasks  ***\nCheck for empty directory\n    ${directory_empty}=    Is directory empty    output\n    IF    ${directory_empty}\n        Copy file    ${source}    output/new_file.txt\n    END\n```\n\n#### is_directory_not_empty(path: str | Path | None = None) \u2192 bool\n\nReturns True if the given directory has any files or subdirectories.\n\nSee `Is Directory Empty` for usage example.\n\n* **Parameters:**\n  **path** \u2013 path to inspected directory\n* **Returns:**\n  true or false if the directory is not empty\n\n#### is_file_empty(path: str | Path) \u2192 bool\n\nReturns True if the given file has no content, i.e. has zero size.\n\n* **Parameters:**\n  **path** \u2013 path to inspected file\n* **Returns:**\n  true or false if the file is empty\n\n#### is_file_not_empty(path: str | Path) \u2192 bool\n\nReturns True if the given file has content, i.e. larger than zero size.\n\n* **Parameters:**\n  **path** \u2013 path to inspected file\n* **Returns:**\n  true or false if the file is not empty\n\nExample:\n\n```robotframework\n*** Tasks ***\nCheck for empty file\n    ${file_empty}=    Is file not empty    output/log.html\n    IF    ${file_empty}\n        Copy file    output/log.html    ${alt_dir}\n    END\n```\n\n#### join_path(\\*parts: str | Path) \u2192 str\n\nJoins multiple parts of a path together.\n\n* **Parameters:**\n  **parts** \u2013 Components of the path, e.g. dir, subdir, filename.ext\n* **Returns:**\n  complete file path as a single string\n\nExample:\n\n```robotframework\n*** Tasks ***\nJoin path together\n    Join path    output/nested    folder\n```\n\n#### list_directories_in_directory(path: str | Path | None = None) \u2192 list\n\nLists all the directories in the given directory, relative to it.\n\n* **Parameters:**\n  **path** \u2013 base directory for search, defaults to current working dir\n* **Returns:**\n  list of directories in selected directory\n\nExample:\n\n```robotframework\n*** Tasks  ***\nList directories\n    ${directories}=    List directories in directory    devdata\n    FOR    ${path}    IN    @{directories}\n        Log    ${path}\n    END\n```\n\n#### list_files_in_directory(path: str | Path | None = None) \u2192 list\n\nLists all the files in the given directory, relative to it.\n\n* **Parameters:**\n  **path** \u2013 base directory for search, defaults to current working directory\n* **Returns:**\n  list of files in directory\n\nExample:\n\n```robotframework\n*** Tasks  ***\nList directory file\n    ${files}=    List files in directory    output\n    FOR    ${file}    IN    @{files}\n        Log    ${file}\n    END\n```\n\n#### log_directory_tree(path: str | Path | None = None) \u2192 None\n\nLogs all the files in the directory recursively.\n\n* **Parameters:**\n  **path** \u2013 base directory to start from, defaults to current working dir\n\nExample:\n\n```robotframework\n*** Tasks  ***\nList directory tree\n    Log directory tree\n```\n\n#### move_directory(source: str | Path, destination: str | Path, overwrite: bool = False) \u2192 None\n\nMove a directory from source path to destination path.\n\n* **Parameters:**\n  * **source** \u2013 source directory path for moving\n  * **destination** \u2013 path to move to\n  * **overwrite** \u2013 replace destination directory if it already\n    exists (defaults to `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nMove a directory\n    Move directory    output    temp\n```\n\n#### move_file(source: str | Path, destination: str | Path, overwrite: bool = False) \u2192 None\n\nMove a file from source path to destination path,\noptionally overwriting the destination.\n\n* **Parameters:**\n  * **source** \u2013 source file path for moving\n  * **destination** \u2013 path to move to\n  * **overwrite** \u2013 replace destination file if it already\n    exists (defaults to `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nMove a file\n    Create directory    temp\n    Move file    output/log.html    temp/log.html\n```\n\n#### move_files(sources: List[str | Path], destination: str | Path, overwrite: bool = False) \u2192 None\n\nMove multiple files to the destination folder.\n\n* **Parameters:**\n  * **sources** \u2013 list of files to move\n  * **destination** \u2013 path to move destination\n  * **overwrite** \u2013 replace destination files if they already exist\n\nExample:\n\n```robotframework\n*** Tasks ***\nMove some files\n    Create directory    temp\n    Move files    output/log.html    output/output.xml    temp\n```\n\n#### normalize_path(path: str | Path) \u2192 str\n\nRemoves redundant separators or up-level references from path.\n\n* **Parameters:**\n  **path** \u2013 path that will be normalized\n* **Returns:**\n  path to file as a string\n\nExample:\n\n```robotframework\n*** Tasks ***\nGet normal path\n    # Normalized path becomes ../inputs/input.xlsx\n    ${normalized_path}=    Normalize path    ..//inputs/./new/../input.xlsx\n    Create work items    ${normalized_path}\n```\n\n#### read_binary_file(path: str | Path) \u2192 bytes\n\nReads a file in binary mode and returns the content.\nDoes not attempt to decode the content in any way.\n\n* **Parameters:**\n  **path** \u2013 path to file to read\n* **Returns:**\n  the file content as bytes\n\nExample:\n\n```robotframework\n*** Tasks ***\nRead picture as binary\n    ${pictures}=    Find files    **/*.png\n    FOR    ${picture}    IN    @{pictures}\n        Read binary file    ${picture}\n    END\n```\n\n#### read_file(path: str | Path, encoding: str = 'utf-8') \u2192 str\n\nReads a file as text, with given encoding, and returns the content.\u201d\n\nSee `Find Files` for usage example.\n\n* **Parameters:**\n  * **path** \u2013 path to file to read\n  * **encoding** \u2013 character encoding of file (default `utf-8`)\n* **Returns:**\n  file content as string\n\n#### remove_directory(path: str | Path, recursive: bool = False) \u2192 None\n\nRemoves the given directory, and optionally everything it contains.\n\n* **Parameters:**\n  * **path** \u2013 path to directory\n  * **recursive** \u2013 remove all subdirectories and files (default to `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nDelete a directory\n    Remove directory    output    recursive=${True}\n```\n\n#### remove_file(path: str | Path, missing_ok: bool = True) \u2192 None\n\nRemoves the given file.\n\n* **Parameters:**\n  * **path** \u2013 path to the file to remove\n  * **missing_ok** \u2013 ignore non-existent file (defaults to `True`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nDelete a file\n    Remove file    output/log.html\n```\n\n#### remove_files(\\*paths: str | Path, missing_ok: bool = True) \u2192 None\n\nRemoves multiple files.\n\n* **Parameters:**\n  * **paths** \u2013 paths to files to be removed\n  * **missing_ok** \u2013 ignore non-existent files (default to `True`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nDelete some files\n    Remove files    output/log.html    output/output.xml\n```\n\n#### run_keyword_if_file_exists(path: str | Path, keyword: str, \\*args) \u2192 None\n\nIf file exists at path, execute given keyword with arguments.\n\n* **Parameters:**\n  * **path** \u2013 path to file to inspect\n  * **keyword** \u2013 Robot Framework keyword to execute\n  * **args** \u2013 arguments to keyword\n\nExample:\n\n```robotframework\n*** Tasks ***\nExecute if orders exists\n    Run keyword if file exists    orders.xlsx    Process orders\n```\n\n#### touch_file(path: str | Path) \u2192 None\n\nCreates a file with no content, or if file already exists,\nupdates the modification and access times.\n\n* **Parameters:**\n  **path** \u2013 path to file which is touched\n\n#### wait_until_created(path: str | Path, timeout: int | float = 5.0) \u2192 str\n\nPoll path until it exists, or raise exception if timeout\nis reached.\n\n* **Parameters:**\n  * **path** \u2013 path to poll\n  * **timeout** \u2013 time in seconds until keyword fails\n* **Returns:**\n  path to the created file as a string\n\nExample:\n\n```robotframework\n*** Tasks ***\nWait for existence\n    Wait until created    orders.xlsx    10\n    Process orders    orders.xlsx\n```\n\n#### wait_until_modified(path: str | Path, timeout: int | float = 5.0) \u2192 str\n\nPoll path until it has been modified after the keyword was called,\nor raise exception if timeout is reached.\n\n* **Parameters:**\n  * **path** \u2013 path to poll\n  * **timeout** \u2013 time in seconds until keyword fails\n* **Returns:**\n  path to the modified file as a string\n\nExample:\n\n```robotframework\n*** Tasks ***\nWait for change\n    Wait until modified    orders.xlsx    10\n    Process orders    orders.xlsx\n```\n\n#### wait_until_removed(path: str | Path, timeout: int | float = 5.0) \u2192 None\n\nPoll path until it doesn\u2019t exist, or raise exception if timeout\nis reached.\n\n* **Parameters:**\n  * **path** \u2013 path to poll\n  * **timeout** \u2013 time in seconds until keyword fails\n"
  },
  {
    "module": "RPA.FTP.FTP",
    "markdown": "# Python API\n\n## FTP\n\n### *class* RPA.FTP.FTP\n\nFTP library can be used to access an FTP server,\nand interact with files.\n\nThe library is based on Python\u2019s built-in [ftplib](https://docs.python.org/3/library/ftplib.html).\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.FTP\n\n*** Variables ***\n${HOST}       127.0.0.1\n${PORT}       27345\n${USER}       user\n${PASS}       12345\n\n*** Tasks ***\nList files on the server directory\n    Connect   ${HOST}  ${PORT}  ${USER}  ${PASS}\n    @{files}  List Files\n    FOR  ${file}  IN  @{files}\n        Log  ${file}\n    END\n```\n\n**Python**\n\n```python\nfrom RPA.FTP import FTP\n\nlibrary = FTP()\nlibrary.connect('127.0.0.1', 27345, 'user', '12345')\nfiles = library.list_files()\nfor f in files:\n    print(f)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### abort() \u2192 bool\n\nAbort a file transfer in progress\n\n* **Returns:**\n  true or false based on success or failure\n\n#### close() \u2192 None\n\nClose connection to the server unilaterally\n\n#### connect(host: str, port: int = 21, user: str | None = None, password: str | None = None, tls: bool = False, transfer: str = 'passive', keyfile: str | None = None, certfile: str | None = None, timeout: int | None = None, source_address: Tuple[str, int] | None = None) \u2192 bool\n\nConnect to FTP server\n\n* **Parameters:**\n  * **host** \u2013 address of the server\n  * **port** \u2013 port of the server, defaults to 21\n  * **user** \u2013 login name, defaults to None\n  * **password** \u2013 login password, defaults to None\n  * **tls** \u2013 connect using TLS support, defaults to False\n  * **transfer** \u2013 mode of the transfer, defaults to \u201cpassive\u201d\n  * **keyfile** \u2013 path to private key file\n  * **certfile** \u2013 path to certificate file\n  * **timeout** \u2013 a timeout in seconds for the connection attempt\n  * **source_address** \u2013 socket to bind to as its source address before connecting\n* **Raises:**\n  **AuthenticationException** \u2013 on authentication error with the server\n* **Returns:**\n  true if the connnection completes and an error code if it fails\n\n#### cwd(dirname: str) \u2192 bool\n\nChange working directory on the server\n\n* **Parameters:**\n  **dirname** \u2013 name of the directory\n* **Returns:**\n  true or false based on success or failure\n\n#### delete(filepath: str) \u2192 bool\n\nDelete file on the server\n\n* **Parameters:**\n  **filepath** \u2013 path to server file\n* **Returns:**\n  true or false based on success or failure\n\n#### download(remotefile: str, localfile: str | None = None) \u2192 bool\n\nDownload file from FTP server\n\n* **Parameters:**\n  * **remotefile** \u2013 path to remote file on the server\n  * **localfile** \u2013 name of the downloaded file on the local filesystem,\n    if None will have same name as remote file\n* **Returns:**\n  true or false based on success or failure\n\n#### file_size(filepath: str) \u2192 int\n\nReturn byte size of the file on the server\n\n* **Parameters:**\n  **filepath** \u2013 path to server file\n* **Returns:**\n  byte size as an int\n\n#### get_welcome_message() \u2192 str\n\nGet server welcome message\n\n* **Returns:**\n  welcome message as a string\n\n#### list_files(dirname: str = '') \u2192 list\n\nList files on the server directory\n\n* **Parameters:**\n  **dirname** \u2013 name of the directory\n* **Returns:**\n  list of files present in the server directory\n\n#### mkd(dirname: str) \u2192 bool\n\nCreate a new directory on the server\n\n* **Parameters:**\n  **dirname** \u2013 name of the directory\n* **Returns:**\n  true or false based on success or failure\n\n#### pwd() \u2192 str\n\nGet current working directory on the server\n\n* **Returns:**\n  current working directory name as a string\n\n#### quit() \u2192 None\n\nSend QUIT command to the server and close connection\n\n#### rename(fromname: str, toname: str) \u2192 bool\n\nRename file on the server\n\n* **Parameters:**\n  * **fromname** \u2013 current name of the file\n  * **toname** \u2013 new name for the file\n* **Returns:**\n  true or false based on success or failure\n\n#### rmd(dirname: str) \u2192 bool\n\nRemove directory on the server\n\n* **Parameters:**\n  **dirname** \u2013 name of the directory\n* **Returns:**\n  true or false based on success or failure\n\n#### send_command(command: str) \u2192 bool\n\nExecute command on the server\n\nList of FTP commands:\n[https://en.wikipedia.org/wiki/List_of_FTP_commands](https://en.wikipedia.org/wiki/List_of_FTP_commands)\n\n* **Parameters:**\n  **command** \u2013 name of the command to send\n* **Returns:**\n  true or false based on success or failure\n\n#### set_ascii_mode() \u2192 bool\n\nSet transfer mode to ASCII\n\n* **Returns:**\n  true or false based on success or failure\n\n#### set_binary_mode() \u2192 bool\n\nSet transfer mode to BINARY\n\n* **Returns:**\n  true or false based on success or failure\n\n#### set_debug_level(level: int = 0) \u2192 bool\n\nSet debug level for the library\n\n* **Parameters:**\n  **level** \u2013 integer value of debug level, defaults to 0\n* **Returns:**\n  true or false based on success or failure\n\n0 - no debugging output\n1 - moderate amount of debugging\n2+ - higher amount of debugging\n\n#### upload(localfile: str, remotefile: str) \u2192 bool\n\nUpload file to FTP server\n\n* **Parameters:**\n  * **localfile** \u2013 path to file to upload\n  * **remotefile** \u2013 name of uploaded file in the server\n* **Returns:**\n  true or false based on success or failure\n"
  },
  {
    "module": "RPA.HTTP.HTTP",
    "markdown": "# Python API\n\n## HTTP\n\n### *class* RPA.HTTP.HTTP(\\*args, \\*\\*kwargs)\n\nThe *RPA.HTTP* library extends functionality of the [RequestsLibrary](https://marketsquare.github.io/robotframework-requests/doc/RequestsLibrary.html).\nSee that documentation for several examples of how to issue `GET`\nrequests and utilize the returned `result` objects.\n\nThis extension provides helper keywords to get an HTTP resource on a\nsession. The `HTTP Get` and `Download` keywords will initiate a\nsession if one does not exist for the provided URL, or use an existing\nsession. When using these keywords, you do not need to manage\nsessions with `Create Session`. Session management is still\nrequired if you use the underlying session keywords, e.g.,\n`* On Session`.\n\n#### DEFAULT_RETRY_METHOD_LIST *= ['GET', 'DELETE', 'TRACE', 'OPTIONS', 'PUT', 'HEAD']*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'reST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### check_vulnerabilities() \u2192 List\n\nCheck for possible vulnerabilities in the installed runtime\nenvironment packages.\n\nCurrently will check only for OpenSSL version and outputs warning message on any\ndiscovered vulnerability.\n\n* **Returns:**\n  list of all check results\n\n```robotframework\n*** Tasks ***\nVulnerability Check\n    ${results}=    Check Vulnerabilities\n    FOR    ${result}    IN    @{results}\n        Log To Console    TYPE: ${result}[type]\n        Log To Console    VULNERABLE: ${result}[vulnerable]\n        Log To Console    MESSAGE: ${result}[message]\n    END\n```\n\n#### create_client_cert_session(alias, url, headers={}, cookies={}, client_certs=None, timeout=None, proxies=None, verify=False, debug=0, max_retries=3, backoff_factor=0.1, disable_warnings=0, retry_status_list=[], retry_method_list=['GET', 'DELETE', 'TRACE', 'OPTIONS', 'PUT', 'HEAD'])\n\nCreate Session: create a HTTP session to a server\n\n`url` Base url of the server\n\n`alias` Robot Framework alias to identify the session\n\n`headers` Dictionary of default headers\n\n`cookies` Dictionary of cookies\n\n`client_certs` [\u2018client certificate\u2019, \u2018client key\u2019] PEM files containing the client key and certificate\n\n`timeout` Connection timeout\n\n`proxies` Dictionary mapping protocol or protocol and host to the URL of the proxy\n: (e.g. {\u2018http\u2019: \u2018foo.bar:3128\u2019, \u2018http://host.name\u2019: \u2018foo.bar:4012\u2019})\n\n`verify` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n: Defaults to False.\n\n`debug` Enable http verbosity option more information\n: [https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel](https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel)\n\n`max_retries` Number of maximum retries each connection should attempt.\n: By default it will retry 3 times in case of connection errors only.\n  A 0 value will disable any kind of retries regardless of other retry settings.\n  In case the number of retries is reached a retry exception is raised.\n\n`disable_warnings` Disable requests warning useful when you have large number of testcases\n\n`backoff_factor` Introduces a delay time between retries that is longer after each retry.\n: eg. if backoff_factor is set to 0.1\n  the sleep between attemps will be: 0.0, 0.2, 0.4\n  More info here: [https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html)\n\n`retry_method_list` List of uppercased HTTP method verbs where retries are allowed.\n: By default retries are allowed only on HTTP requests methods that are considered to be\n  idempotent (multiple requests with the same parameters end with the same state).\n  eg. set to [\u2018POST\u2019, \u2018GET\u2019] to retry only those kind of requests.\n\n`retry_status_list` List of integer HTTP status codes that, if returned, a retry is attempted.\n: eg. set to [502, 503] to retry requests if those status are returned.\n  Note that max_retries must be greater than 0.\n\n#### create_custom_session(alias, url, auth, headers={}, cookies={}, timeout=None, proxies=None, verify=False, debug=0, max_retries=3, backoff_factor=0.1, disable_warnings=0, retry_status_list=[], retry_method_list=['GET', 'DELETE', 'TRACE', 'OPTIONS', 'PUT', 'HEAD'])\n\nCreate Session: create a HTTP session to a server\n\n`url` Base url of the server\n\n`alias` Robot Framework alias to identify the session\n\n`headers` Dictionary of default headers\n\n`cookies` Dictionary of cookies\n\n`auth` A Custom Authentication object to be passed on to the requests library.\n: [http://docs.python-requests.org/en/master/user/advanced/#custom-authentication](http://docs.python-requests.org/en/master/user/advanced/#custom-authentication)\n\n`timeout` Connection timeout\n\n`proxies` Dictionary mapping protocol or protocol and host to the URL of the proxy\n: (e.g. {\u2018http\u2019: \u2018foo.bar:3128\u2019, \u2018http://host.name\u2019: \u2018foo.bar:4012\u2019})\n\n`verify` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n: Defaults to False.\n\n`debug` Enable http verbosity option more information\n: [https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel](https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel)\n\n`max_retries` Number of maximum retries each connection should attempt.\n: By default it will retry 3 times in case of connection errors only.\n  A 0 value will disable any kind of retries regardless of other retry settings.\n  In case the number of retries is reached a retry exception is raised.\n\n`disable_warnings` Disable requests warning useful when you have large number of testcases\n\n`backoff_factor` Introduces a delay time between retries that is longer after each retry.\n: eg. if backoff_factor is set to 0.1\n  the sleep between attemps will be: 0.0, 0.2, 0.4\n  More info here: [https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html)\n\n`retry_method_list` List of uppercased HTTP method verbs where retries are allowed.\n: By default retries are allowed only on HTTP requests methods that are considered to be\n  idempotent (multiple requests with the same parameters end with the same state).\n  eg. set to [\u2018POST\u2019, \u2018GET\u2019] to retry only those kind of requests.\n\n`retry_status_list` List of integer HTTP status codes that, if returned, a retry is attempted.\n: eg. set to [502, 503] to retry requests if those status are returned.\n  Note that max_retries must be greater than 0.\n\n#### create_digest_session(alias, url, auth, headers={}, cookies={}, timeout=None, proxies=None, verify=False, debug=0, max_retries=3, backoff_factor=0.1, disable_warnings=0, retry_status_list=[], retry_method_list=['GET', 'DELETE', 'TRACE', 'OPTIONS', 'PUT', 'HEAD'])\n\nCreate Session: create a HTTP session to a server\n\n`url` Base url of the server\n\n`alias` Robot Framework alias to identify the session\n\n`headers` Dictionary of default headers\n\n`cookies` Dictionary of cookies\n\n`auth` [\u2018DOMAIN\u2019, \u2018username\u2019, \u2018password\u2019] for NTLM Authentication\n\n`timeout` Connection timeout\n\n`proxies` Dictionary mapping protocol or protocol and host to the URL of the proxy\n: (e.g. {\u2018http\u2019: \u2018foo.bar:3128\u2019, \u2018http://host.name\u2019: \u2018foo.bar:4012\u2019})\n\n`verify` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n: Defaults to False.\n\n`debug` Enable http verbosity option more information\n: [https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel](https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel)\n\n`max_retries` Number of maximum retries each connection should attempt.\n: By default it will retry 3 times in case of connection errors only.\n  A 0 value will disable any kind of retries regardless of other retry settings.\n  In case the number of retries is reached a retry exception is raised.\n\n`disable_warnings` Disable requests warning useful when you have large number of testcases\n\n`backoff_factor` Introduces a delay time between retries that is longer after each retry.\n: eg. if backoff_factor is set to 0.1\n  the sleep between attemps will be: 0.0, 0.2, 0.4\n  More info here: [https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html)\n\n`retry_method_list` List of uppercased HTTP method verbs where retries are allowed.\n: By default retries are allowed only on HTTP requests methods that are considered to be\n  idempotent (multiple requests with the same parameters end with the same state).\n  eg. set to [\u2018POST\u2019, \u2018GET\u2019] to retry only those kind of requests.\n\n`retry_status_list` List of integer HTTP status codes that, if returned, a retry is attempted.\n: eg. set to [502, 503] to retry requests if those status are returned.\n  Note that max_retries must be greater than 0.\n\n#### create_ntlm_session(alias, url, auth, headers={}, cookies={}, timeout=None, proxies=None, verify=False, debug=0, max_retries=3, backoff_factor=0.1, disable_warnings=0, retry_status_list=[], retry_method_list=['GET', 'DELETE', 'TRACE', 'OPTIONS', 'PUT', 'HEAD'])\n\nCreate Session: create a HTTP session to a server\n\n`url` Base url of the server\n\n`alias` Robot Framework alias to identify the session\n\n`headers` Dictionary of default headers\n\n`cookies` Dictionary of cookies\n\n`auth` [\u2018DOMAIN\u2019, \u2018username\u2019, \u2018password\u2019] for NTLM Authentication\n\n`timeout` Connection timeout\n\n`proxies` Dictionary mapping protocol or protocol and host to the URL of the proxy\n: (e.g. {\u2018http\u2019: \u2018foo.bar:3128\u2019, \u2018http://host.name\u2019: \u2018foo.bar:4012\u2019})\n\n`verify` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n: Defaults to False.\n\n`debug` Enable http verbosity option more information\n: [https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel](https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel)\n\n`max_retries` Number of maximum retries each connection should attempt.\n: By default it will retry 3 times in case of connection errors only.\n  A 0 value will disable any kind of retries regardless of other retry settings.\n  In case the number of retries is reached a retry exception is raised.\n\n`disable_warnings` Disable requests warning useful when you have large number of testcases\n\n`backoff_factor` Introduces a delay time between retries that is longer after each retry.\n: eg. if backoff_factor is set to 0.1\n  the sleep between attemps will be: 0.0, 0.2, 0.4\n  More info here: [https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html)\n\n`retry_method_list` List of uppercased HTTP method verbs where retries are allowed.\n: By default retries are allowed only on HTTP requests methods that are considered to be\n  idempotent (multiple requests with the same parameters end with the same state).\n  eg. set to [\u2018POST\u2019, \u2018GET\u2019] to retry only those kind of requests.\n\n`retry_status_list` List of integer HTTP status codes that, if returned, a retry is attempted.\n: eg. set to [502, 503] to retry requests if those status are returned.\n  Note that max_retries must be greater than 0.\n\n#### create_session(alias, url, headers={}, cookies={}, auth=None, timeout=None, proxies=None, verify=False, debug=0, max_retries=3, backoff_factor=0.1, disable_warnings=0, retry_status_list=[], retry_method_list=['GET', 'DELETE', 'TRACE', 'OPTIONS', 'PUT', 'HEAD'])\n\nCreate Session: create a HTTP session to a server\n\n`alias` Robot Framework alias to identify the session\n\n`url` Base url of the server\n\n`headers` Dictionary of default headers\n\n`cookies` Dictionary of cookies\n\n`auth` List of username & password for HTTP Basic Auth\n\n`timeout` Connection timeout\n\n`proxies` Dictionary mapping protocol or protocol and host to the URL of the proxy\n: (e.g. {\u2018http\u2019: \u2018foo.bar:3128\u2019, \u2018http://host.name\u2019: \u2018foo.bar:4012\u2019})\n\n`verify` Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n\n`debug` Enable http verbosity option more information\n: [https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel](https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel)\n\n`max_retries` Number of maximum retries each connection should attempt.\n: By default it will retry 3 times in case of connection errors only.\n  A 0 value will disable any kind of retries regardless of other retry settings.\n  In case the number of retries is reached a retry exception is raised.\n\n`disable_warnings` Disable requests warning useful when you have large number of testcases\n\n`backoff_factor` Introduces a delay time between retries that is longer after each retry.\n: eg. if backoff_factor is set to 0.1\n  the sleep between attemps will be: 0.0, 0.2, 0.4\n  More info here: [https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html)\n\n`retry_method_list` List of uppercased HTTP method verbs where retries are allowed.\n: By default retries are allowed only on HTTP requests methods that are considered to be\n  idempotent (multiple requests with the same parameters end with the same state).\n  eg. set to [\u2018POST\u2019, \u2018GET\u2019] to retry only those kind of requests.\n\n`retry_status_list` List of integer HTTP status codes that, if returned, a retry is attempted.\n: eg. set to [502, 503] to retry requests if those status are returned.\n  Note that max_retries must be greater than 0.\n\n#### delete_all_sessions()\n\nRemoves all the session objects\n\n#### delete_on_session(\\*\\*kwargs)\n\nSends a DELETE request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to send the request is the `url` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### delete_request(alias, uri, data=None, json=None, params=None, headers=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use DELETE On Session instead.\n\nSend a DELETE request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the DELETE request to\n\n`json` a value that will be json encoded\n: and sent as request data if data is not specified\n\n`headers` a dictionary of headers to use with the request\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`timeout` connection timeout\n\n#### download(url: str, target_file: str | None = None, verify: bool | str = True, force_new_session: bool = False, overwrite: bool = False, stream: bool = False, \\*\\*kwargs) \u2192 dict\n\nAn alias for the `HTTP Get` keyword.\n\nThe difference in use is that the URL is always downloaded based on\nthe URL path (even without `target_file`). If there is a filename\nin the path, then that is used as `target_file` to save to. By default,\nthe filename will be \u201cdownloaded.html\u201d.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.HTTP\n\n*** Variables ***\n${DOWNLOAD_PATH}=   ${OUTPUT DIR}${/}downloads\n${WORD_EXAMPLE}=    https://file-examples.com/wp-content/uploads/2017/02/file-sample_100kB.doc\n${EXCEL_EXAMPLE}=   https://file-examples.com/wp-content/uploads/2017/02/file_example_XLS_10.xls\n\n*** Tasks ***\nDownload files with reused session with provided file names\n    # Starts a new session\n    Download    ${WORD_EXAMPLE}    target_file=${DOWNLOAD_PATH}\n    # Uses the previous session\n    Download    ${EXCEL_EXAMPLE}    target_file=${DOWNLOAD_PATH}\n    # Above files are downloaded using the same names as they have\n    # on the remote server.\n```\n\n* **Parameters:**\n  * **url** \u2013 target URL for GET request\n  * **target_file** \u2013 filepath to save request content, default `None`\n  * **verify** \u2013 if SSL verification should be done, default `True`,\n    a CA_BUNDLE path can also be provided\n  * **force_new_session** \u2013 if new HTTP session should be created,\n    default `False`\n  * **overwrite** \u2013 used together with `target_file`, if `True` will overwrite\n    the target file, default `False`\n  * **stream** \u2013 if `False` the response content will be immediately downloaded\n* **Returns:**\n  request response as a dict\n\n#### get_current_session_alias() \u2192 str\n\nGet request session alias that was used with the `HTTP Get` keyword.\n\n* **Returns:**\n  name of session alias as a string\n\n#### *static* get_file_for_streaming_upload(path)\n\nOpens and returns a file descriptor of a specified file to be passed as `data` parameter\nto other requests keywords.\n\nThis allows streaming upload of large files without reading them into memory.\n\nFile descriptor is binary mode and read only. Requests keywords will automatically close the file,\nif used outside this library it\u2019s up to the caller to close it.\n\n#### get_on_session(\\*\\*kwargs)\n\nSends a GET request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to retrieve the resource is the `url`, while query\nstring parameters can be passed as string, dictionary (or list of tuples or bytes)\nthrough the `params`.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### get_request(alias, uri, headers=None, data=None, json=None, params=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use GET On Session instead.\n\nSend a GET request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the GET request to\n\n`params` url parameters to append to the uri\n\n`headers` a dictionary of headers to use with the request\n\n`data` a dictionary of key-value pairs that will be urlencoded\n: and sent as GET data\n  or binary data that is sent as the raw body content\n\n`json` a value that will be json encoded\n: and sent as GET data if data is not specified\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`timeout` connection timeout\n\n#### head_on_session(\\*\\*kwargs)\n\nSends a HEAD request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to retrieve the HTTP headers is the `url`.\n\n`allow_redirects` parameter is not provided, it will be set to False (as\nopposed to the default behavior).\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### head_request(alias, uri, headers=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use HEAD On Session instead.\n\nSend a HEAD request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the HEAD request to\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`headers` a dictionary of headers to use with the request\n\n`timeout` connection timeout\n\n#### http_get(url: str, target_file: str | None = None, verify: bool | str = True, force_new_session: bool = False, overwrite: bool = False, stream: bool = False, \\*\\*kwargs) \u2192 dict\n\nA helper method for `Get Request` that will create a session, perform GET\nrequest, and store the target file, if set by the `target_file` parameter.\n\nThe old session will be used if the URL scheme and the host are the same as\npreviously, e.g., \u2018[https://www.google.fi](https://www.google.fi)\u2019 part of the URL.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.HTTP\n\n*** Variables ***\n${DOWNLOAD_PATH}=   ${OUTPUT DIR}${/}downloads\n${WORD_EXAMPLE}=    https://file-examples.com/wp-content/uploads/2017/02/file-sample_100kB.doc\n${EXCEL_EXAMPLE}=   https://file-examples.com/wp-content/uploads/2017/02/file_example_XLS_10.xls\n\n*** Tasks ***\nDownload files with reused session\n    # Starts a new session\n    HTTP Get    ${WORD_EXAMPLE}    target_file=${DOWNLOAD_PATH}${/}word-example.doc\n    # Uses the previous session\n    HTTP Get    ${EXCEL_EXAMPLE}    target_file=${DOWNLOAD_PATH}${/}excel-example.xls\n```\n\n* **Parameters:**\n  * **url** \u2013 target URL for GET request\n  * **target_file** \u2013 filepath to save request content, default `None`\n  * **verify** \u2013 if SSL verification should be done, default `True`,\n    a CA_BUNDLE path can also be provided\n  * **force_new_session** \u2013 if new HTTP session should be created,\n    default `False`\n  * **overwrite** \u2013 used together with `target_file`, if `True` will overwrite\n    the target file, default `False`\n  * **stream** \u2013 if `False`, the response content will be immediately downloaded\n* **Returns:**\n  request response as a dict\n\n#### options_on_session(\\*\\*kwargs)\n\nSends a OPTIONS request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to retrieve the resource is the `url`.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### options_request(alias, uri, headers=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use OPTIONS On Session instead.\n\nSend an OPTIONS request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the OPTIONS request to\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`headers` a dictionary of headers to use with the request\n\n`timeout` connection timeout\n\n#### patch_on_session(\\*\\*kwargs)\n\nSends a PATCH request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to send the request is the `url` parameter, while its body\ncan be passed using `data` or `json` parameters.\n\n`data` can be a dictionary, list of tuples, bytes, or file-like object.\nIf you want to pass a json body pass a dictionary as `json` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### patch_request(alias, uri, data=None, json=None, params=None, headers=None, files=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use PATCH On Session instead.\n\nSend a PATCH request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the PATCH request to\n\n`data` a dictionary of key-value pairs that will be urlencoded\n: and sent as PATCH data\n  or binary data that is sent as the raw body content\n  or file descriptor retrieved by Get File For Streaming Upload\n\n`json` a value that will be json encoded\n: and sent as PATCH data if data is not specified\n\n`headers` a dictionary of headers to use with the request\n\n`files` a dictionary of file names containing file data to PATCH to the server\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`params` url parameters to append to the uri\n\n`timeout` connection timeout\n\n#### post_on_session(\\*\\*kwargs)\n\nSends a POST request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to send the request is the `url` parameter, while its body\ncan be passed using `data` or `json` parameters.\n\n`data` can be a dictionary, list of tuples, bytes, or file-like object.\nIf you want to pass a json body pass a dictionary as `json` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### post_request(alias, uri, data=None, json=None, params=None, headers=None, files=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use POST On Session instead.\n\nSend a POST request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the POST request to\n\n`data` a dictionary of key-value pairs that will be urlencoded\n: and sent as POST data\n  or binary data that is sent as the raw body content\n  or passed as such for multipart form data if `files` is also defined\n  or file descriptor retrieved by Get File For Streaming Upload\n\n`json` a value that will be json encoded\n: and sent as POST data if files or data is not specified\n\n`params` url parameters to append to the uri\n\n`headers` a dictionary of headers to use with the request\n\n`files` a dictionary of file names containing file data to POST to the server\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`timeout` connection timeout\n\n#### put_on_session(\\*\\*kwargs)\n\nSends a PUT request on a previously created HTTP Session.\n\nSession will be identified using the `alias` name.\nThe endpoint used to send the request is the `url` parameter, while its body\ncan be passed using `data` or `json` parameters.\n\n`data` can be a dictionary, list of tuples, bytes, or file-like object.\nIf you want to pass a json body pass a dictionary as `json` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### put_request(alias, uri, data=None, json=None, params=None, files=None, headers=None, allow_redirects=None, timeout=None)\n\n*DEPRECATED* Please use PUT On Session instead.\n\nSend a PUT request on the session object found using the\ngiven alias\n\n`alias` that will be used to identify the Session object in the cache\n\n`uri` to send the PUT request to\n\n`data` a dictionary of key-value pairs that will be urlencoded\n: and sent as PUT data\n  or binary data that is sent as the raw body content\n  or file descriptor retrieved by Get File For Streaming Upload\n\n`json` a value that will be json encoded\n: and sent as PUT data if data is not specified\n\n`headers` a dictionary of headers to use with the request\n\n`allow_redirects` Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n\n`params` url parameters to append to the uri\n\n`timeout` connection timeout\n\n#### request_should_be_successful(response=None)\n\nFails if response status code is a client or server error (4xx, 5xx).\n\n`response` is the output of other requests keywords like GET On Session.\nIf omitted the last response will be used.\n\nIn case of failure an HTTPError will be automatically raised.\n\nFor a more versatile assert keyword see Status Should Be.\n\n#### session_exists(alias)\n\nReturn True if the session has been already created\n\n`alias` that has been used to identify the Session object in the cache\n\n#### session_less_delete(\\*\\*kwargs)\n\nSends a DELETE request.\n\nThe endpoint used to send the request is the `url` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### session_less_get(\\*\\*kwargs)\n\nSends a GET request.\n\nThe endpoint used to retrieve the resource is the `url`, while query\nstring parameters can be passed as string, dictionary (or list of tuples or bytes)\nthrough the `params`.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs` here is a list:\n\n`data`     | Dictionary, list of tuples, bytes, or file-like object to send in the body of the request. |\n<br/>\n`json`     | A JSON serializable Python object to send in the body of the request. |\n<br/>\n`headers`  | Dictionary of HTTP Headers to send with the request. |\n<br/>\n`cookies`  | Dict or CookieJar object to send with the request. |\n<br/>\n`files`    | Dictionary of file-like-objects (or `{'name': file-tuple}`) for multipart encoding upload. |\n<br/>\n`file-tuple` | can be a 2-tuple `('filename', fileobj)`, 3-tuple `('filename', fileobj, 'content_type')` or a 4-tuple `('filename', fileobj, 'content_type', custom_headers)`, where `'content-type'` is a string defining the content type of the given file and `custom_headers` a dict-like object containing additional headers to add for the file. |\n<br/>\n`auth` | Auth tuple to enable Basic/Digest/Custom HTTP Auth. |\n<br/>\n`timeout` | How many seconds to wait for the server to send data before giving up, as a float, or a `(connect timeout, read timeout)` tuple. |\n<br/>\n`allow_redirects` | Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to `${True}`. |\n<br/>\n`proxies` | Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {\u2018http\u2019: \u2018foo.bar:3128\u2019, \u2018http://host.name\u2019: \u2018foo.bar:4012\u2019}) |\n<br/>\n`verify`  | Either a boolean, in which case it controls whether we verify the server\u2019s TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to `${True}`. Warning: if a session has been created with `verify=${False}` any other requests will not verify the SSL certificate. |\n<br/>\n`stream` | if `${False}`, the response content will be immediately downloaded. |\n<br/>\n`cert` | if String, path to ssl client cert file (.pem). If Tuple, (\u2018cert\u2019, \u2018key\u2019) pair. |\n<br/>\n\nFor more updated and complete information verify the official Requests api documentation:\n[https://requests.readthedocs.io/en/latest/api/](https://requests.readthedocs.io/en/latest/api/)\n\n#### session_less_head(\\*\\*kwargs)\n\nSends a HEAD request.\n\nThe endpoint used to retrieve the HTTP headers is the `url`.\n\n`allow_redirects` parameter is not provided, it will be set to False (as\nopposed to the default behavior).\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### session_less_options(\\*\\*kwargs)\n\nSends a OPTIONS request.\n\nThe endpoint used to retrieve the resource is the `url`.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### session_less_patch(\\*\\*kwargs)\n\nSends a PUT request.\n\nThe endpoint used to send the request is the `url` parameter, while its body\ncan be passed using `data` or `json` parameters.\n\n`data` can be a dictionary, list of tuples, bytes, or file-like object.\nIf you want to pass a json body pass a dictionary as `json` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### session_less_post(\\*\\*kwargs)\n\nSends a POST request.\n\nThe endpoint used to send the request is the `url` parameter, while its body\ncan be passed using `data` or `json` parameters.\n\n`data` can be a dictionary, list of tuples, bytes, or file-like object.\nIf you want to pass a json body pass a dictionary as `json` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### session_less_put(\\*\\*kwargs)\n\nSends a PUT request.\n\nThe endpoint used to send the request is the `url` parameter, while its body\ncan be passed using `data` or `json` parameters.\n\n`data` can be a dictionary, list of tuples, bytes, or file-like object.\nIf you want to pass a json body pass a dictionary as `json` parameter.\n\nBy default this keyword fails if a status code with error values is returned in the response,\nthis behavior can be modified using the `expected_status` and `msg` parameters,\nread more about it in Status Should Be keyword documentation.\nIn order to disable this implicit assert mechanism you can pass as `expected_status` the values `any` or\n`anything`.\n\nOther optional requests arguments can be passed using `**kwargs`\nsee the GET keyword for the complete list.\n\n#### status_should_be(expected_status, response=None, msg=None)\n\nFails if response status code is different than the expected.\n\n`expected_status` could be the code number as an integer or as string.\nBut it could also be a named status code like \u2018ok\u2019, \u2018created\u2019, \u2018accepted\u2019 or\n\u2018bad request\u2019, \u2018not found\u2019 etc.\n\n`response` is the output of other requests keywords like GET or GET On Session.\nIf omitted the last response will be used.\n\nIn case of failure an HTTPError will be automatically raised.\nA custom failure message `msg` can be added like in built-in keywords.\n\nNew requests keywords like GET or GET On Session (starting from 0.8 version) already have an implicit assert\nmechanism that, by default, verifies the response status code.\nStatus Should Be keyword can be useful when you disable implicit assert using `expected_status=anything`.\n\nFor example when you have a nested keyword that is used for both OK and ERROR responses:\n\n**\\* Test Cases \\***\n<br/>\n<br/>\nTest Get Request And Make Sure Is A 404 Response\n<br/>\n${resp}=            GET Custom Keyword That Returns OK or ERROR Response  case=notfound\n<br/>\nStatus Should Be    404    ${resp}\n<br/>\nShould Be Equal As Strings  NOT FOUND  ${resp.reason}\n<br/>\n<br/>\nTest Get Request And Make Sure Is OK\n<br/>\n${resp}=            GET Custom Keyword That Returns OK or ERROR Response  case=pass\n<br/>\nStatus Should Be    200    ${resp}\n<br/>\nShould Be Equal As Strings  OK  ${resp.reason}\n<br/>\n<br/>\n**\\* Keywords \\***\n<br/>\n<br/>\nGET Custom Keyword That Returns OK or ERROR Response\n<br/>\n[Arguments]  $case\n<br/>\n[\u2026]\n<br/>\nIF $case == notfound\n<br/>\n$resp=     GET [\u2026] expected_status=Anything\n<br/>\n[Return]   $resp\n<br/>\nELSE\n<br/>\n[\u2026]\n<br/>\n\n#### to_json(content, pretty_print=False)\n\n*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.\n\nConvert a string to a JSON object\n\n`content` String content to convert into JSON\n\n`pretty_print` If defined, will output JSON is pretty print format\n\n#### update_session(alias, headers=None, cookies=None)\n\nUpdates HTTP Session Headers and Cookies.\n\nSession will be identified using the `alias` name.\nDictionary of `headers` and `cookies` to be updated and merged into session data.\n"
  },
  {
    "module": "RPA.Hubspot.Hubspot",
    "markdown": "# Python API\n\n## Hubspot\n"
  },
  {
    "module": "RPA.Images.Images",
    "markdown": "# Python API\n\n## Images\n\n### *class* RPA.Images.Images\n\nImages is a library for general image manipulation.\nFor image-based desktop automation, use the `RPA.Desktop` library.\n\n**Coordinates**\n\nThe coordinates used in the library are pairs of x and y values that\nrepresent pixels. The upper left corner of the image or screen\nis (0, 0). The x-coordinate increases towards the right, and the y-coordinate\nincreases towards the bottom.\n\nRegions are represented as tuples of (left, top, right, bottom). For example,\na 400 by 200-pixel region in the upper left corner would be (0, 0, 400, 200).\n\n**Template matching**\n\nTemplate matching refers to an operation where the (potential) location of\na smaller image is searched from a larger image. It can be used for verifying\ncertain conditions or locating UI elements for desktop or web automation.\n\n**Requirements**\n\nThe default installation depends on [Pillow](https://python-pillow.org/)\nlibrary, which is used for general image manipulation operations.\n\nFor more robust and faster template matching, the library can use a combination\nof [NumPy](https://numpy.org/) and [OpenCV](https://opencv.org/).\nThey can be installed by opting in to the recognition dependency:\n\n`pip install rpaframework rpaframework-recognition`\n\n**Examples**\n\n**Robot Framework**\n\nThe Images library can be imported and used directly in Robot Framework,\nfor instance, for capturing screenshots or verifying something on the screen.\n\nDesktop automation based on images should be done using the corresponding\ndesktop library, i.e. `RPA.Desktop`.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Images\n\n*** Keywords ***\nShould show success\n    [Documentation]    Raises ImageNotFoundError if success image is not on screen\n    Find template on screen    ${CURDIR}${/}success.png\n\nSave screenshot to results\n    [Documentation]    Saves screenshot of desktop with unique name\n    ${timestamp}=      Get current date    result_format=%H%M%S\n    Take screenshot    filename=${OUTPUT_DIR}${/}desktop_${timestamp}.png\n```\n\n**Python**\n\n```python\nfrom RPA.Images import Images\n\ndef draw_matches_on_image(source, template):\n    matches = lib.find_template_in_image(source, template)\n    for match in matches:\n        lib.show_region_in_image(source, match)\n\n    source.save(\"matches.png\")\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### crop_image(image, region, filename=None) \u2192 None\n\nCrop an existing image.\n\n* **Parameters:**\n  * **image** \u2013 Image to crop\n  * **region** \u2013 Region to crop image to\n  * **filename** \u2013 Save cropped image to filename\n\n#### find_template_in_image(image, template, region=None, limit=None, tolerance=None) \u2192 List[Region]\n\nAttempt to find the template from the given image.\n\n* **Parameters:**\n  * **image** \u2013 Path to image or Image instance, used to search from\n  * **template** \u2013 Path to image or Image instance, used to search with\n  * **limit** \u2013 Limit returned results to maximum of limit.\n  * **region** \u2013 Area to search from. Can speed up search significantly.\n  * **tolerance** \u2013 Tolerance for matching, value between 0.1 and 1.0\n* **Returns:**\n  List of matching regions\n* **Raises:**\n  * **ImageNotFoundError** \u2013 No match was found\n  * **ValueError** \u2013 Template is larger than search region\n\n#### get_pixel_color_in_image(image, point) \u2192 RGB\n\nGet the RGB value of a pixel in the image.\n\n* **Parameters:**\n  * **image** \u2013 image to get pixel from\n  * **point** \u2013 coordinates for pixel or Point object\n* **Returns:**\n  RGB value of pixel in image\n\n#### show_region_in_image(image, region, color='red', width=5) \u2192 <module 'PIL.Image' from 'D:\\\\\\\\a\\\\\\\\rpaframework\\\\\\\\rpaframework\\\\\\\\.venv\\\\\\\\lib\\\\\\\\site-packages\\\\\\\\PIL\\\\\\\\Image.py'>\n\nDraw a rectangle onto the image around the given region.\n\n* **Parameters:**\n  * **image** \u2013 image to draw onto\n  * **region** \u2013 coordinates for region or Region object\n  * **color** \u2013 color of rectangle\n  * **width** \u2013 line width of rectangle\n* **Returns:**\n  Image of the selected region\n"
  },
  {
    "module": "RPA.JavaAccessBridge.JavaAccessBridge",
    "markdown": "# Python API\n\n## JavaAccessBridge\n\n### *class* RPA.JavaAccessBridge.JavaAccessBridge(ignore_callbacks: bool = False, access_bridge_path: str | None = None, max_depth: int | None = None, disable_refresh: bool = False)\n\nJava application UI automation library using [Java Access Bridge technology](https://www.oracle.com/java/technologies/javase/javase-tech-access-bridge.html).\n\nThe library utilizes [java-access-bridge-wrapper](https://github.com/robocorp/java-access-bridge-wrapper) package to interact with\nJava UI. Currently only the 64-bit Windows OS is supported.\n\n**Inspecting elements**\n\nWe have built an [Assistant](https://github.com/robocorp/working-with-java) for working with Java application\u2019s element structure and [Java locators](https://robocorp.com/docs-robot-framework/development-guide/locators#java-locators).\nThe Assistant provides copy-paste-able locators for each element and also allows testing locators against\nselected application.\n\nIf our tools fail to pick the locator from your target application, there is always the\n[Access Bridge Explorer](https://github.com/google/access-bridge-explorer) from Google that enables you to see the raw view. Please note that\nAccess Bridge Explorer repository has been archived on July 27, 2022 and is no longer actively\nmaintained.\n\nThe [Accessibility Insights for Windows](https://accessibilityinsights.io/en/downloads/) can show element properties if application framework\nsupports Windows UI Automation (UIA), see more at [using Accessibility Insights](https://accessibilityinsights.io/docs/en/windows/reference/faq/#can-i-use-accessibility-insights-for-windows-on-a-windows-app-written-with-java). Then the recommended\nlibrary would be [RPA.Windows](https://robocorp.com/docs-robot-framework/libraries/rpa-framework/rpa-windows) library.\n\n**Steps to enable**\n\n> 1. Enable the Java Access Bridge in Windows\n> 2. Set environment variable RC_JAVA_ACCESS_BRIDGE_DLL as an absolute path to WindowsAccessBridge-64.dll.\n>    It is also possible to give DLL location as library initialization parameter access_bridge_path.\n\n> ```console\n> C:\\path\\to\\java\\bin\\jabswitch -enable\n> set RC_JAVA_ACCESS_BRIDGE_DLL=C:\\path\\to\\Java\\bin\\WindowsAccessBridge-64.dll\n> ```\n\n> ```robotframework\n> *** Settings ***\n> Library   RPA.JavaAccessBridge   access_bridge_path=C:\\path\\to\\Java\\bin\\WindowsAccessBridge-64.dll\n> ```\n\n**About Java wrapper callbacks and actions**\n\nThere might be a compatibility issue with callbacks and actions on target Java application. Possible reasons:\n\n- target application is executed with 32-bit Java\n- target application does not support callbacks and/or actions\n\nWorkaround for this situation is to initialize JavaAccessBridge library with parameter ignore_callbacks=True.\nThen application\u2019s element information is still accessible and any actions on those elements can be performed\nwith RPA.Desktop library. Keep in mind that you can still manuall refresh an element with `Refresh Element`.\n\n*Note.* There are still keywords, for example. `Call Element Action`, which will cause error if used in this\nsituation.\n\n```robotframework\n*** Settings ***\nLibrary   RPA.JavaAccessBridge   ignore_callbacks=True\n```\n\n**Controlling the Java window**\n\nKeyword for this purpose is `Select Window`. Window selection is based on the `title` parameter, which can be\ngiven as a regular expressions to match the correct window. The keyword brings the window into focus and initially\nreads window\u2019s element structure.\n\n**Locating elements**\n\nTo automate actions on the Java application, the robot needs locations to various elements\nusing a feature called [Java locators](https://robocorp.com/docs-robot-framework/development-guide/locators#java-locators). Locator describes properties of an element.\n\nAt the moment library contains basic level support for locators.\n\nThe common locator types are `name` and `role`.\n\nTo identify element with more than one property and can be used, for example:\n\n> ```console\n> role:push button and name:Clear\n> ```\n\nTo address element within parent element > can be used, for example:\n\n> ```console\n> name:Find Purchase Orders > name:NumberField\n> ```\n\nSome keywords accept element as an parameter in place of locator.\n\nNew locator type strict has been added in rpaframework==12.5.0. Currently\nproperty values of string type have been evaluated with startsWith which\ncan match several property values. With strict set in the locator string,\nall locator on the right side of this definition will be matched using\nstrict (equal matching), example:\n\n> ```robotframework\n> # without strict, name can be 'Type', 'Type1', 'Type of'...\n> Get Elements   role:push button and name:Type\n> # name must be equal to 'Type'\n> Get Elements  role:push button and strict:True and name:Type\n> ```\n\nKeyword `Get Elements` has extra parameter `strict`, which when set to\n`True` forces all locator value matches to be strict, example:\n\n> ```robotframework\n> # without strict, name can be 'Type', 'Type1', 'Type of'...\n> Get Elements  role:push button and name:Type\n> # name must be equal to 'Type' and role must be equal to 'text'\n> Get Elements  role:text and name:Type  strict=True\n> ```\n\n**About JavaElement object**\n\nThe `JavaElement` was added in rpaframework==12.3.0 for easy access into\n`ContextNode` objects which have been returned by `Get Elements` keyword.\n\nKeyword `Get Elements` still returns `ContextNode` objects, but with parameter\n`java_elements=True` the keyword returns `JavaElement` objects instead (they\nstill contain reference to `ContextNode` object via `node` property, e.g.\nJavaObject.node).\n\nProperties and methods included in the JavaElement:\n\n- name: str\n- role: str\n- description: str\n- states: list            # list presentation of states (string)\n- ancestry: int           # you can set the maximum depth based on this\n- checked: bool\n- selected: bool\n- visible: bool\n- enabled: bool\n- showing: bool\n- focusable: bool\n- states_string: str\n- x: int                  # left coordinate of the element\n- y: int                  # top coordinate of the element\n- width: int\n- height: int\n- node: ContextNode       # original ContextNode\n- row: int                # table row, -1 if element is not member of table\n- col: int                # table column, -1 if element is not member of table\n- text: str               # text content of the element\n- column_count: int       # table column count\n- visible_children: list  # visible children elements of this element\n- visible_children_count: int\n- index_in_parent: int    # position in the parent\n- click()                 # method for clicking element center\n- type_text()             # method for typing text into element (if possible)\n\n**Interacting with elements**\n\nBy default application elements are interacted with Actions supported by the element.\nMost common example is click action supported by an button element.\n\nBut because application and technology support for the actions might be limited, it is also\npossible to opt for interaction elements by their coordinates by giving keyword parameter\n`action=False` if parameter is available.\n\n**Examples**\n\n*robotframework*\n\n```robotframework\n*** Settings ***\nLibrary   RPA.JavaAccessBridge\nLibrary   Process\n\n*** Tasks ***\nWrite text into Swing application\n    Start Process    java -jar BasicSwing.jar\n    ...              shell=${TRUE}\n    ...              cwd=${CURDIR}\n    Select Window    Chat Frame\n    Type Text    role:text\n    ...          text for the textarea\n    Type Text    role:text\n    ...          text for the input field\n    ...          index=1\n    ...          clear=${TRUE}\n    Click Element    role:push button and name:Send\n```\n\n*Python*\n\n```python\nfrom RPA.JavaAccessBridge import JavaAccessBridge\nimport subprocess\n\njab = JavaAccessBridge()\n\nsubprocess.Popen(\n    [\"java\", \"-jar\", \"BasicSwing.jar\"],\n    shell=True,\n    cwd=\".\",\n    close_fds=True\n)\njab.select_window(\"Chat Frame\")\njab.type_text(\n    \"role:text\",\n    \"text for the textarea\",\n    enter=True\n)\njab.type_text(\n    \"role:text\",\n    \"text for the input field\",\n    index=1,\n    clear=True\n)\njab.click_element(\"role:push button and name:Send\")\n```\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### application_refresh()\n\nRefresh application element tree\n\nMight be required action after application element\nstructure changes after window refresh.\n\n#### call_element_action(locator: str, action: str)\n\nCall element action\n\n* **Parameters:**\n  * **locator** \u2013 target element\n  * **action** \u2013 name of the element action to call\n\n#### click_coordinates(x: int, y: int, click_type: str = 'click', delay: float = 0.5)\n\nKeyword to mouse click at specific coordinates.\n\n* **Parameters:**\n  * **x** \u2013 horizontal coordinate\n  * **y** \u2013 vertical coordinates\n  * **click_type** \u2013 default click, see RPA.Desktop for different\n    click options\n  * **delay** \u2013 how much in seconds to delay after click, defaults to 0.5\n\n#### click_element(locator: ContextNode | JavaElement | str, index: int = 0, action: bool = True, timeout: int = 10, click_type: str = 'click')\n\nClick element\n\n* **Parameters:**\n  * **locator** \u2013 element to click\n  * **index** \u2013 target element index if multiple are returned\n  * **action** \u2013 call click action on element (default), or use coordinates\n  * **timeout** \u2013 timeout in seconds to find element\n  * **click_type** \u2013 default click, see RPA.Desktop for different\n    click options\n\n#### click_push_button(button_name: str)\n\nClick element of role push button\n\n* **Parameters:**\n  **button_name** \u2013 name of the button to click\n\n#### close_java_window()\n\nClose active Java window which has been accessed\nvia ``Select Window` keyword.\n\n#### get_element_actions(locator: ContextNode | JavaElement | str) \u2192 List[str]\n\nGet list of possible element actions\n\n* **Parameters:**\n  **locator** \u2013 target element\n\n#### get_element_text(locator: ContextNode | JavaElement | str, index: int = 0)\n\nGet element text\n\n* **Parameters:**\n  * **locator** \u2013 target element\n  * **index** \u2013 target element index if multiple are returned\n\n#### get_elements(locator: str, java_elements: bool = False, strict: bool = False) \u2192 List[ContextNode | JavaElement]\n\nGet matching elements\n\n* **Parameters:**\n  * **locator** \u2013 elements to get\n  * **java_elements** \u2013 if True will return elements as `JavaElement`\n    on False will return Java ContextNodes\n  * **strict** \u2013 on True all locator matches need to match exactly, on\n    False will be using startsWith matching on non-integer properties\n* **Returns:**\n  list of ContextNodes or JavaElements\n\nPython example.\n\n```python\nelements = java.get_elements(\"name:common\", java_elements=True)\nfor e in elements:\n    print(e.name if e.name else \"EMPTY\", e.visible, e.x, e.y)\n    if e.role == \"check box\":\n        e.click()\n    else:\n        java.type_text(e, \"new content\", clear=True, typing=False)\n\n# following does NOT return anything because search is strict\n# and there are no 'push butto' role\nelements = java.get_elements(\"role:push butto\", strict=True)\n```\n\nRobotframework  example.\n\n```robotframework\n${elements}=    Get Elements\n...    role:push button and name:Send\n...    java_elements=True\nEvaluate   $elements[0].click()\nClick Element    ${elements}[0]    action=False\nType Text\n...    ${elements}[0]\n...    moretext\n...    clear=True\n...    typing=False\n```\n\n#### get_locator_tree()\n\nReturn Java locator tree as list of objects.\n\nMostly relevant object properties are:\n\n> - ancestry\n> - role\n> - name\n> - description\n> - indexInParent\n* **Returns:**\n  list of objects\n\n#### get_version_info()\n\nGet Java Access Bridge version information\n\n#### highlight_element(locator: ContextNode | JavaElement | str, index: int = 0)\n\nHighlight an element\n\n* **Parameters:**\n  * **locator** \u2013 element to highlight\n  * **index** \u2013 target element index if multiple are returned\n\n#### list_java_windows()\n\nList all available Java windows.\n\nJavaWindow object contains following properties:\n\n> - Java process id (pid)\n> - Java window title\n> - Java window handle (hwnd)\n\nThe pid and title can be used to get control of the\nJava process by.\n\n* **Returns:**\n  list of JavaWindow objects\n\n**Python example.**\n\n```python\nwindow_list = java.list_java_windows()\n# By looping window list\nfor window in window_list:\n    if window.title == \"my java window title\":\n        logging.info(\"Java window found\")\n        java.select_window_by_pid(window.pid)\n# Directly accessing\nif len(window_list) == 1:\n    java.select_window_by_pid(window_list[0].pid)\n```\n\n**Robot Framework example.**\n\n```robotframework\n@{window_list}=    List Java Windows\nFOR    ${window}    IN    @{window_list}\n    IF    \"${window.title}\" == \"my java window title\"\n        Select Window By PID    ${window.pid}\n    END\nEND\nIF    len($window_list)==1\n    Select Window By PID    ${window_list[0].pid}\nEND\n```\n\n#### press_keys(\\*keys)\n\nPress multiple keys down simultaneously\n\nSee [Desktop](https://rpaframework.org/libraries/desktop/index.html) library documentation for supported keys\n\n* **Parameters:**\n  **keys** \u2013 keys to press\n\n#### print_element_tree(filename: str | None = None)\n\nPrint current element into log and possibly into a file\n\n* **Parameters:**\n  **filename** \u2013 filepath to save element tree\n* **Returns:**\n  element tree\n\n#### print_locator_tree(filename: str | None = None)\n\nPrint current Java window locator list into log and possibly\ninto a file.\n\n* **Parameters:**\n  **filename** \u2013 filepath to save locator tree\n* **Returns:**\n  locator tree\n\n#### read_table(locator: ContextNode | JavaElement | str, visible_only: bool = True)\n\nReturn Java table as list of lists (rows containing columns).\n\nEach cell element is represented by `JavaElement` class.\n\n* **Parameters:**\n  * **locator** \u2013 locator to match element with type of table\n  * **visible_only** \u2013 return all the children when this is False\n* **Returns:**\n  list of lists\n\nExample.\n\n```python\ntable = java.read_table(locator_table)\nfor row in table:\n    for cell in row:\n        if cell.role == \"check box\":\n            print(cell.row, cell.col, str(cell.checked))\n        else:\n            print(cell.row, cell.col, cell.name)\n```\n\n#### refresh_element(locator: ContextNode | JavaElement | str, index: int = 0) \u2192 JavaElement\n\nRefresh an element alone.\n\nThis will ensure the latest data is available in the targeted element, thus\ngaining speed when dealing with big apps that won\u2019t require an entire global\nrefresh. The obtained Java element is returned.\n\n* **Parameters:**\n  * **locator** \u2013 element to refresh\n  * **index** \u2013 target element index if multiple are returned\n* **Returns:**\n  the Java element found by the passed locator\n\n#### select_menu(menu: str, menuitem: str)\n\nSelect menu by clicking menu elements\n\n* **Parameters:**\n  * **menu** \u2013 name of the menu\n  * **menuitem** \u2013 name of the menu item\n\n#### select_window(title: str, bring_foreground: bool = True, timeout: int = 30)\n\nSelects Java application window as target for the automation using\nJava window title.\n\n* **Parameters:**\n  * **title** \u2013 application window title\n  * **bring_foreground** \u2013 if application is brought to foreground or not\n  * **timeout** \u2013 selection timeout\n\n#### select_window_by_pid(pid: int, bring_foreground: bool = True, timeout: int = 30)\n\nSelects Java application window as target for the automation using\nJava process ID (pid).\n\n* **Parameters:**\n  * **pid** \u2013 application process id\n  * **bring_foreground** \u2013 if application is brought to foreground or not\n  * **timeout** \u2013 selection timeout\n\n#### select_window_by_title(title: str, bring_foreground: bool = True, timeout: int = 30)\n\nSelects Java application window as target for the automation using\nJava window title.\n\n* **Parameters:**\n  * **title** \u2013 application window title\n  * **bring_foreground** \u2013 if application is brought to foreground or not\n  * **timeout** \u2013 selection timeout\n\n#### set_display_scale_factor(factor: float) \u2192 float\n\nOverride library display scale factor.\n\nKeyword returns previous value.\n\n* **Parameters:**\n  **factor** \u2013 value for the new display scale factor\n* **Returns:**\n  previous display scale factor value\n\n#### set_mouse_position(element: ContextNode)\n\nSet mouse position to element center\n\n* **Parameters:**\n  **element** \u2013 target element\n\n#### shutdown_jab()\n\nCall Java Access Bridge process shutdown\n\n#### toggle_drop_down(locator: ContextNode | JavaElement | str, index: int = 0)\n\nToggle dropdown action on element\n\n* **Parameters:**\n  * **locator** \u2013 element locator\n  * **index** \u2013 target element index if multiple are returned\n\n#### type_text(locator: ContextNode | JavaElement | str, text: str, index: int = 0, clear: bool = False, enter: bool = False, typing: bool = True)\n\nType text into coordinates defined by locator\n\n* **Parameters:**\n  * **locator** \u2013 target element\n  * **text** \u2013 text to write\n  * **index** \u2013 target element if multiple are returned\n  * **clear** \u2013 should element be cleared before typing\n  * **enter** \u2013 should enter key be pressed after typing\n  * **typing** \u2013 if True (default) will use Desktop().type_text()\n    if False will use Desktop().press_keys()\n\n#### wait_until_element_exists(locator: str, timeout: int = 10)\n\nWait until element(s) matching the locator are found within\ngiven timeout or raises `ElementNotFound` exception.\n\n* **Parameters:**\n  * **locator** \u2013 locator to match element\n  * **timeout** \u2013 timeout in seconds to find element\n* **Returns:**\n  element(s) if found\n\n#### wait_until_element_is_focused(locator: ContextNode | JavaElement | str, index: int = 0, timeout: float = 0.5)\n\nWait until element is focused\n\n* **Parameters:**\n  * **locator** \u2013 target element\n  * **index** \u2013 target element index if multiple are returned\n  * **timeout** \u2013 timeout in seconds to wait, default 0.5 seconds\n\n#### wait_until_element_text_contains(locator: ContextNode | JavaElement | str, text: str, index: int = 0, timeout: float = 0.5)\n\nWait until element text contains expected text\n\n* **Parameters:**\n  * **locator** \u2013 target element\n  * **text** \u2013 element text should contain this\n  * **index** \u2013 target element index if multiple are returned\n  * **timeout** \u2013 timeout in seconds to wait, default 0.5 seconds\n\n#### wait_until_element_text_equals(locator: ContextNode | JavaElement | str, text: str, index: int = 0, timeout: float = 0.5)\n\nWait until element text equals expected text\n\n* **Parameters:**\n  * **locator** \u2013 target element\n  * **text** \u2013 element text should match this\n  * **index** \u2013 target element index if multiple are returned\n  * **timeout** \u2013 timeout in seconds to wait, default 0.5 seconds\n"
  },
  {
    "module": "RPA.JSON.JSON",
    "markdown": "# Python API\n\n## JSON\n\n### *class* RPA.JSON.JSON\n\nJSON is a library for manipulating [JSON](http://json.org/) files and strings.\n\nJSON is a common data interchange format inspired by a subset of\nthe Javascript programming language, but these days is a de facto\nstandard in modern web APIs and is language agnostic.\n\n### Serialization\n\nThe term serialization refers to the process of converting\nRobot Framework or Python types to JSON or the other way around.\n\nBasic types can be easily converted between the domains,\nand the mapping is as follows:\n\n| JSON          | Python   |\n|---------------|----------|\n| object        | dict     |\n| array         | list     |\n| string        | str      |\n| number (int)  | int      |\n| number (real) | float    |\n| true          | True     |\n| false         | False    |\n| null          | None     |\n\n### About JSONPath\n\nReading and writing values from/to JSON serializable objects is done\nusing [JSONPath](http://goessner.net/articles/JsonPath/). It\u2019s a syntax designed to quickly and easily refer to\nspecific elements in a JSON structure. The specific flavor used in this\nlibrary is based on [jsonpath-ng](https://pypi.org/project/jsonpath-ng/#description).\n\nCompared to Python\u2019s normal dictionary access, JSONPath expressions can\ntarget multiple elements through features such as conditionals and wildcards,\nwhich can simplify many JSON-related operations. It\u2019s analogous to XPath\nfor XML structures.\n\n#### Syntax example\n\nFor this example consider the following structure:\n\n```json\n{\n  \"clients\": [\n    {\n      \"name\": \"Johnny Example\",\n      \"email\": \"john@example.com\",\n      \"orders\": [\n          {\"address\": \"Streetroad 123\", \"price\": 103.20},\n          {\"address\": \"Streetroad 123\", \"price\": 98.99}\n      ]\n    },\n    {\n      \"name\": \"Jane Example\",\n      \"email\": \"jane@example.com\",\n      \"orders\": [\n          {\"address\": \"Waypath 321\", \"price\": 22.00},\n          {\"address\": \"Streetroad 123\", \"price\": 2330.01}\n      ]\n    }\n  ]\n}\n```\n\nIn the simplest case JSONPath can replace nested access:\n\n```robotframework\n*** Tasks ***\nNested access\n    # First order of first client, with direct dictionary access\n    ${value}=    Set variable    ${json}[\"clients\"][0][\"orders\"][0]\n\n    # JSONPath access\n    ${value}=    Get value from JSON    ${json}    $.clients[0].orders[0]\n```\n\nBut the power comes from complicated expressions:\n\n```robotframework\n*** Tasks ***\nComplicated expressions\n    # Find delivery addresses for all orders\n    ${prices}=        Get values from JSON    $..address\n\n    # Find orders that cost over 100\n    ${expensives}=    Get values from JSON    $..orders[?(@.price>100)]\n```\n\n#### Supported Expressions\n\nThe supported syntax elements are:\n\n| Element         | Description                                                      |\n|-----------------|------------------------------------------------------------------|\n| `$`             | Root object/element                                              |\n| `@`             | Current object/element inside expressions                        |\n| `.` or `[]`     | Child operator                                                   |\n| `..`            | Recursive descendant operator                                    |\n| ```parent```    | Parent operator, see [functions]()                               |\n| `*`             | Wilcard, any element                                             |\n| `,`             | Select multiple fields                                           |\n| `[n]`           | Array index                                                      |\n| `[a:b:c]`       | Array slice (start, end, step)                                   |\n| `[a,b]`         | Union of indices or names                                        |\n| `[?()]`         | Apply a filter expression                                        |\n| `()`            | Script expression                                                |\n| `[\\\\field]`     | Sort descending by `field`, cannot be combined with<br/>filters. |\n| `[/field]`      | Sort ascending by `field`, cannot be combined with<br/>filters.  |\n| ```str()```     | Convert value to string, see [functions]()                       |\n| ```sub()```     | Regex substitution function, see [functions]()                   |\n| ```len```       | Calculate value\u2019s length, see [functions]()                      |\n| ```split()```   | String split function, see [functions]()                         |\n| `+` `-` `*` `/` | Arithmetic functions, see [functions]()                          |\n\n##### Functions\n\nThis library allows JSON path expressions to include certain functions\nwhich can provide additional benefit to users. These functions are\ngenerally encapsulated in backticks (```). Some functions require\nyou to pass arguments similar to a Python function.\n\nFor example, let\u2019s say a JSON has nodes on the JSON path\n`$.books[*].genres` which are represented as strings of genres with\ncommas separating each genre. So for one book, this node might have a\nvalue like `horror,young-adult`. You can return a list of first genre\nfor each book by using the `split` function like so:\n\n```robotframework\n*** Task ***\nGet genres\n    ${genres}=  Get values from JSON    $.books[*].genres.```split(,, 0, -1)```\n```\n\nEach functions parameters are defined here:\n\n| Function                          | Usage                                                                                                                                                                                                                   |\n|-----------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `str()`                           | No parameters, but parenthesis are required                                                                                                                                                                             |\n| `sub(/regex/, repl)`              | The regex pattern must be provided in *regex*<br/>and the replacement value provided in *repl*                                                                                                                          |\n| `len`                             | No parameters and no parenthesis                                                                                                                                                                                        |\n| `split(char, segment, max_split)` | Separator character provided as *char*, which<br/>index from the resulting array to be returns<br/>provided as *segment*, and maximum number of<br/>splits to perform provided as *max_split*,<br/>`-1` for all splits. |\n| `parent`                          | No parameters, no parenthesis                                                                                                                                                                                           |\n\n**Arithmetic Functions**\n\nJSON Path can be written and combined to concatenate string values\nor perform arithmetic functions on numerical values. Each JSONPath\nexpression used must return the same type, and when performing\nsuch functions between returned lists, each list must be the same\nlength. An example is included in documentation for the keyword\n`Get values from JSON`.\n\n##### Additional Information\n\nThere are a multitude of different script expressions\nin addition to the elements listed above, which can\nbe seen in the [aforementioned article](http://goessner.net/articles/JsonPath/).\n\nFor further library usage examples, see the individual keywords.\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_to_json(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, expr: str, value: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nAdd items into a JSON serializable object and return the result.\n\nIf the target is a list, the values are appended to the end.\nIf the target is a dict, the keys are either added or updated.\n\n* **Parameters:**\n  * **doc** \u2013 JSON serializable object\n  * **expr** \u2013 JSONPath expression\n  * **value** \u2013 values to either append or update\n* **Returns:**\n  JSON serializable object of the updated JSON\n\nRobot Framework Example:\n\n```robotframework\n*** Task ***\nChange the name value for all people\n    &{before}=    Convert string to JSON   {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\n    &{person}=    Create dictionary      Name=John\n    &{after}=     Add to JSON    ${before}   $.People    ${person}\n```\n\nPython Example:\n\n```python\nfrom RPA.JSON import JSON\n\n# Change the name value for all people\njs = JSON()\nbefore = js.convert_string_to_json('{\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}')\nperson = {\"Name\": \"John\"}\nafter = js.add_to_json(before, \"$.People\", person)\n\nprint(after)\n```\n\n#### convert_json_to_string(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None) \u2192 str\n\nConvert a JSON serializable object to a string and return it.\n\n* **Parameters:**\n  **doc** \u2013 JSON serializable object\n* **Returns:**\n  string of the JSON serializable object\n\nRobot Framework Example:\n\n```robotframework\n*** Task ***\nConvert to string\n    ${obj}=    Create dictionary    Key=Value\n    ${json}=   Convert JSON to string    ${obj}\n    Should be equal    ${json}     {\"Key\": \"Value\"}\n```\n\nPython Example:\n\n```python\nfrom RPA.JSON import JSON\nfrom robot.libraries.BuiltIn import BuiltIn\n\nobj = {\"Key\": \"Value\"}\njson = JSON().convert_json_to_string(obj)\nBuiltIn().should_be_equal(json, '{\"Key\": \"Value\"}')\n```\n\n#### convert_string_to_json(doc: str) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nConvert a string to a JSON serializable object and return it.\n\n* **Parameters:**\n  **doc** \u2013 JSON string\n* **Returns:**\n  JSON serializable object of the string\n\nRobot Framework Example:\n\n```robotframework\n*** Task ***\nConvert to json\n    ${json}=    Set variable    {\"Key\": \"Value\"}\n    &{obj}=     Convert string to JSON    ${json}\n    Should be equal    ${obj.Key}    Value\n```\n\nPython Example:\n\n```python\nfrom RPA.JSON import JSON\nfrom robot.libraries.BuiltIn import BuiltIn\n\njson = '{\"Key\": \"Value\"}'\nobj = JSON().convert_string_to_json(json)\nBuiltIn().should_be_equal(obj[\"Key\"], \"Value\")\n```\n\n#### delete_from_json(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, expr: str) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nDelete values from a JSON serializable object and return the result.\nWill delete all values that match the expression.\n\n* **Parameters:**\n  * **doc** \u2013 JSON serializable object or string\n  * **expr** \u2013 JSONPath expression\n* **Returns:**\n  JSON serializable object with values removed\n\nExample:\n\n```robotframework\n*** Task ***\nDelete all people\n    &{before}=    Convert string to JSON   {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\n    &{after}=     Delete from JSON    ${before}   $.People[*]\n```\n\n```python\nfrom RPA.JSON import JSON\n\n# Delete all people\nbefore = {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\nafter = JSON().delete_from_json(before, \"$.People[*]\")\nprint(after)\n```\n\n#### get_value_from_json(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, expr: str, default: Any | None = None) \u2192 str\n\nGet a single value from a JSON serializable object that matches the given expression.\n\nRaises a ValueError if there is more than one match.\nReturns the given default argument (or None) if there\nwere no matches.\n\n* **Parameters:**\n  * **doc** \u2013 JSON serializable object or string\n  * **expr** \u2013 jsonpath expression\n  * **default** \u2013 default value to return in the absence of a match\n* **Returns:**\n  string containing the match OR default if there are no matches\n* **Raises:**\n  **ValueError** \u2013 if more than one match is discovered\n\nShort Robot Framework Example:\n\n```robotframework\n*** Task ***\nGet the name value for the first person\n    &{people}=    Convert string to JSON   {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\n    ${first}=     Get value from JSON      ${people}   $.People[0].Name\n```\n\nShort Python Example:\n\n```python\nfrom RPA.JSON import JSON\n\n# Get the name value for the second person.\npeople = {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\nsecond = JSON().get_value_from_json(people, \"$.People[1].Name\")\nprint(second)\n```\n\nExtended Robot Framework Example:\n\n```robotframework\n*** Settings ***\nLibrary         RPA.JSON\nSuite Setup     Ingest JSON\n\n*** Variables ***\n${JSON_STRING}      {\n...                   \"clients\": [\n...                     {\n...                       \"name\": \"Johnny Example\",\n...                       \"email\": \"john@example.com\",\n...                       \"orders\": [\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 103.20, \"id\":\"guid-001\"},\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 98.99, \"id\":\"guid-002\"}\n...                       ]\n...                     },\n...                     {\n...                       \"name\": \"Jane Example\",\n...                       \"email\": \"jane@example.com\",\n...                       \"orders\": [\n...                         {\"address\": \"Waypath 321\", \"state\": \"WA\", \"price\": 22.00, \"id\":\"guid-003\"},\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 2330.01, \"id\":\"guid-004\"},\n...                         {\"address\": \"Waypath 321\", \"state\": \"WA\", \"price\": 152.12, \"id\":\"guid-005\"}\n...                       ]\n...                     }\n...                   ]\n...                 }\n${ID}               guid-003\n\n*** Tasks ***\nGet email for specific order id\n    ${email}=    Get value from json    ${JSON_DOC}    $.clients[?(@..id==\"${ID}\")].email\n    Log    \\nOUTPUT IS\\n ${email}    console=${True}\n    Should be equal as strings    ${email}    jane@example.com\n\n*** Keywords ***\nIngest JSON\n    ${doc}=    Convert string to json    ${JSON_STRING}\n    Set suite variable    ${JSON_DOC}    ${doc}\n```\n\n#### get_values_from_json(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, expr: str) \u2192 list\n\nGet all values from a JSON serializable object that match the given expression.\n\n* **Parameters:**\n  * **doc** \u2013 JSON serializable object or string\n  * **expr** \u2013 JSONPath expression\n* **Returns:**\n  list of values that match\n\nShort Robot Framework Example:\n\n```robotframework\n*** Task ***\nGet all the names for all people\n    &{people}=    Convert string to JSON   {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\n    @{names}=     Get values from JSON     ${people}   $.People[*].Name\n```\n\nShort Python Example:\n\n```python\nfrom RPA.JSON import JSON\n\n# Get all the names for all people\npeople = {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\nnames = JSON().get_values_from_json(people, \"$.People[*].Name\")\nprint(second)\n```\n\nExtended Robot Framework Example:\n\n```robotframework\n*** Settings ***\nLibrary         RPA.JSON\nSuite Setup     Ingest JSON\n\n*** Variables ***\n${JSON_STRING}      {\n...                   \"clients\": [\n...                     {\n...                       \"name\": \"Johnny Example\",\n...                       \"email\": \"john@example.com\",\n...                       \"orders\": [\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 103.20, \"id\":\"guid-001\"},\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 98.99, \"id\":\"guid-002\"}\n...                       ]\n...                     },\n...                     {\n...                       \"name\": \"Jane Example\",\n...                       \"email\": \"jane@example.com\",\n...                       \"orders\": [\n...                         {\"address\": \"Waypath 321\", \"state\": \"WA\", \"price\": 22.00, \"id\":\"guid-003\"},\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 2330.01, \"id\":\"guid-004\"},\n...                         {\"address\": \"Waypath 321\", \"state\": \"WA\", \"price\": 152.12, \"id\":\"guid-005\"}\n...                       ]\n...                     }\n...                   ]\n...                 }\n${ID}               guid-003\n\n*** Tasks ***\nGet All Prices and Order Ids\n    # Arithmetic operations only work when lists are of equal lengths and types.\n    ${prices}=    Get values from json\n    ...    ${JSON_DOC}\n    ...    $.clients[*].orders[*].id + \" has price \" + $.clients[*].orders[*].price.```str()```\n    Log    \\nOUTPUT IS\\n ${prices}    console=${True}\n    Should be equal as strings    ${prices}\n    ...    ['guid-001 has price 103.2', 'guid-002 has price 98.99', 'guid-003 has price 22.0', 'guid-004 has price 2330.01', 'guid-005 has price 152.12']\n\nFind Only Valid Emails With Regex\n    # The regex used in this example is simplistic and\n    # will not work with all email addresses\n    ${emails}=    Get values from json\n    ...    ${JSON_DOC}\n    ...    $.clients[?(@.email =~ \"[a-zA-Z]+@[a-zA-Z]+\\.[a-zA-Z]+\")].email\n    Log    \\nOUTPUT IS\\n ${emails}    console=${True}\n    Should be equal as strings    ${emails}    ['john@example.com', 'jane@example.com']\n\nFind Orders From Texas Over 100\n    # The regex used in this example is simplistic and\n    # will not work with all email addresses\n    ${orders}=    Get values from json\n    ...    ${JSON_DOC}\n    ...    $.clients[*].orders[?(@.price > 100 & @.state == \"TX\")]\n    Log    \\nOUTPUT IS\\n ${orders}    console=${True}\n    Should be equal as strings    ${orders}\n    ...    [{'address': 'Streetroad 123', 'state': 'TX', 'price': 103.2, 'id': 'guid-001'}, {'address': 'Streetroad 123', 'state': 'TX', 'price': 2330.01, 'id': 'guid-004'}]\n\n\n*** Keywords ***\nIngest JSON\n    ${doc}=    Convert string to json    ${JSON_STRING}\n    Set suite variable    ${JSON_DOC}    ${doc}\n```\n\n#### load_json_from_file(filename: str, encoding='utf-8') \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nLoad JSON data from a file, and return it as JSON serializable object.\nDepending on the input file the object can be either a dictionary,\na list, or a scalar value.\n\n* **Parameters:**\n  * **filename** \u2013 path to input file\n  * **encoding** \u2013 file character encoding\n* **Returns:**\n  JSON serializable object of the JSON file\n\nExample:\n\n```robotframework\n*** Task ***\nLoad json\n    &{auth}=    Load JSON from file    auth.json\n    Log   Current auth token: ${auth.token}\n```\n\n#### save_json_to_file(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, filename: str, indent: int | None = None, encoding: str = 'utf-8') \u2192 None\n\nSave a JSON serializable object or a string containing\na JSON value into a file.\n\n* **Parameters:**\n  * **doc** \u2013 JSON serializable object or string\n  * **filename** \u2013 path to output file\n  * **indent** \u2013 if given this value is used for json file indent\n  * **encoding** \u2013 file character encoding\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nSave dictionary to file\n    ${john}=    Create dictionary    name=John    mail=john@example.com\n    Save JSON to file    ${john}    john.json\n\nSave string to file\n    ${mark}=    Set variable    {\"name\": \"Mark\", \"mail\": \"mark@example.com\"}\n    Save JSON to file    ${mark}    mark.json\n```\n\nPython Example:\n\n```python\nfrom RPA.JSON import JSON\n\n# Save dictionary to file.\njohn = {\"name\": \"John\", \"mail\": \"john@example.com\"}\nJSON().save_json_to_file(john, \"john.json\")\n```\n\n#### update_value_to_json(doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None, expr: str, value: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None) \u2192 Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None\n\nUpdate existing values in a JSON serializable object and return the result.\nWill change all values that match the expression.\n\n* **Parameters:**\n  * **doc** \u2013 JSON or string\n  * **expr** \u2013 JSONPath expression\n  * **value** \u2013 New value for the matching item(s)\n* **Returns:**\n  JSON serializable object with updated results\n\nShort Robot Framework Example:\n\n```robotframework\n*** Tasks ***\nChange the name key for all people\n    &{before}=    Convert string to JSON   {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\n    &{after}=     Update value to JSON     ${before}   $.People[*].Name    JohnMalkovich\n```\n\n```python\nfrom RPA.JSON import JSON\n\n# Change the name key for all people\nbefore = {\"People\": [{\"Name\": \"Mark\"}, {\"Name\": \"Jane\"}]}\nafter = JSON().update_value_to_json(before, \"$.People[*].Name\",\"JohnMalkovich\")\nprint(after)\n```\n\nExtended Robot Framework Example:\n\n```robotframework\n*** Settings ***\nLibrary         RPA.JSON\nLibrary    Collections\nSuite Setup     Ingest JSON\n\n*** Variables ***\n${JSON_STRING}      {\n...                   \"clients\": [\n...                     {\n...                       \"name\": \"Johnny Example\",\n...                       \"email\": \"john@example.com\",\n...                       \"id\": \"user-001\",\n...                       \"orders\": [\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 103.20, \"id\":\"guid-001\"},\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 98.99, \"id\":\"guid-002\"}\n...                       ]\n...                     },\n...                     {\n...                       \"name\": \"Jane Example\",\n...                       \"email\": \"jane@example.com\",\n...                       \"id\": \"user-002\",\n...                       \"orders\": [\n...                         {\"address\": \"Waypath 321\", \"state\": \"WA\", \"price\": 22.00, \"id\":\"guid-003\"},\n...                         {\"address\": \"Streetroad 123\", \"state\": \"TX\", \"price\": 2330.01, \"id\":\"guid-004\"},\n...                         {\"address\": \"Waypath 321\", \"state\": \"WA\", \"price\": 152.12, \"id\":\"guid-005\"}\n...                       ]\n...                     }\n...                   ]\n...                 }\n${ID}               guid-003\n\n*** Tasks ***\nUpdate user email\n    ${updated_doc}=    Update value to json\n    ...    ${JSON_DOC}\n    ...    $.clients[?(@.id==\"user-001\")].email\n    ...    johnny@example.com\n    Log    \\nNEW JSON IS\\n ${updated_doc}    console=${True}\n    ${new_email}=    Get value from json    ${updated_doc}    $.clients[?(@.id==\"user-001\")].email\n    Should be equal as strings    ${new_email}    johnny@example.com\n\nAdd additional charge to all prices in WA\n    # This example also shows how the update keyword changes the original JSON doc in memory.\n    ${id_price}=    Get values from json\n    ...    ${JSON_DOC}\n    ...    $.clients[*].orders[?(@.state==\"WA\")].id,price\n    FOR    ${order_id}    ${price}    IN    @{id_price}\n        Update value to json    ${JSON_DOC}    $.clients[*].orders[?(@.id==\"${order_id}\")].price    ${{${price} * 1.06}}\n    END\n    Log    \\nNEW JSON IS\\n ${JSON_DOC}    console=${True}\n    ${one_price}=    Get value from json    ${JSON_DOC}    $..orders[?(@.id==${ID})].price\n    Should be equal as numbers    ${one_price}    23.32\n\n*** Keywords ***\nIngest JSON\n    ${doc}=    Convert string to json    ${JSON_STRING}\n    Set suite variable    ${JSON_DOC}    ${doc}\n```\n"
  },
  {
    "module": "RPA.MFA.MFA",
    "markdown": "# Python API\n\n## MFA\n\n### *class* RPA.MFA.MFA(vault_name: str | None = None, vault_key: str | None = None, mode: OTPMode | None = OTPMode.TIME)\n\n**RPA.MFA** is a library intended mainly for generating one-time passwords (OTP)\nand not only, as OAuth2 support was introduced lately.\n\nLibrary requires at the minimum rpaframework version **19.4.0**.\n\nBased on the [pyotp](https://pypi.org/project/pyotp/) and\n[requests_oauthlib](https://pypi.org/project/requests-oauthlib/) packages. It\nprovides support for both MFA with the `* OTP` related keywords and OAuth2\n\u201cAuthorization Code Flow\u201d with the `* OAuth *` related keywords.\n\nIn the below example the **mfa** secret we are reading from the Robocorp\nVault is the passcode generated by the Authenticator service. The passcode\nvalue is stored into the Vault with key **otpsecret**.\n\nPasscode is typically a long string (16-32 characters), which is provided\nin a form of QR image, but it can be obtained by requesting access to a string.\n\nNote that same code can be used to add a mobile phone as a duplicate authentication\ndevice at the same time when the same code is added into the Vault.\n\n**Robot framework example usage:**\n\n```robotframework\n*** Settings ***\nLibrary     RPA.MFA\nLibrary     RPA.Robocorp.Vault\n\n*** Tasks ***\nGenerate time based code\n    ${secrets}=    Get Secret   mfa\n    ${code}=    Get Time Based OTP    ${secrets}[otpsecret]\n```\n\n**Python example usage**\n\n```python\nfrom RPA.MFA import MFA\nfrom RPA.Robocorp.Vault import Vault\n\n\ndef main():\n    secrets = Vault().get_secret(\"mfa\")\n    code = MFA().get_time_based_otp(secrets[\"otpsecret\"])\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### generate_oauth_url(auth_url: str, \\*, client_id: str, redirect_uri: str, scope: str, \\*\\*kwargs) \u2192 str\n\nGenerates an authorization URL which must be opened by the user to start the\nOAuth2 flow and obtain an authorization code as response.\n\nThe received response URL should be passed further with `Get OAuth Token` in\norder to complete the flow. Arbitrary keyword arguments can be passed to the\nkeyword, which will be redirected to the wrapped oauthlib library method\ncall.\n\n* **Parameters:**\n  * **auth_url** \u2013 Authorization endpoint to call the request on. (https URL\n    usually ending with \u2018/authorize\u2019)\n  * **client_id** \u2013 Client app ID. (generated by the provider)\n  * **redirect_uri** \u2013 Redirect URL allowed by the Client app configuration. (\n    necessary for getting the code response)\n  * **scope** \u2013 Space-separated string of permissions. (accepted during the\n    consent screen)\n* **Returns:**\n  Authorization URL string not containing any sensitive info in it.\n  (call it with access_type=\u201doffline\u201d or set the right scope in the\n  authorization URL for ensuring the existence of the refresh token)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nStart OAuth Flow\n    ${auth_url} =    Generate OAuth URL\n    ...     https://accounts.google.com/o/oauth2/auth\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    ...     redirect_uri=https://developers.google.com/oauthplayground\n    ...     scope=https://mail.google.com\n    ...     access_type=offline     prompt=consent  # explicit grant\n    Log     Start OAuth2 flow: ${auth_url}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.MFA import MFA\n\nlib_mfa = MFA()\nauth_url = lib_mfa.generate_oauth_url(\n    \"https://accounts.google.com/o/oauth2/auth\", ...\n)\nprint(f\"Start OAuth2 flow: {auth_url}\")\n```\n\n#### get_counter_based_otp(counter: int, otp_passcode: str | None = None)\n\nGet counter based one time password using separately set\npasscode or by parameter otp_passcode. The counter index is\ngiven by the counter parameter.\n\n* **Parameters:**\n  * **counter** \u2013 the index of the counter\n  * **otp_passcode** \u2013 the passcode provided by the Authenticator\n\n#### get_oauth_token(token_url: str, \\*, client_secret: str, response_url: str, \\*\\*kwargs) \u2192 dict\n\nExchanges the code obtained previously with `Generate OAuth URL` for a\ntoken.\n\nThe refresh token from the returned dictionary can be used further with the\n`Refresh OAuth Token` keyword in order to obtain a new access token when the\nprevious one expires. (usually after one hour)\nArbitrary keyword arguments can be passed to the keyword, which will be\nredirected to the wrapped oauthlib library method call.\n\n* **Parameters:**\n  * **token_url** \u2013 Token endpoint used with a POST request in order to retrieve\n    the token data. (https URL usually ending with \u2018/token\u2019)\n  * **client_secret** \u2013 Client app secret. (generated by the provider)\n  * **response_url** \u2013 The final URL containing the authorization code found in\n    the address bar after authenticating and authorizing the Client app\n    through the authorization URL.\n* **Returns:**\n  A dictionary containing the access token, metadata and optionally the\n  refresh token.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nFinish OAuth Flow\n    ${token} =      Get OAuth Token\n    ...     https://accounts.google.com/o/oauth2/token\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     response_url=${resp_url}  # redirect of `Generate OAuth URL`\n```\n\n**Example: Python**\n\n```python\nfrom RPA.MFA import MFA\n\nlib_mfa = MFA()\nlib_mfa.get_oauth_token(\"https://accounts.google.com/o/oauth2/token\", ...)\n```\n\n#### get_time_based_otp(otp_passcode: str | None = None)\n\nGet time based one time password using separately set\npasscode or by parameter otp_passcode.\n\n* **Parameters:**\n  **otp_passcode** \u2013 the passcode provided by the Authenticator\n\n#### *property* oauth *: OAuth2Session*\n\nRaises if there\u2019s no OAuth2 session already created.\n\n#### refresh_oauth_token(token_url: str, \\*, client_id: str | None = None, client_secret: str, refresh_token: str | None = None, \\*\\*kwargs) \u2192 dict\n\nRefreshes the token as the access one usually expires after 1h and the\nrefresh one never expires. (as long as it doesn\u2019t get revoked)\n\nThe effect of this keyword is similar to `Get OAuth Token`, but this time you\nrefresh unattended an already existing token by receiving a new one instead.\nArbitrary keyword arguments can be passed to the keyword, which will be\nredirected to the wrapped oauthlib library method call.\n\n* **Parameters:**\n  * **token_url** \u2013 Token endpoint used with a POST request in order to refresh\n    the token data. (https URL usually ending with \u2018/token\u2019)\n  * **client_id** \u2013 Client app ID. (generated by the provider)\n  * **client_secret** \u2013 Client app secret. (generated by the provider)\n  * **refresh_token** \u2013 Refresh token string found in the dictionary obtained\n    with `Get OAuth Token` or `Refresh OAuth Token`.\n* **Returns:**\n  A token dictionary containing a new access token and updated\n  metadata. (the refresh token inside isn\u2019t guaranteed to remain constant)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRefresh OAuth Flow\n    ${token} =      Refresh OAuth Token\n    ...     https://accounts.google.com/o/oauth2/token\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     refresh_token=${token}[refresh_token]  # from `Get OAuth Token`\n```\n\n**Example: Python**\n\n```python\nfrom RPA.MFA import MFA\n\nlib_mfa = MFA()\nlib_mfa.refresh_oauth_token(\n    \"https://accounts.google.com/o/oauth2/token\", ...\n)\n```\n\n#### set_counter_based_otp(otp_passcode: str)\n\nSet counter based OTP with passcode.\n\n* **Parameters:**\n  **otp_passcode** \u2013 the passcode provided by the Authenticator\n\n#### set_time_based_otp(otp_passcode: str)\n\nSet time based OTP with passcode.\n\n* **Parameters:**\n  **otp_passcode** \u2013 the passcode provided by the Authenticator\n\n#### use_mfa_secret_from_vault(vault_name: str, vault_key: str, mode: OTPMode = OTPMode.TIME)\n\nSet time or counter based OTP with passcode stored in\nthe Robocorp Vault named with vault_name under key of vault_key.\n\n* **Parameters:**\n  * **vault_name** \u2013 name of the vault storing the passcode\n  * **vault_key** \u2013 name of the vault key storing the passcode value\n"
  },
  {
    "module": "RPA.MSGraph.MSGraph",
    "markdown": "# Python API\n\n## MSGraph\n\n### *class* RPA.MSGraph.MSGraph(client_id: str | None = None, client_secret: str | None = None, token: Token | None = None, refresh_token: str | None = None, redirect_uri: str | None = None, vault_backend: bool = False, vault_secret: str | None = None, file_backend_path: Path | None = WindowsPath('/temp'))\n\nThe *MSGraph* library wraps the [O365 package](https://pypi.org/project/O365), giving robots\nthe ability to access the Microsoft Graph API programmatically.\n\n*OAuth Configuration*\n\nGraph\u2019s API primarily authenticates via the OAuth 2.0 authorization code grant\nflow or OpenID Connect. This library exposes the OAuth 2.0 flow for robots to\nauthenticate on behalf of users. A user must complete an initial authentication\nflow with the help of our [OAuth Graph Example Bot](https://robocorp.com/portal/).\n\nFor best results, [register an app](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade) in Azure AD and configure it as so:\n\n- The type is \u201cWeb App\u201d.\n- Redirect URI should be `https://login.microsoftonline.com/common/oauth2/nativeclient`\n- The app should be a multi-tenant app.\n- `Accounts in any organizational directory` is checked.\n- Has relevant permissions enabled, check the [Microsoft Graph permissions reference](https://docs.microsoft.com/en-us/graph/permissions-reference)\n  for a list of permissions available to MS Graph apps.\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### authorize_and_get_token(authorization_url: str) \u2192 str\n\nExchanges the OAuth authorization URL obtained from\n`Generate OAuth Authorization URL` for an access token. This\nlibrary maintains the user access token for current requests\nand returns the refresh token to be stored in a secure location\n(e.g., the Robocorp Control Room Vault).\n\n* **Parameters:**\n  **authorization_url** \u2013 The full URL retrieved by the user\n  after completing authorization to Microsoft.\n* **Returns:**\n  A refresh token which should be stored securely for\n  future sessions.\n\n#### configure_msgraph_client(client_id: str, client_secret: str, refresh_token: str | None = None, redirect_uri: str | None = None) \u2192 str | None\n\nConfigures the MS Graph client. If a refresh token is\nknown, it can be provided to obtain a current user token\nto authenticate with. A new refresh token is returned\nif one is provided.\n\n* **Parameters:**\n  * **client_id** \u2013 Application client ID.\n  * **client_secret** \u2013 Application client secret.\n  * **refresh_token** \u2013 Authorization refresh token obtained from\n    prior OAuth flows.\n  * **redirect_uri** \u2013 Must be provided with client ID and client\n    secret if not using the default.\n* **Returns:**\n  A new refresh token if one was provided, or `None`.\n\n#### create_sharepoint_list(list_data: dict, site: Site) \u2192 SharepointList\n\nCreates a sharepoint list and returns the instance.\n\n* **Parameters:**\n  * **list_data** \u2013 Dictionary with the data for the new list.\n  * **site** \u2013 Site instance obtained from `Get Sharepoint Site`.\n* **Returns:**\n  SharePoint List that was created.\n\n`SharepointList` objects have additional properties that can be accessed\nwith dot-notation, see examples below.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nCreate list\n    ${list}=    Create Sharepoint List\n    ...    ${list_data}\n    ...    ${site}\n    Log    ${list.object_id}\n    Log    ${list.name}\n    Log    ${list.display_name}\n    Log    ${list.description}\n    Log    ${list.column_name_cw}\n    Log    ${list.created_by}\n    Log    ${list.created}\n    Log    ${list.last_modified_by}\n    Log    ${list.modified}\n    Log    ${list.web_url} -->\n\n#### download_file_from_onedrive(target_file: File | str, to_path: str | Path | None = None, name: str | None = None, resource: str | None = None, drive: Drive | str | None = None) \u2192 Path\n\nDownloads a file from Onedrive.\n\nThe downloaded file will be saved to a local path.\n\n* **Parameters:**\n  * **target_file** \u2013 `DriveItem` or file path of the desired file.\n  * **to_path** \u2013 Destination folder of the downloaded file,\n    defaults to the current directory.\n  * **name** \u2013 New name for the downloaded file, with or without extension.\n  * **resource** \u2013 Name of the resource if not using default.\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n* **Returns:**\n  Path to the downloaded file.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nDownload file with path\n    ${download_path}=    Download File From Onedrive\n    ...    /path/to/onedrive/file\n    ...    /path/to/local/folder\n    ...    Report.pdf\n\nDownload file with object\n    ${download_path}=    Download File From Onedrive\n    ...    ${drive_item}\n    ...    /path/to/local/folder\n    ...    Report.pdf -->\n\n#### download_file_from_share_link(share_url: str, to_path: str | Path | None = None, name: str | None = None) \u2192 Path\n\nDownloads file from the share link.\n\nThe downloaded file will be saved to a local path.\n\n* **Parameters:**\n  * **share_url** \u2013 URL of the shared file\n  * **to_path** \u2013 Destination folder of the downloaded file,\n    defaults to the current directory.\n  * **name** \u2013 New name for the downloaded file, with or without extension.\n* **Returns:**\n  The Path to the downloaded file.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nDownload file\n    ${download_path}=    Download File From Share Link\n    ...    https://...\n    ...    /path/to/local/folder\n    ...    Report.pdf -->\n\n#### download_file_from_sharepoint(target_file: File | str, site: Site, to_path: str | Path | None = None, name: str | None = None, drive: Drive | str | None = None) \u2192 Path\n\nDownloads file from SharePoint.\n\nThe downloaded file will be saved to a local folder.\n\n* **Parameters:**\n  * **target_file** \u2013 `DriveItem` or file path of the desired file.\n  * **site** \u2013 Site instance obtained from `Get Sharepoint Site`.\n  * **to_path** \u2013 Destination folder of the downloaded file,\n    defaults to the current directory.\n  * **name** \u2013 New name for the downloaded file, with or without extension.\n  * **drive** \u2013 A `Drive` object or a Drive ID as a string.\n* **Returns:**\n  Path to the downloaded file.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nDownload file\n    ${download_path}=    Download File From Sharepoint\n    ...    /path/to/sharepoint/file\n    ...    ${site}\n    ...    /path/to/local/folder\n    ...    Report.pdf\n\nDownload file with object\n    ${download_path}=    Download File From Onedrive\n    ...    ${drive_item}\n    ...    ${site}\n    ...    /path/to/local/folder\n    ...    Report.pdf -->\n\n#### download_folder_from_onedrive(target_folder: Folder | str, to_path: str | Path | None = None, resource: str | None = None, drive: Drive | str | None = None) \u2192 Path\n\nDownloads a folder from OneDrive with all of its contents,\nincluding subfolders.\n\nCaution when downloading big folder structures. The downloaded\nfolder will be saved to a local path.\n\n* **Parameters:**\n  * **target_folder** \u2013 `DriveItem` or path of the desired folder.\n  * **to_path** \u2013 Destination folder where the download will be saved to,\n    defaults to the current directory.\n  * **resource** \u2013 Name of the resource if not using default.\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n* **Returns:**\n  Path to the downloaded folder.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nDownload folder with path\n    ${download_path}=    Download Folder From Onedrive\n    ...    /path/to/onedrive/folder\n    ...    /path/to/local/folder\n\nDownload folder with object\n    ${download_path}=    Download Folder From Onedrive\n    ...    ${drive_item}\n    ...    /path/to/local/folder -->\n\n#### find_onedrive_file(search_string: str, target_folder: Folder | str | None = None, include_folders: bool | None = False, resource: str | None = None, drive: Drive | str | None = None) \u2192 List[DriveItem]\n\nReturns a list of files found in OneDrive based on the search string.\nIf a folder is not specified, the search is done in the entire drive and\nmay include items that were shared with the user. It is possible to pass\n`root` as the target folder in order to avoid this behavior.\n\nThe files returned are `DriveItem` objects and they have additional\nproperties that can be accessed with dot-notation, see\n`List Files In Onedrive Folder` for details.\n\n* **Parameters:**\n  * **search_string** \u2013 String used to search for file in Onedrive.\n    Values may be matched across several fields including filename,\n    metadata, and file content.\n  * **target_folder** \u2013 Folder where to search for files.\n  * **include_folders** \u2013 Boolean indicating if should return folders as well.\n  * **resource** \u2013 Name of the resource if not using default.\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n* **Returns:**\n  List of DriveItems found based on the search string.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nFind file\n    ${files}=    Find Onedrive File    Report.xlsx -->\n\n#### generate_oauth_authorization_url(client_id: str | None = None, client_secret: str | None = None, redirect_uri: str | None = None, scopes: list | None = None) \u2192 str\n\nGenerates an authorization URL which must be opened\nby the user to complete the OAuth flow. If no scopes\nare provided, the default scope is used which is all\nscopes defined in the `Get Scopes` keyword.\n\n* **Parameters:**\n  * **client_id** \u2013 Application client ID.\n  * **client_secret** \u2013 Application client secret.\n  * **redirect_uri** \u2013 Can be provided with client ID and client\n    secret if not using the default.\n  * **scopes** \u2013 A list of scopes in the form required by the\n    API. Use the helper function `Get scopes`.\n* **Returns:**\n  The URL the user must follow to complete their portion\n  of the OAuth flow.\n\n#### get_drive_instance(resource: str | None = None, drive_id: str | None = None) \u2192 Drive\n\nReturns the specified drive from the specified resource. If\neither is not provided, defaults are returned.\n\n* **Parameters:**\n  * **resource** \u2013 Name of the resource if not using default.\n  * **drive_id** \u2013 The Drive ID as a string.\n* **Returns:**\n  The requested `Drive` object.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet default drive\n    ${default_drive}=    Get drive instance\n    Log    ${default_drive.Name} -->\n\n#### get_file_instance(drive: Drive | str, file: File | str) \u2192 File\n\nReturns a `File` object from the provided drive. If a `File`\nobject is provided, it is reobtained from the API.\n\n* **Parameters:**\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n  * **file_path** \u2013 A `File` object or path as a string.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet file from OneDrive\n    ${folder}=    Get file instance    /path/to/file -->\n\n#### get_folder_instance(drive: Drive | str | None = None, folder: Folder | str | None = None) \u2192 Folder\n\nReturns a folder object from the provided drive. If a folder\nobject is provided, it is reobtained from the API.\n\n* **Parameters:**\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n  * **folder** \u2013 A `Folder` object or folder path as a string.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet folder from OneDrive\n    ${folder}=    Get folder instance    /path/to/folder -->\n\n#### get_items_from_sharepoint_list(list_name: str, site: Site) \u2192 Table\n\nReturns the items on a SharePoint list as a table. The list\nis found by it\u2019s display name.\n\n* **Parameters:**\n  * **list_name** \u2013 Display name of the SharePoint list.\n  * **site** \u2013 Site instance obtained from `Get Sharepoint Site`.\n* **Returns:**\n  Table or list of dicts of the items.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet List\n    ${table}=    Get Items From Sharepoint List    My List    ${site} -->\n\n#### get_me() \u2192 User\n\nReturns the MS Graph object representing the currently logged\nin user. A `User` object is returned. Properties of the user can\nbe accessed like so:\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet the me user object\n    ${me}=    Get Me\n    Log    ${me.full_name}\n    Log    ${me.display_name}\n    Log    ${me.given_name}\n    Log    ${me.surname}\n    Log    ${me.full_name}\n    Log    ${me.mail}\n    Log    ${me.business_phones}\n    Log    ${me.mobile_phone}\n    Log    ${me.about_me}\n    Log    ${me.interests}\n    Log    ${me.job_title}\n    Log    ${me.object_id}\n    Log    ${me.user_principal_name} -->\n\n#### get_scopes(\\*scopes: str) \u2192 list\n\nReturns the proper scope definitions based on the\nprovided \u201cscope helpers\u201d, which are enumerated below.\nYou can pass none to get all scopes. Basic is included\nin all other scopes. The provided object can be passed\nto the `scopes` parameter when calling\n`Generate OAuth Authorization URL`.\n\n* `basic`\n* `mailbox`\n* `mailbox_shared`\n* `message_send`\n* `message_send_shared`\n* `message_all`\n* `message_all_shared`\n* `address_book`\n* `address_book_shared`\n* `address_book_all`\n* `address_book_all_shared`\n* `calendar`\n* `calendar_shared`\n* `calendar_all`\n* `calendar_shared_all`\n* `users`\n* `onedrive`\n* `onedrive_all`\n* `sharepoint`\n* `sharepoint_dl`\n* `settings_all`\n* `tasks`\n* `tasks_all`\n* `presence`\n\n* **Parameters:**\n  **scopes** \u2013 Scopes requested. If left empty, all scopes\n  will be returned.\n* **Returns:**\n  A list of Scopes which can be passed to authorization\n  keywords.\n\n#### get_sharepoint_site(\\*args: str, resource: str | None = '') \u2192 Site\n\nReturns a SharePoint site.\n\n* **Parameters:**\n  * **args** \u2013 The SharePoint site to retrieve, see documentation\n    for different methods of defining the site.\n  * **resource** \u2013 Name of the resource if not using default.\n* **Returns:**\n  SharePoint Site instance.\n\nThere are multiple ways of retrieving a SharePoint site:\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet SharePoint site with host name\n    [Documentnation]    Use the host_name e.g.\n    ...    'contoso.sharepoint.com' or 'root'.\n    Get SharePoint site    contoso.sharepoint.com\n\nGet SharePoint site with site ID\n    [Documentnation]    the site_id is a comma separated string\n    ...    of (host_name, site_collection_id, site_id).\n    Get SharePoint site\n    ...    contoso.sharepoint.com, 1234-1234, 5678-5678\n\nGet SharePoint site with path to Site\n    [Documentnation]    host_name e.g. 'contoso.sharepoint.com'\n    ...    and path_to_site is a url path (with a leading slash).\n    Get SharePoint site    contoso.sharepoint.com\n    ...    /path/to/site\n\nGet SharePoint site with separate ID args\n    [Documentnation]    the site ID broken into separate args\n    Get SharePoint site    contoso.sharepoint.com\n    ...    1234-1234\n    ...    5678-5678 -->\n\nThe return is of type Site and it has additional properties\nthat can be accessed with dot-notation. See examples below.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nGet site\n    ${site}=    Get Sharepoint Site    contoso.sharepoint.com\n    Log    ${site.name}\n    Log    ${site.display_name}\n    Log    ${site.description}\n    Log    ${site.web_url}\n    Log    ${site.object_id} -->\n\n#### list_files_in_onedrive_folder(target_folder: Folder | str | None = None, include_folders: bool | None = False, resource: str | None = None, drive: Drive | str | None = None) \u2192 List[DriveItem]\n\nReturns a list of files from the specified OneDrive folder.\n\nThe files returned are `DriveItem` objects and they have additional\nproperties that can be accessed with dot-notation.\n\n* **Parameters:**\n  * **target_folder** \u2013 Path of the folder in Onedrive. If none is\n    provided, will return files from the root of Onedrive.\n  * **include_folders** \u2013 Boolean indicating if should return folders as well.\n  * **resource** \u2013 Name of the resource if not using default.\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n* **Returns:**\n  List of DriveItems in the folder.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nList files\n    ${files}=    List Files In Onedrive Folder    /path/to/folder\n    FOR    ${file}    IN    @{files}\n        Log    ${file.name}\n        Log    ${file.extension}\n        Log    ${file.description}\n        Log    ${file.created_by}\n        Log    ${file.created}\n        Log    ${file.is_file}\n        Log    ${file.is_image}\n        Log    ${file.is_photo}\n        Log    ${file.is_folder}\n        Log    ${file.size}\n        Log    ${file.web_url}\n    END -->\n\n#### list_files_in_sharepoint_site_drive(site: Site, include_folders: bool | None = False, drive: Drive | str | None = None, target_folder: Folder | str | None = None) \u2192 List[DriveItem]\n\nList files in the SharePoint Site drive.\n\nIf the `drive` is not set, the default Document Library\nwill be used. The `drive` can be obtained from the keyword\n`List Sharepoint Site Drives`.\n\nThe files returned are `DriveItem` objects and they have additional\nproperties that can be accessed with dot-notation, see\n`List Files In Onedrive Folder` for details.\n\n* **Parameters:**\n  * **site** \u2013 Site instance obtained from `Get Sharepoint Site`.\n  * **include_folders** \u2013 Boolean indicating if should return folders\n    as well.\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n  * **target_folder** \u2013 Path of the folder in the Sharepoint drive.\n    If none is provided, will return files from the root of the drive.\n* **Returns:**\n  List of DriveItems present in the Site drive.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\n\nList files in SharePoint drive\n    ${files}    List Files In Sharepoint Site Drive    ${site} -->\n\n#### list_sharepoint_site_drives(site: Site) \u2192 List[Drive]\n\nGet a list of Drives available in the SharePoint Site.\n\n* **Parameters:**\n  **site** \u2013 Site instance obtained from `Get Sharepoint Site`.\n* **Returns:**\n  List of Drives present in the SharePoint Site.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nList SharePoint drives\n    ${drives}    List Sharepoint Site Drives    ${site}\n    FOR    ${drive}    IN    @{drives}\n        Log    ${drive.name}\n        Log    ${drive.description}\n        Log    ${drive.owner.display_name}\n        Log    ${drive.web_url}\n        Log    ${drive.object_id}\n    END -->\n\n#### refresh_oauth_token(refresh_token: str | None = None) \u2192 str\n\nRefreshes the user token using the provided `refresh_token`.\nThe user token is retained in the library and a new\nrefresh token is returned. If no token is provided, this keyword\nassumes the Robocorp Vault is being used as a backend and attempts\nto refresh it based on that backend.\n\n* **Parameters:**\n  **refresh_token** \u2013 The refresh token to use to refresh the\n  session.\n* **Returns:**\n  A refresh token which should be stored securely for\n  future sessions.\n\n#### search_for_users(search_string: str, search_field: str = 'displayName', resource: str = 'users') \u2192 List[User]\n\nReturns a list of `User` objects from the Active Directory\nbased on the provided search string.\n\n`User` objects have additional properties that can be accessed\nwith dot-notation, see `Get Me` for additional details.\n\n* **Parameters:**\n  * **search_string** \u2013 Text to search for.\n  * **search_field** \u2013 Where to search. Defaults to display name.\n  * **resource** \u2013 Name of the resource if not using default.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nSearch users\n    ${users}=    Search For Users    John -->\n\n#### upload_file_to_onedrive(file_path: str, target_folder: Folder | str | None = None, resource: str | None = None, drive: Drive | str | None = None) \u2192 DriveItem\n\nUploads a file to the specified OneDrive folder.\n\nThe uploaded file is returned as a `DriveItem` object and it has\nadditional properties that can be accessed with dot-notation, see\n`List Files In Onedrive Folder` for details.\n\n* **Parameters:**\n  * **file_path** \u2013 Path of the local file being uploaded.\n  * **target_folder** \u2013 Path of the folder in Onedrive.\n  * **resource** \u2013 Name of the resource if not using default.\n  * **drive** \u2013 A `Drive` object or Drive ID as a string. If not\n    provided, will use the default drive.\n* **Returns:**\n  The newly created DriveItem.\n\n<!-- code-block: robotframework\n\n*** Tasks ***\nUpload file\n    ${file}=    Upload File To Onedrive\n    ...    /path/to/file.txt\n    ...    /path/to/folder -->\n"
  },
  {
    "module": "RPA.Netsuite.Netsuite",
    "markdown": "# Python API\n\n## Netsuite\n\n### *class* RPA.Netsuite.Netsuite\n\nNetsuite is a library for accessing Netsuite using NetSuite SOAP web service SuiteTalk.\nThe library extends the [netsuitesdk library](https://github.com/fylein/netsuite-sdk-py).\n\nMore information available at [NetSuite SOAP webservice SuiteTalk](http://www.netsuite.com/portal/platform/developer/suitetalk.shtml).\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Netsuite\nLibrary     RPA.Excel.Files\nLibrary     RPA.Tables\nTask Setup  Authorize Netsuite\n\n*** Tasks ***\nGet data from Netsuite and Store into Excel files\n    ${accounts}=        Get Accounts   account_type=_expense\n    ${accounts}=        Create table    ${accounts}\n    Create Workbook\n    Append Rows To Worksheet  ${accounts}\n    Save Workbook       netsuite_accounts.xlsx\n    Close Workbook\n    ${bills}=           Get Vendor Bills\n    ${bills}=           Create table    ${bills}\n    Create Workbook\n    Append Rows To Worksheet  ${bills}\n    Save Workbook       netsuite_bills.xlsx\n    Close Workbook\n\n\n*** Keywords ***\nAuthorize Netsuite\n    ${secrets}=     Get Secret   netsuite\n    Connect\n    ...        account=${secrets}[ACCOUNT]\n    ...        consumer_key=${secrets}[CONSUMER_KEY]\n    ...        consumer_secret=${secrets}[CONSUMER_KEY]\n    ...        token_key=${secrets}[CONSUMER_SECRET]\n    ...        token_secret=${secrets}[TOKEN_KEY]\n```\n\n**Python**\n\n```python\nfrom RPA.Netsuite import Netsuite\n\nns = Netsuite()\nns.connect()\naccounts = ns.get_accounts()\ncurrencies = ns.get_currencies()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### connect(account: str | None = None, consumer_key: str | None = None, consumer_secret: str | None = None, token_key: str | None = None, token_secret: str | None = None) \u2192 None\n\nConnect to Netsuite with credentials from environment\nvariables.\n\nParameters are not logged into Robot Framework log.\n\n* **Parameters:**\n  * **account** \u2013 parameter or environment variable NS_ACCOUNT\n  * **consumer_key** \u2013 parameter or environment variable NS_CONSUMER_KEY\n  * **consumer_secret** \u2013 parameter or environment variable NS_CONSUMER_SECRET\n  * **token_key** \u2013 parameter or environment variable NS_TOKEN_KEY\n  * **token_secret** \u2013 parameter or environment variable NS_TOKEN_SECRET\n\n#### get_accounts(count: int = 100, account_type: str = None) \u2192 list\n\nGet Accounts of any type or specified type.\n\n* **Parameters:**\n  * **count** \u2013 number of Accounts to return, defaults to 100\n  * **account_type** \u2013 if None returns all account types, example. \u201c_expense\u201d,\n    defaults to None\n* **Returns:**\n  accounts\n\n#### get_classifications() \u2192 list\n\nGet all Netsuite Classifications\n\n* **Returns:**\n  classifications\n\n#### get_currencies() \u2192 list\n\nGet all Netsuite Currencies\n\n* **Returns:**\n  currencies\n\n#### get_currency(currency_id: str) \u2192 object\n\nGet all a Netsuite Currency by its ID\n\n* **Parameters:**\n  **currency_id** \u2013 ID of the currency to get\n* **Returns:**\n  currency\n\n#### get_departments() \u2192 list\n\nGet all Netsuite Departments\n\n* **Returns:**\n  departments\n\n#### get_locations() \u2192 list\n\nGet all Netsuite Locations\n\n* **Returns:**\n  locations\n\n#### get_vendor_bills(count: int = 10) \u2192 list\n\nGet list of vendor bills\n\n* **Parameters:**\n  **count** \u2013 number of vendor bills to return, defaults to 10\n* **Returns:**\n  list of vendor bills\n\n#### get_vendors(count: int = 10) \u2192 list\n\nGet list of vendors\n\n* **Parameters:**\n  **count** \u2013 number of vendors to return, defaults to 10\n* **Returns:**\n  list of vendors\n\n#### login(account: str | None = None, email: str | None = None, password: str | None = None, role: str | None = None, appid: str | None = None) \u2192 None\n\nLogin to Netsuite with credentials from environment variables\n\nParameters are not logged into Robot Framework log.\n\n* **Parameters:**\n  * **account** \u2013 parameter or environment variable NS_ACCOUNT\n  * **email** \u2013 parameter or environment variable NS_EMAIL\n  * **password** \u2013 parameter or environment variable NS_PASSWORD\n  * **role** \u2013 parameter or environment variable NS_ROLE\n  * **appid** \u2013 parameter or environment variable NS_APPID\n\n#### netsuite_get(record_type: str = None, internal_id: str = None, external_id: str = None) \u2192 list\n\nGet all records of given type and internalId and/or externalId.\n\n* **Parameters:**\n  * **record_type** \u2013 type of Netsuite record to get\n  * **internal_id** \u2013 internalId of the type, default None\n  * **external_id** \u2013 external_id of the type, default None\n* **Raises:**\n  **ValueError** \u2013 if record_type is not given\n* **Returns:**\n  records as a list or None\n\n#### netsuite_get_all(record_type: str) \u2192 list\n\nGet all records of given type.\n\n* **Parameters:**\n  **record_type** \u2013 type of Netsuite record to get\n* **Raises:**\n  **ValueError** \u2013 if record_type is not given\n* **Returns:**\n  records as a list or None\n\n#### netsuite_search(type_name: str, search_value: str, operator: str = 'contains', page_size: int = 5) \u2192 PaginatedSearch\n\nSearch Netsuite for value from a type. Default operator is\ncontains.\n\n* **Parameters:**\n  * **type_name** \u2013 search target type name\n  * **search_value** \u2013 what to search for within type\n  * **operator** \u2013 name of the operation, defaults to \u201ccontains\u201d\n  * **page_size** \u2013 result items within one page, defaults to 5\n* **Returns:**\n  paginated search object\n\n#### netsuite_search_all(type_name: str, page_size: int = 20) \u2192 PaginatedSearch\n\nSearch Netsuite for a type results.\n\n* **Parameters:**\n  * **type_name** \u2013 search target type name\n  * **page_size** \u2013 result items within one page, defaults to 5\n* **Returns:**\n  paginated search object\n"
  },
  {
    "module": "RPA.Notifier.Notifier",
    "markdown": "# Python API\n\n## Notifier\n\n### *class* RPA.Notifier.Notifier\n\nNotifier is a library interfacting with different notification providers.\n\n**Supported providers**\n\n- email\n- gmail\n- pushover\n- slack\n- telegram\n- twilio\n\n**Providers not supported yet via specific keywords**\n\n- gitter\n- join\n- mailgun\n- pagerduty\n- popcornnotify\n- pushbullet\n- simplepush\n- statuspage\n- zulip\n\nThere is a keyword `Generic Notify` which can be used\nto call above services, for example.\n\n```robotframework\nGeneric Notify\n    provider_name=gitter\n    message=Hello from Robot\n    token=TOKEN\n    room_id=ID_OF_THE_GITTER_ROOM\n```\n\nParameters for different providers can be read from the\n**Notifiers** documents (link below).\n\nRead more at [https://notifiers.readthedocs.io/en/latest/](https://notifiers.readthedocs.io/en/latest/)\n\n**About kwargs**\n\nThe \\*\\*kwargs is a term for any extra named parameters, which\ncan be included in the same way as already named arguments,\ne.g. `Notify Email` could be called with subject=my email subject\nwhich will be passed through \\*\\*kwargs.\n\nNotifier documentation contains information about all possible\narguments that different providers support.\n\n**Robot Framework**\n\n```robotframework\n&{account}=    Create Dictionary\n...    host=smtp.office365.com\n...    username=ACCOUNT_USERNAME\n...    password=ACCOUNT_PASSWORD\nNotify Email\n...    to=RECIPIENT_EMAIL\n...    from_=SENDER_ADDRESS            # passed via kwargs\n...    subject=Hello from the Robot    # passed via kwargs\n...    message=Hello from the Robot\n...    &{account}                      # passed via kwargs\n```\n\n```python\nnotifier = Notifier()\naccount = {\n    \"host\": \"smtp.office365.com\",\n    \"username\": \"EMAIL_USERNAME\",\n    \"password\": \"EMAIL_PASSWORD\"\n}\nnotifier.email_notify(\n    to=\"RECIPIENT_EMAIL\",\n    from_=\"SENDER_EMAIL\",\n    subject=\"Hello from the Python Robot\",\n    message=\"Hello from the Python RObot\",\n    **account\n)\n```\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary  RPA.Notifier\n\n*** Variables ***\n${SLACK_WEBHOOK}   https://hooks.slack.com/services/WEBHOOKDETAILS\n${CHANNEL}         notification-channel\n\n*** Tasks ***\nLets notify\n   Notify Slack   message from robot  channel=${CHANNEL}  webhook_url=${SLACK_WEBHOOK}\n```\n\n**Python**\n\n```python\nfrom RPA.Notifier import Notifier\n\nlibrary = Notifier()\n\nslack_attachments = [\n   {\n      \"title\": \"attachment 1\",\n      \"fallback\": \"liverpool logo\",\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/fi/thumb/c/cd/Liverpool_FC-n_logo.svg/1200px-Liverpool_FC-n_logo.svg.png\",\n   }\n]\n\nlibrary.notify_slack(\n   message='message for the Slack',\n   channel=\"notification-channel\",\n   webhook_url=slack_webhook_url,\n   attachments=slack_attachments,\n)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### generic_notify(provider_name: str, \\*\\*kwargs)\n\nGeneric keyword to use with any notifier provider.\n\n* **Parameters:**\n  * **provider_name** \u2013 name of the notifier service\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n\n#### notify_email(message: str | None = None, to: str | None = None, username: str | None = None, password: str | None = None, host: str | None = None, port: int = 587, tls: bool = True, \\*\\*kwargs) \u2192 bool\n\nNotify using email provider\n\n* **Parameters:**\n  * **message** \u2013 notification message\n  * **to** \u2013 target of email message\n  * **username** \u2013 email account username\n  * **password** \u2013 email account password\n  * **host** \u2013 email SMTP host name\n  * **port** \u2013 email SMTP host port number\n  * **tls** \u2013 should TLS be used (default True)\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n\nExample.\n\n```robotframework\n# Notify with Outlook account\nNotify Email\n...   message=Message from the Robot\n...   to=RECIPIENT_EMAIL_ADDRESS\n...   username=OUTLOOK_USERNAME\n...   password=OUTLOOK_PASSWORD\n...   host=smtp.office365.com\n...   subject=Subject of the Message\n```\n\n#### notify_gmail(message: str | None = None, to: str | None = None, username: str | None = None, password: str | None = None, \\*\\*kwargs) \u2192 bool\n\nNotify using Gmail provider\n\n* **Parameters:**\n  * **message** \u2013 notification message\n  * **to** \u2013 target of email message\n  * **username** \u2013 GMail account username\n  * **password** \u2013 GMail account password\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n\n#### notify_pushover(message: str | None = None, user: str | None = None, token: str | None = None, \\*\\*kwargs) \u2192 bool\n\nNotify using Pushover provider\n\n* **Parameters:**\n  * **message** \u2013 notification message\n  * **user** \u2013 target user for the notification\n  * **token** \u2013 service token\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n\n#### notify_slack(message: str | None = None, channel: str | None = None, webhook_url: str | None = None, \\*\\*kwargs) \u2192 bool\n\nNotify using Slack provider\n\n* **Parameters:**\n  * **message** \u2013 notification message\n  * **channel** \u2013 target channel for the notification\n  * **webhook_url** \u2013 Slack webhook url\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n\n#### notify_telegram(message: str | None = None, chat_id: str | None = None, token: str | None = None, \\*\\*kwargs) \u2192 bool\n\nNotify using Telegram provider\n\n* **Parameters:**\n  * **message** \u2013 notification message\n  * **chat_id** \u2013 target chat id for the notification\n  * **token** \u2013 service token\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n\n#### notify_twilio(message: str | None = None, number_from: str | None = None, number_to: str | None = None, account_sid: str | None = None, token: str | None = None, \\*\\*kwargs) \u2192 bool\n\nNotify using Twilio provider\n\n* **Parameters:**\n  * **message** \u2013 notification message\n  * **number_from** \u2013 number where the message comes from\n  * **number_to** \u2013 number where the messages goes to\n  * **account_sid** \u2013 Twilio account SID\n  * **token** \u2013 Twilio account token\n  * **kwargs** \u2013 see library documentation\n* **Returns:**\n  True if notification was successful, False if not\n"
  },
  {
    "module": "RPA.OpenAI.OpenAI",
    "markdown": "# Python API\n\n## OpenAI\n\n### *class* RPA.OpenAI.OpenAI\n\nLibrary to support [OpenAI](https://openai.com) and [Azure OpenAI](https://learn.microsoft.com/en-us/azure/cognitive-services/openai/overview) services.\n\nLibrary is **not** included in the rpaframework package, so in order to use it\nyou have to add rpaframework-openai with the desired version in your\n*conda.yaml* file.\n\n**Robot Framework example usage**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Robocorp.Vault\nLibrary    RPA.OpenAI\n\n*** Tasks ***\nCreate a text completion\n    ${secrets}   Get Secret   secret_name=OpenAI\n    Authorize To OpenAI   api_key=${secrets}[key]\n    ${completion}    Completion Create\n    ...     Write a tagline for an ice cream shop\n    ...     temperature=0.6\n    Log   ${completion}\n```\n\n**Python example usage**\n\n```python\nfrom RPA.Robocorp.Vault import Vault\nfrom RPA.OpenAI import OpenAI\n\nsecrets = Vault().get_secret(\"OpenAI\")\nbaselib = OpenAI()\nbaselib.authorize_to_openai(secrets[\"key\"])\n\nresult = baselib.completion_create(\n    Create a tagline for icecream shop',\n    temperature=0.6,\n)\nprint(result)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### authorize_to_azure_openai(api_key: str, api_base: str, api_type: str | None = 'azure', api_version: str | None = '2023-05-15') \u2192 None\n\nKeyword for authorize to Azure OpenAI.\n\n* **Parameters:**\n  * **api_key** \u2013 Your Azure OpenAI API key\n  * **api_base** \u2013 Your Endpoint URL. Example: [https://docs-test-001.openai.azure.com/](https://docs-test-001.openai.azure.com/)\n  * **api_type** \u2013 \u201cazure\u201d\n  * **api_version** \u2013 \u201c2023-05-15\u201d\n\nRobot Framework example:\n\n```robotframework\n${secrets}   Get Secret   secret_name=AzureOpenAI\nAuthorize To Azure Openai\n...    api_key=${secrets}[api_key]\n...    api_base=${secrets}[api_base]\n...    api_type=azure\n...    api_version=2023-05-15\n```\n\nPython example:\n\n```python\nsecrets = Vault().get_secret(\"AzureOpenAI\")\nbaselib = OpenAI()\nbaselib.authorize_to_azure_openai(\n    secrets[\"api_key\"],\n    secrets[\"api_base\"],\n    \"azure\",\n    \"2023-05-15\"\n)\n```\n\n#### authorize_to_openai(api_key: str) \u2192 None\n\nKeyword for authorize to OpenAI with your API key obtained from your account.\n\n* **Parameters:**\n  **api_key** \u2013 Your OpenAI API key\n\nRobot Framework example:\n\n```robotframework\n${secrets}   Get Secret   secret_name=OpenAI\nAuthorize To OpenAI   api_key=${secrets}[key]\n```\n\nPython example:\n\n```python\nsecrets = Vault().get_secret(\"OpenAI\")\nbaselib = OpenAI()\nbaselib.authorize_to_openai(secrets[\"key\"])\n```\n\n#### chat_completion_create(user_content: str | None = None, conversation: List | None = None, model: str | None = 'gpt-3.5-turbo', system_content: str | None = None, temperature: int | None = 1, top_probability: int | None = 1, frequency_penalty: int | None = 0, presence_penalty: int | None = 0) \u2192 None\n\nKeyword for creating ChatGPT text completions using OpenAI or Azure OpenAI.\nKeyword returns the response as a string and the message history as a list.\n\n**Note**. When using `Azure OpenAI` you must provide the `deployment_name`\nas the `model` parameter instead of the model ID used with `OpenAI`.\n\n* **Parameters:**\n  * **user_content** \u2013 Text submitted to ChatGPT to generate completions.\n  * **conversation** \u2013 List containing the conversation to be continued. Leave\n    empty for a new conversation.\n  * **model** \u2013 For `OpenAI` the ID of the model to use, e.g. `gpt-4`\n    or `gpt-3.5-turbo`. For `Azure OpenAI` the Deployment name,\n    e.g. `myGPT4deployment`.\n  * **system_content** \u2013 The system message helps set the behavior of\n    the assistant.\n  * **temperature** \u2013 What sampling temperature to use between 0 to 2. Higher\n    values means the model will take more risks.\n  * **top_probability** \u2013 An alternative to sampling with temperature, called\n    nucleus sampling, where the model considers the results of the tokens with\n    top_p probability mass.\n  * **frequency_penalty** \u2013 Number between -2.0 and 2.0. Positive values penalize\n    new tokens based on their existing frequency in the text so far.\n  * **presence_penalty** \u2013 Number between -2.0 and 2.0. Positive values penalize\n    new tokens based on whether they appear in the text so far.\n\nRobot Framework example:\n\n```robotframework\n# Get response without conversation history.\n${response}   @{chatgpt_conversation}=     Chat Completion Create\n...    user_content=What is the biggest mammal?\nLog    ${response}\n\n# Continue the conversation by using the \"conversation\" argument.\n${response}   @{chatgpt_conversation}=     Chat Completion Create\n...    conversation=${chatgpt_conversation}\n...    user_content=How old can it live?\nLog    ${response}\n```\n\n#### completion_create(prompt: str, model: str | None = 'text-davinci-003', temperature: int | None = 0.7, max_tokens: int | None = 256, top_probability: int | None = 1, frequency_penalty: int | None = 0, presence_penalty: int | None = 0, result_format: str | None = 'string') \u2192 None\n\nKeyword for creating text completions in OpenAI and Azure OpenAI.\nKeyword returns a text string.\n\n**Note**. When using `Azure OpenAI` you must provide the `deployment_name`\nas the `model` parameter instead of the model ID used with `OpenAI`.\n\n* **Parameters:**\n  * **prompt** \u2013 Text submitted to OpenAI for creating natural language.\n  * **model** \u2013 For `OpenAI` the ID of the model to use, e.g. `text-davinci-003`.\n    For `Azure OpenAI` the Deployment name, e.g. `myDavinci3deployment`.\n  * **temperature** \u2013 What sampling temperature to use.\n    Higher values means the model will take more risks..\n  * **max_tokens** \u2013 The maximum number of tokens to generate in the completion..\n  * **top_probability** \u2013 Controls diversity via nucleus sampling. 0.5 means half\n    of all likelihood-weighted options are considered.\n  * **frequency_penalty** \u2013 Number between -2.0 and 2.0. Positive values penalize\n    new tokens based on their existing frequency in the text so far.\n  * **presence_penalty** \u2013 Number between -2.0 and 2.0. Positive values penalize\n    new tokens based on whether they appear in the text so far.\n  * **result_format** \u2013 Result format (string / json). Return just a string or\n    the default JSON response.\n\nRobot Framework example:\n\n```robotframework\n${response}  Completion Create\n...     Write a tagline for an icecream shop.\n...     temperature=0.6\nLog     ${response}\n```\n\nPython example:\n\n```python\nresult = baselib.completion_create(\n    'Create a tagline for icecream shop',\n    temperature=0.6,\n)\nprint(result)\n```\n\n#### image_create(prompt: str, size: str | None = '512x512', num_images: int | None = 1, result_format: str | None = 'list') \u2192 None\n\nKeyword for creating one or more images using OpenAI.\nKeyword returns a list of urls for the images created.\n\n**Note**. Keyword not supported in the `Azure OpenAI` service.\n\n* **Parameters:**\n  * **prompt** \u2013 A text description of the desired image(s).\n    The maximum length is 1000 characters.\n  * **size** \u2013 Size of the files to be created. 256x256, 512x512, 1024x1024\n  * **num_images** \u2013 The number of images to generate. Must be between 1 and 10.\n  * **result_format** \u2013 Result format (list / json).\n\nRobot Framework example:\n\n```robotframework\n${images}    Image Create\n...   Cartoon style picture of a cute monkey skateboarding.\n...   size=256x256\n...   num_images=2\nFOR    ${url}    IN    @{images}\n    Log    ${url}\nEND\n```\n\nPython example:\n\n```python\nimages = baselib.image_create(\n    'Cartoon style picture of a cute monkey skateboarding',\n    size='256x256',\n    num_images=2,\n)\nfor url in images:\n    print(url)\n```\n\n#### image_create_variation(src_image: str, size: str | None = '512x512', num_images: int | None = 1, result_format: str | None = 'list') \u2192 None\n\nKeyword for creating one or more variations of a image. Keyword\nreturns a list of urls for the images created.\nSource file must be a valid PNG file, less than 4MB, and square.\n\n**Note**. Keyword not supported in the `Azure OpenAI` service.\n\n* **Parameters:**\n  * **src_image** \u2013 The image to use as the basis for the variation(s).\n    Must be a valid PNG file, less than 4MB, and square.\n  * **size** \u2013 The size of the generated images.\n    Must be one of 256x256, 512x512, or 1024x1024.\n  * **num_images** \u2013 The number of images to generate. Must be between 1 and 10\n  * **result_format** \u2013 Result format (list / json).\n\nRobot Framework example:\n\n```robotframework\n${variations}   Image Create Variation\n...     source_image.png\n...     size=256x256\n...     num_images=2\nFOR    ${url}    IN    @{variations}\n    Log    ${url}\nEND\n```\n\nPython example:\n\n```python\nvariations = baselib.image_create_variation(\n    'source_image.png',\n    size='256x256',\n    num_images=2,\n)\nfor url in variations:\n    print(url)\n```\n"
  },
  {
    "module": "RPA.Outlook.Application.Application",
    "markdown": "# Python API\n\n## Outlook.Application\n\n### *class* RPA.Outlook.Application.Application(autoexit: bool = True)\n\nOutlook.Application is a library for controlling the Outlook application.\n\n**About Email Filtering**\n\nEmails can be filtered according to specification set by Restrict method of the\nItem class [https://docs.microsoft.com/en-us/office/vba/api/outlook.items.restrict](https://docs.microsoft.com/en-us/office/vba/api/outlook.items.restrict).\n\nCouple of examples:\n\n```robotframework\nGet Emails\n...   email_filter=[Subject]='test email'\n\nMove Emails\n...   email_filter=[SenderEmailAddress]='hello@gmail.com'\n```\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary                 RPA.Outlook.Application\nTask Setup              Open Application\nSuite Teardown          Quit Application\n\n*** Variables ***\n${RECIPIENT}            address@domain.com\n\n*** Tasks ***\nSend email\n    Send Email         recipients=${RECIPIENT}\n    ...                subject=This is the subject\n    ...                body=This is the message body\n    ...                attachments=approved.png\n```\n\n**Python**\n\n```python\nfrom RPA.Outlook.Application import Application\n\ndef send_email():\n    app = Application()\n    app.open_application()\n    app.send_email(\n        recipients='EMAILADDRESS_1, EMAILADDRESS_2',\n        subject='email subject',\n        body='email body message',\n        attachments='../orders.csv'\n```\n\nFor more information, see: [https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2007/bb219950(v=office.12](https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2007/bb219950(v=office.12))\n\n**Caveats**\n\nThis library works on a Windows operating system with UI enabled only, and you must\nensure that you open the app first with `Open Application` before running any\nother relevant keyword which requires to operate on an open app. The application is\nautomatically closed at the end of the task execution, so this can be changed by\nimporting the library with the autoexit=${False} setting.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Excel|Outlook|Word.Application    autoexit=${False}\n```\n\nIf you\u2019re running the Process by Control Room through a custom self-hosted Worker\nservice, then please make sure that you enable an RDP session by ticking \u201cUse\nDesktop Connection\u201d under the Step configuration.\n\nIf you still encounter issues with opening a document, please ensure that file can\nbe opened first manually and dismiss any alert potentially blocking the process.\n\nCheck the documentation below for more info:\n\n- [https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop](https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop)\n\n#### APP_DISPATCH *= 'Outlook.Application'*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* app\n\n#### close_document(save_changes: bool = False) \u2192 None\n\nClose the active document and app (if open).\n\n* **Parameters:**\n  **save_changes** \u2013 Enable changes saving on quit. (False by default)\n\n#### get_emails(account_name: str | None = None, folder_name: str | None = None, email_filter: str | None = None, save_attachments: bool = False, attachment_folder: str | None = None, sort: bool = False, sort_key: str | None = None, sort_descending: bool = True) \u2192 List\n\nGet emails from a specified email folder. Can be used to save attachments.\n\n* **Parameters:**\n  * **account_name** \u2013 needs to be given if there are shared accounts in use,\n    defaults to None\n  * **folder_name** \u2013 target folder where to get emails from, default Inbox\n  * **email_filter** \u2013 how to filter email, default no filter,\n    ie. all emails in folder\n  * **save_attachments** \u2013 if attachments should be saved, defaults to False\n  * **attachment_folder** \u2013 target folder where attachments are saved,\n    defaults to current directory\n  * **sort** \u2013 if emails should be sorted, defaults to False\n  * **sort_key** \u2013 needs to be given if emails are to be sorted\n  * **sort_descending** \u2013 set to False for ascending sort, defaults to True\n* **Returns:**\n  list of emails (list of dictionaries)\n\nExample:\n\n```robotframework\n${emails}=  Get Emails\n...    email_folder=priority\n...    email_filter=[Subject]='incoming order'\n...    save_attachments=True\n...    attachment_folder=%{ROBOT_ROOT}${/}attachments\n...    sort=True\n...    sort_key=Received\n...    sort_descending=False\n```\n\n#### mark_email_as_read(email: Any, read: bool = True) \u2192 None\n\nMark email \u2018read\u2019 property. Can be used to mark email as unread.\n\n* **Parameters:**\n  * **email** \u2013 target email\n  * **read** \u2013 True marks email as Read, False as Unread\n\nExample:\n\n```robotframework\n${emails}=  Get Emails\n# Mark all as read\nFOR  ${email}  IN  @{emails}\n    Mark Email As Read  ${email}\nEND\n\n# Mark all as unread\nFOR  ${email}  IN  @{emails}\n    Mark Email As Read  ${email}  False\nEND\n```\n\n#### move_emails(account_name: str | None = None, source_folder: str | None = None, email_filter: Any | None = None, target_folder: str | None = None, mark_as_read: bool = True) \u2192 bool\n\nMove emails from source folder to target folder.\n\nUse of \u201caccount_name\u201d is recommended if there are shared accounts in use.\n\n* **Parameters:**\n  * **account_name** \u2013 needs to be given if there are shared accounts in use,\n    defaults to None\n  * **source_folder** \u2013 folder where source emails exist\n  * **email_filter** \u2013 how to filter email, default no filter,\n    ie. all emails in folder\n  * **target_folder** \u2013 folder where emails are moved into\n  * **mark_as_read** \u2013 mark emails as read after move, defaults to True\n* **Returns:**\n  True if move operation was success, False if not\n\nPython example.\n\n```python\noutlook = RPA.Outlook.Application()\n\n# moving messages from Inbox to target_folder\noutlook.move_emails(\n    target_folder='Processed Invoices',\n    email_filter=\"[Subject]='incoming invoice'\"\n)\n\n# moving messages from source_folder to target_folder\noutlook.move_emails(\n    source_folder='Incoming Invoices',\n    target_folder='Processed Invoices',\n    email_filter=\"[Subject]='incoming invoice'\"\n)\n\n# move message objects from `get_emails` result\nemails = outlook.get_emails(\"[Subject]='incoming invoice'\")\noutlook.move_emails(\n    target_folder='Processed Invoices',\n    email_filter=emails\n)\n```\n\nRobot Framework example.\n\n```robotframework\n# moving messages from Inbox to target_folder\nMove Emails\n...    target_folder=Processed Invoices\n...    email_filter=[Subject]='incoming invoice'\n\n# moving messages from source_folder to target_folder\nMove Emails\n...    source_folder=Incoming Invoices\n...    target_folder=Processed Invoices\n...    email_filter=[Subject]='incoming invoice'\n\n# moving message objects from `Get Emails` result\n${emails}=    Get Emails    [Subject]='incoming invoice'\nMove Emails\n...    target_folder=Processed Invoices\n...    email_filter=${emails}\n```\n\n#### open_application(visible: bool = False, display_alerts: bool = False) \u2192 None\n\nOpen the application.\n\n* **Parameters:**\n  * **visible** \u2013 Show the window on opening. (False by default)\n  * **display_alerts** \u2013 Display alert popups. (False by default)\n\n#### quit_application(save_changes: bool = False) \u2192 None\n\nQuit the application.\n\n* **Parameters:**\n  **save_changes** \u2013 Enable to save changes on quit. (False by default)\n\n#### save_email_attachments(attachments: Any, attachment_folder: str, overwrite: bool = False) \u2192 None\n\nSave email attachments.\n\nNote. Keyword \u201cGet Emails\u201d can be also used to save attachments.\n\n* **Parameters:**\n  * **attachments** \u2013 all attachments from email or single attachment\n  * **attachment_folder** \u2013 target folder where attachments are saved,\n    defaults to current directory\n  * **overwrite** \u2013 overwrite existing file if True, defaults to False\n\nExample:\n\n```robotframework\n${emails} =  Get Emails\n...    email_folder=priority\nFOR  ${email}  IN   @{emails}\n    FOR  ${attachment}  IN  @{email}[Attachments]\n        IF  ${attachment}[size] < 100000   # bytes\n            Save Email Attachments\n            ...  ${attachment}\n            ...  ${CURDIR}${/}attachments\n        ELSE IF  \".pdf\" in \"${attachment}[filename]\"\n            Save Email Attachments\n            ...  ${attachment}\n            ...  ${CURDIR}${/}attachments${/}pdf\n        END\n    END\nEND\n```\n\n#### send_email(recipients: str | List[str], subject: str, body: str, html_body: bool = False, attachments: str | List[str] | None = None, save_as_draft: bool = False, cc_recipients: str | List[str] | None = None, bcc_recipients: str | List[str] | None = None, reply_to: str | List[str] | None = None, check_names: bool = False) \u2192 bool\n\nSend email with Outlook\n\n* **Parameters:**\n  * **recipients** \u2013 list of addresses\n  * **subject** \u2013 email subject\n  * **body** \u2013 email body\n  * **html_body** \u2013 True if body contains HTML, defaults to False\n  * **attachments** \u2013 list of filepaths to include in the email, defaults to []\n  * **save_as_draft** \u2013 email is saved as draft when True\n  * **cc_recipients** \u2013 list of addresses for CC field, default None\n  * **bcc_recipients** \u2013 list of addresses for BCC field, default None\n  * **reply_to** \u2013 list of addresses for changing email\u2019s reply-to field,\n    default None\n  * **check_names** \u2013 all recipients are checked if the email address is\n    recognized on True, default False\n* **Returns:**\n  True if there were no errors\n\nExample:\n\n```python\nlibrary = Outlook()\nlibrary.open_application()\ncc_recipients = [\"recipient3@domain.com\",\"recipient4@domain.com\"]\nlibrary.send_email(\n    recipients=\"recipient1@domain.com\",\n    cc_recipients=cc_recipients,\n    bcc_recipients=\"recipient3@domain.com;recipient4@domain.com\",\n    subject=\"hello from Outlook\",\n    body=\"empty body\",\n    attachments=os.path.join(os.path.curdir, \"example.xslx\")\n)\n```\n\n```robotframework\n${cc}=  Create List   recipient3@domain.com   recipient4@domain.com\nSend Email\n...    recipients=recipient1@domain.com\n...    cc_repients=${cc}\n...    bcc_repients=recipient5@domain.com;recipient6@domain.com\n...    subject=hello from Outlook\n...    body=empty body\n...    attachments=${CURDIR}${/}example.xlsx\n```\n\n#### set_object_property(object_instance, property_name: str, value: str)\n\nSet the property of any object.\n\nThis is a utility keyword for Robot Framework syntax to set object\nproperty values.\n\n```robotframework\n${new_value}=    Replace String    ${value}    10.132.    5511.11.\nSet Object Property    ${result}    Value    ${new_value}\n```\n\n* **Parameters:**\n  * **object_instance** \u2013 object instance to set the property\n  * **property_name** \u2013 property name to set\n  * **value** \u2013 value to set\n\n#### wait_for_email(criterion: str | None = None, timeout: float = 5.0, interval: float = 1.0) \u2192 Any\n\nWait for email matching criterion to arrive into mailbox.\n\n* **Parameters:**\n  * **criterion** \u2013 email filter to wait for, defaults to \u201c\u201d\n  * **timeout** \u2013 total time in seconds to wait for email, defaults to 5.0\n  * **interval** \u2013 time in seconds for new check, defaults to 1.0\n* **Returns:**\n  list of messages or False\n\nPossible wait criterias are: SUBJECT, SENDER and BODY\n\nExample:\n\n```robotframework\nWait for Email     SUBJECT:rpa task calling    timeout=300    interval=10\n```\n"
  },
  {
    "module": "RPA.PDF.PDF",
    "markdown": "# Python API\n\n## PDF\n\n### *class* RPA.PDF.PDF\n\nPDF is a library for managing PDF documents.\n\nIt can be used to extract text from PDFs, add watermarks to pages, and\ndecrypt/encrypt documents.\n\nMerging and splitting PDFs is supported by `Add Files To PDF` keyword. Read\nthe keyword documentation for examples.\n\nThere is also limited support for updating form field values. (check\n`Set Field Value` and `Save Field Values` for more info)\n\nThe input PDF file can be passed as an argument to the keywords, or it can be\nomitted if you first call `Open PDF`. A reference to the current active PDF will\nbe stored in the library instance and can be changed by using the `Switch To PDF`\nkeyword with another PDF file path, therefore you can asynchronously work with\nmultiple PDFs.\n\n#### ATTENTION\nKeep in mind that this library works with text-based PDFs, and it **can\u2019t\nextract information from an image-based (scan)** PDF file. For accurate\nresults, you have to use specialized external services wrapped by the\n`RPA.DocumentAI` library.\n\nPortal example with video recording demo for parsing PDF invoices:\n[https://github.com/robocorp/example-parse-pdf-invoice](https://github.com/robocorp/example-parse-pdf-invoice)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.PDF\nLibrary    String\n\n*** Tasks ***\nExtract Data From First Page\n    ${text} =    Get Text From PDF    report.pdf\n    ${lines} =     Get Lines Matching Regexp    ${text}[${1}]    .+pain.+\n    Log    ${lines}\n\nGet Invoice Number\n    Open Pdf    invoice.pdf\n    ${matches} =  Find Text    Invoice Number\n    Log List      ${matches}\n\nFill Form Fields\n    Switch To Pdf    form.pdf\n    ${fields} =     Get Input Fields   encoding=utf-16\n    Log Dictionary    ${fields}\n    Set Field Value    Given Name Text Box    Mark\n    Save Field Values    output_path=${OUTPUT_DIR}${/}completed-form.pdf\n    ...                  use_appearances_writer=${True}\n```\n\n```python\nfrom RPA.PDF import PDF\nfrom robot.libraries.String import String\n\npdf = PDF()\nstring = String()\n\ndef extract_data_from_first_page():\n    text = pdf.get_text_from_pdf(\"report.pdf\")\n    lines = string.get_lines_matching_regexp(text[1], \".+pain.+\")\n    print(lines)\n\ndef get_invoice_number():\n    pdf.open_pdf(\"invoice.pdf\")\n    matches = pdf.find_text(\"Invoice Number\")\n    for match in matches:\n        print(match)\n\ndef fill_form_fields():\n    pdf.switch_to_pdf(\"form.pdf\")\n    fields = pdf.get_input_fields(encoding=\"utf-16\")\n    for key, value in fields.items():\n        print(f\"{key}: {value}\")\n    pdf.set_field_value(\"Given Name Text Box\", \"Mark\")\n    pdf.save_field_values(\n        output_path=\"completed-form.pdf\",\n        use_appearances_writer=True\n    )\n```\n\n#### ENCODING *= 'utf-8'*\n\n#### FIELDS_ENCODING *= 'iso-8859-1'*\n\n#### RE_FLAGS *= 24*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* active_pdf_document\n\n#### add_files_to_pdf(files: list | None = None, target_document: str | None = None, append: bool = False) \u2192 None\n\nAdd images and/or pdfs to new PDF document.\n\nSupports merging and splitting PDFs.\n\nImage formats supported are JPEG, PNG and GIF.\n\nThe file can be added with extra properties by\ndenoting : at the end of the filename. Each\nproperty should be separated by comma.\n\nSupported extra properties for PDFs are:\n\n- page and/or page ranges\n- no extras means that all source PDF pages are added\n  into new PDF\n\nSupported extra properties for images are:\n\n- format, the PDF page format, for example. Letter or A4\n- rotate, how many degrees image is rotated counter-clockwise\n- align, only possible value at the moment is center\n- orientation, the PDF page orientation for the image, possible\n  values P (portrait) or L (landscape)\n- x/y, coordinates for adjusting image position on the page\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nAdd files to pdf\n    ${files}=    Create List\n    ...    ${TESTDATA_DIR}${/}invoice.pdf\n    ...    ${TESTDATA_DIR}${/}approved.png:align=center\n    ...    ${TESTDATA_DIR}${/}robot.pdf:1\n    ...    ${TESTDATA_DIR}${/}approved.png:x=0,y=0\n    ...    ${TESTDATA_DIR}${/}robot.pdf:2-10,15\n    ...    ${TESTDATA_DIR}${/}approved.png\n    ...    ${TESTDATA_DIR}${/}landscape_image.png:rotate=-90,orientation=L\n    ...    ${TESTDATA_DIR}${/}landscape_image.png:format=Letter\n    Add Files To PDF    ${files}    newdoc.pdf\n\nMerge pdfs\n    ${files}=    Create List\n    ...    ${TESTDATA_DIR}${/}invoice.pdf\n    ...    ${TESTDATA_DIR}${/}robot.pdf:1\n    ...    ${TESTDATA_DIR}${/}robot.pdf:2-10,15\n    Add Files To Pdf    ${files}    merged-doc.pdf\n\nSplit pdf\n    ${files}=    Create List\n    ...    ${OUTPUT_DIR}${/}robot.pdf:2-10,15\n    Add Files To Pdf     ${files}    split-doc.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_addfiles():\n    list_of_files = [\n        'invoice.pdf',\n        'approved.png:align=center',\n        'robot.pdf:1',\n        'approved.png:x=0,y=0',\n    ]\n    pdf.add_files_to_pdf(\n        files=list_of_files,\n        target_document=\"output/output.pdf\"\n    )\n\ndef example_merge():\n    list_of_files = [\n        'invoice.pdf',\n        'robot.pdf:1',\n        'robot.pdf:2-10,15',\n    ]\n    pdf.add_files_to_pdf(\n        files=list_of_files,\n        target_document=\"output/merged-doc.pdf\"\n    )\n\ndef example_split():\n    list_of_files = [\n        'robot.pdf:2-10,15',\n    ]\n    pdf.add_files_to_pdf(\n        files=list_of_files,\n        target_document=\"output/split-doc.pdf\"\n    )\n```\n\n* **Parameters:**\n  * **files** \u2013 list of filepaths to add into PDF (can be either images or PDFs)\n  * **target_document** \u2013 filepath of target PDF\n  * **append** \u2013 appends files to existing document if append is True\n\n#### add_watermark_image_to_pdf(image_path: str | Path, output_path: str | Path, source_path: str | Path | None = None, coverage: float = 0.2) \u2192 None\n\nAdd an image into an existing or new PDF.\n\nIf no source path is given, assume a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nIndicate approved with watermark\n    Add Watermark Image To PDF\n    ...             image_path=approved.png\n    ...             source_path=/tmp/sample.pdf\n    ...             output_path=output/output.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef indicate_approved_with_watermark():\n    pdf.add_watermark_image_to_pdf(\n        image_path=\"approved.png\"\n        source_path=\"/tmp/sample.pdf\"\n        output_path=\"output/output.pdf\"\n    )\n```\n\n* **Parameters:**\n  * **image_path** \u2013 filepath to image file to add into PDF\n  * **source** \u2013 filepath to source, if not given add image to currently\n    active PDF\n  * **output_path** \u2013 filepath of target PDF\n  * **coverage** \u2013 how the watermark image should be scaled on page,\n    defaults to 0.2\n\n#### close_all_pdfs() \u2192 None\n\nClose all opened PDF file descriptors.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nClose Multiple PDFs\n    Close all pdfs\n```\n\n#### close_pdf(source_pdf: str | None = None) \u2192 None\n\nClose PDF file descriptor for a certain file.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nClose just one pdf\n    Close pdf   path/to/the/pdf/file.pdf\n```\n\n* **Parameters:**\n  **source_pdf** \u2013 filepath to the source pdf.\n* **Raises:**\n  **ValueError** \u2013 if file descriptor for the file is not found.\n\n#### convert(source_path: str | None = None, trim: bool = True, pagenum: str | int | None = None)\n\nParse source PDF into entities.\n\nThese entities can be used for text searches or XML dumping for example. The\nconversion will be done automatically when using the dependent keywords\ndirectly.\n\n* **Parameters:**\n  * **source_path** \u2013 source PDF filepath\n  * **trim** \u2013 trim whitespace from the text is set to True (default)\n  * **pagenum** \u2013 Page number where search is performed on, defaults to None.\n    (meaning all pages get converted \u2013 numbers start from 1)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n***Settings***\nLibrary    RPA.PDF\n\n***Tasks***\nExample Keyword\n    Convert    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.convert(\"/tmp/sample.pdf\")\n```\n\n#### decrypt_pdf(source_path: str, output_path: str, password: str) \u2192 bool\n\nDecrypt PDF with password.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nMake PDF human readable\n    ${success}=  Decrypt PDF    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef make_pdf_human_readable():\n    success = pdf.decrypt_pdf(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  * **source_path** \u2013 filepath to the source pdf.\n  * **output_path** \u2013 filepath to the decrypted pdf.\n  * **password** \u2013 password as a string.\n* **Returns:**\n  True if decrypt was successful, else False or Exception.\n* **Raises:**\n  **ValueError** \u2013 on decryption errors.\n\n#### dump_pdf_as_xml(source_path: str | None = None) \u2192 str\n\nGet PDFMiner format XML dump of the PDF\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n***Settings***\nLibrary    RPA.PDF\n\n***Tasks***\nExample Keyword\n    ${xml}=  Dump PDF as XML    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    xml = pdf.dump_pdf_as_xml(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source PDF\n* **Returns:**\n  XML content as a string\n\n#### encrypt_pdf(source_path: str | None = None, output_path: str | None = None, user_pwd: str = '', owner_pwd: str | None = None, use_128bit: bool = True) \u2192 None\n\nEncrypt a PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nSecure this PDF\n    Encrypt PDF    /tmp/sample.pdf\n\nSecure this PDF and set passwords\n    Encrypt PDF\n    ...    source_path=/tmp/sample.pdf\n    ...    output_path=/tmp/new/sample_encrypted.pdf\n    ...    user_pwd=complex_password_here\n    ...    owner_pwd=different_complex_password_here\n    ...    use_128bit=${TRUE}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef secure_this_pdf():\n    pdf.encrypt_pdf(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  * **source_path** \u2013 filepath to the source pdf.\n  * **output_path** \u2013 filepath to the target pdf, stored by default\n    in the robot output directory as `output.pdf`\n  * **user_pwd** \u2013 allows opening and reading PDF with restrictions.\n  * **owner_pwd** \u2013 allows opening PDF without any restrictions, by\n    default same user_pwd.\n  * **use_128bit** \u2013 whether to 128bit encryption, when false 40bit\n    encryption is used, default True.\n\n#### extract_pages_from_pdf(source_path: str | None = None, output_path: str | None = None, pages: int | str | List[int] | List[str] | None = None) \u2192 None\n\nExtract pages from source PDF and save to a new PDF document.\n\nPage numbers start from 1.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nSave PDF pages to a new document\n    ${pages}=    Extract Pages From PDF\n    ...          source_path=/tmp/sample.pdf\n    ...          output_path=/tmp/output.pdf\n    ...          pages=5\n\nSave PDF pages from open PDF to a new document\n    ${pages}=    Extract Pages From PDF\n    ...          output_path=/tmp/output.pdf\n    ...          pages=5\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef save_pdf_pages_to_a_new_document():\n    pages = pdf.extract_pages_from_pdf(\n        source_path=\"/tmp/sample.pdf\",\n        output_path=\"/tmp/output.pdf\",\n        pages=5\n    )\n```\n\n* **Parameters:**\n  * **source_path** \u2013 filepath to the source pdf.\n  * **output_path** \u2013 filepath to the target pdf, stored by default\n    in the robot output directory as `output.pdf`\n  * **pages** \u2013 page numbers to extract from PDF (numbers start from 1)\n    if None then extracts all pages.\n\n#### find_text(locator: str, pagenum: int | str = 1, direction: str = 'right', closest_neighbours: str | int | None = 1, strict: bool = False, regexp: str | None = None, trim: bool = True, ignore_case: bool = False) \u2192 List[Match]\n\nFind the closest text elements near the set anchor(s) through locator.\n\nThe PDF will be parsed automatically before elements can be searched.\n\n* **Parameters:**\n  * **locator** \u2013 Element to set anchor to. This can be prefixed with either\n    \u201ctext:\u201d, \u201csubtext:\u201d, \u201cregex:\u201d or \u201ccoords:\u201d to find the anchor by text or\n    coordinates. The \u201ctext\u201d strategy is assumed if no such prefix is specified.\n    (text search is case-sensitive; use ignore_case param for controlling it)\n  * **pagenum** \u2013 Page number where search is performed on, defaults to 1 (first\n    page).\n  * **direction** \u2013 In which direction to search for text elements. This can be\n    any of \u2018top\u2019/\u2019up\u2019, \u2018bottom\u2019/\u2019down\u2019, \u2018left\u2019 or \u2018right\u2019. (defaults to\n    \u2018right\u2019)\n  * **closest_neighbours** \u2013 How many neighbours to return at most, sorted by the\n    distance from the current anchor.\n  * **strict** \u2013 If element\u2019s margins should be used for matching those which are\n    aligned to the anchor. (turned off by default)\n  * **regexp** \u2013 Expected format of the searched text value. By default all the\n    candidates in range are considered valid neighbours.\n  * **trim** \u2013 Automatically trim leading/trailing whitespace from the text\n    elements. (switched on by default)\n  * **ignore_case** \u2013 Do a case-insensitive search when set to True. (affects\n    the passed locator and regexp filtering)\n* **Returns:**\n  A list of Match objects where every match has the following\n  attributes: .anchor - the matched text with the locator; .neighbours -\n  a list of adjacent texts found on the specified direction\n\n#### ATTENTION\nKeep in mind that this keyword works with text-based PDFs, and it **can\u2019t\nextract information from an image-based (scan)** PDF file. For accurate\nresults, you have to use specialized external services wrapped by the\n`RPA.DocumentAI` library.\n\nPortal example with video recording demo for parsing PDF invoices:\n[https://github.com/robocorp/example-parse-pdf-invoice](https://github.com/robocorp/example-parse-pdf-invoice)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nPDF Invoice Parsing\n    Open Pdf    invoice.pdf\n    ${matches} =  Find Text    Invoice Number\n    Log List      ${matches}\n```\n\n```default\nList has one item:\nMatch(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef pdf_invoice_parsing():\n    pdf.open_pdf(\"invoice.pdf\")\n    matches = pdf.find_text(\"Invoice Number\")\n    for match in matches:\n        print(match)\n\npdf_invoice_parsing()\n```\n\n```default\nMatch(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])\n```\n\n#### *static* fit_dimensions_to_box(width: int, height: int, max_width: int, max_height: int) \u2192 Tuple[int, int]\n\nFit dimensions of width and height to a given box.\n\n#### get_all_figures(source_path: str | None = None) \u2192 dict\n\nReturn all figures in the PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nImage fetch\n    &{figures}=  Get All Figures    /tmp/sample.pdf\n\nImage fetch from open PDF\n    &{figures}=  Get All Figures\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef image_fetch():\n    figures = pdf.get_all_figures(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source pdf.\n* **Returns:**\n  dictionary of figures divided into pages.\n\n#### get_input_fields(source_path: str | None = None, replace_none_value: bool = False, encoding: str | None = 'iso-8859-1') \u2192 dict\n\nGet input fields in the PDF.\n\nStores input fields internally so that they can be used without parsing the PDF\nagain.\n\n* **Parameters:**\n  * **source_path** \u2013 Filepath to source, if not given use the currently active\n    PDF.\n  * **replace_none_value** \u2013 Enable this to conveniently visualize the fields. (\n    replaces the null value with field\u2019s default or its name if absent)\n  * **encoding** \u2013 Use an explicit encoding for field name/value parsing. (\n    defaults to \u201ciso-8859-1\u201d but \u201cutf-8/16\u201d might be the one working for you)\n* **Returns:**\n  A dictionary with all the found fields. Use their key names when\n  setting values into them.\n* **Raises:**\n  **KeyError** \u2013 If no input fields are enabled in the PDF.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n    ${fields} =     Get Input Fields    form.pdf\n    Log Dictionary    ${fields}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    fields = pdf.get_input_fields(\"form.pdf\")\n    print(fields)\n\nexample_keyword()\n```\n\n#### get_number_of_pages(source_path: str | None = None) \u2192 int\n\nGet number of pages in the document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nNumber of pages in PDF\n    ${page_count}=    Get Number Of Pages    /tmp/sample.pdf\n\nNumber of pages in opened PDF\n    ${page_count}=    Get Number Of Pages\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef number_of_pages_in_pdf():\n    page_count = pdf.get_number_of_pages(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source pdf\n* **Raises:**\n  **PdfReadError** \u2013 if file is encrypted or other restrictions are in place\n\n#### get_pdf_info(source_path: str | None = None) \u2192 dict\n\nGet metadata from a PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nGet PDF metadata\n    ${metadata}=    Get PDF Info    /tmp/sample.pdf\n\n*** Keywords ***\nGet metadata from an already opened PDF\n    ${metadata}=    Get PDF Info\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef get_pdf_metadata():\n    metadata = pdf.get_pdf_info(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source PDF.\n* **Returns:**\n  dictionary of PDF information.\n\n#### get_text_from_pdf(source_path: str | None = None, pages: int | str | List[int] | List[str] | None = None, details: bool = False, trim: bool = True) \u2192 dict\n\nGet text from set of pages in source PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nText extraction from PDF\n    ${text}=    Get Text From PDF    /tmp/sample.pdf\n\nText extraction from open PDF\n    ${text}=    Get Text From PDF\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef text_extraction_from_pdf():\n    text = pdf.get_text_from_pdf(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  * **source_path** \u2013 filepath to the source pdf.\n  * **pages** \u2013 page numbers to get text (numbers start from 1).\n  * **details** \u2013 set to True to return textboxes, default False.\n  * **trim** \u2013 set to False to return raw texts, default True\n    means whitespace is trimmed from the text\n* **Returns:**\n  dictionary of pages and their texts.\n\n#### html_to_pdf(content: str | List[str], output_path: str, encoding: str = 'utf-8', margin: float = 0, working_directory: str | None = None) \u2192 None\n\nGenerate a PDF file from HTML content.\n\nNote that input must be well-formed and valid HTML.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nCreate PDF from HTML\n    HTML to PDF    ${html_content_as_string}  /tmp/output.pdf\n\nMulti Page PDF\n    @{pages}=    Create List    ${page1_html}    ${page2_html}\n    HTML To PDF   ${pages}    output.pdf\n    ...  margin=10\n    ...  working_directory=subdir\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef create_pdf_from_html():\n    pdf.html_to_pdf(html_content_as_string, \"/tmp/output.pdf\")\n\ndef multi_page_pdf():\n    pages = [page1_html, page2_html, page3_html]\n    pdf.html_to_pdf(pages, \"output.pdf\", margin=10)\n    # if I have images in the HTML in the 'subdir'\n    pdf.html_to_pdf(pages, \"output.pdf\",\n        margin=10, working_directory=\"subdir\"\n    )\n```\n\n* **Parameters:**\n  * **content** \u2013 HTML content\n  * **output_path** \u2013 filepath where to save the PDF document\n  * **encoding** \u2013 codec used for text I/O\n  * **margin** \u2013 page margin, default is set to 0\n  * **working_directory** \u2013 directory where to look for HTML linked\n    resources, by default uses the current working directory\n\n#### is_pdf_encrypted(source_path: str | None = None) \u2192 bool\n\nCheck if PDF is encrypted.\n\nIf no source path given, assumes a PDF is already opened.\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source pdf.\n* **Returns:**\n  True if file is encrypted.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nIs PDF encrypted\n    ${is_encrypted}=    Is PDF Encrypted    /tmp/sample.pdf\n\n*** Keywords ***\nIs open PDF encrypted\n    ${is_encrypted}=    Is PDF Encrypted\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    is_encrypted = pdf.is_pdf_encrypted(\"/tmp/sample.pdf\")\n```\n\n#### *property* logger\n\n#### open_pdf(source_path: str | Path) \u2192 None\n\nOpen a PDF document for reading.\n\nThis is called automatically in the other PDF keywords\nwhen a path to the PDF file is given as an argument.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nOpen my pdf file\n    Open PDF    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    metadata = pdf.open_pdf(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source pdf.\n* **Raises:**\n  **ValueError** \u2013 if PDF is already open.\n\n#### *property* pages_count\n\nGet number of pages in active PDF document.\n\n#### *static* resolve_input(path: str | Path) \u2192 str\n\nNormalizes input path and returns as string.\n\n#### *static* resolve_output(path: str | Path | None = None) \u2192 str\n\nNormalizes output path and returns as string.\n\n#### rotate_page(pages: int | str | List[int] | List[str] | None, source_path: str | None = None, output_path: str | None = None, clockwise: bool = True, angle: int = 90) \u2192 None\n\nRotate pages in source PDF document and save to target PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nPDF page rotation\n    Rotate Page\n    ...          source_path=/tmp/sample.pdf\n    ...          output_path=/tmp/output.pdf\n    ...          pages=5\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef pdf_page_rotation():\n    pages = pdf.rotate_page(\n        source_path=\"/tmp/sample.pdf\",\n        output_path=\"/tmp/output.pdf\",\n        pages=5\n    )\n```\n\n* **Parameters:**\n  * **pages** \u2013 page numbers to extract from PDF (numbers start from 1).\n  * **source_path** \u2013 filepath to the source pdf.\n  * **output_path** \u2013 filepath to the target pdf, stored by default\n    in the robot output directory as `output.pdf`\n  * **clockwise** \u2013 directorion that page will be rotated to, default True.\n  * **angle** \u2013 number of degrees to rotate, default 90.\n\n#### save_field_values(source_path: str | None = None, output_path: str | None = None, newvals: dict | None = None, use_appearances_writer: bool = False) \u2192 None\n\nSave field values in PDF if it has fields.\n\n* **Parameters:**\n  * **source_path** \u2013 Source PDF with fields to update.\n  * **output_path** \u2013 Updated target PDF.\n  * **newvals** \u2013 New values when updating many at once.\n  * **use_appearances_writer** \u2013 For some PDF documents the updated fields won\u2019t\n    be visible (or will look strange). When this happens, try to set this to\n    True so the previewer will re-render these based on the actual values.\n    (and viewing the output PDF in a browser might display the field values\n    correcly then)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n    Open PDF    ./tmp/sample.pdf\n    Set Field Value    phone_nr    077123123\n    Save Field Values    output_path=./tmp/output.pdf\n\nMultiple operations\n    &{new_fields}=       Create Dictionary\n    ...                  phone_nr=077123123\n    ...                  title=dr\n    Save Field Values    source_path=./tmp/sample.pdf\n    ...                  output_path=./tmp/output.pdf\n    ...                  newvals=${new_fields}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.open_pdf(\"./tmp/sample.pdf\")\n    pdf.set_field_value(\"phone_nr\", \"077123123\")\n    pdf.save_field_values(output_path=\"./tmp/output.pdf\")\n\ndef multiple_operations():\n    new_fields = {\"phone_nr\": \"077123123\", \"title\": \"dr\"}\n    pdf.save_field_values(\n        source_path=\"./tmp/sample.pdf\",\n        output_path=\"./tmp/output.pdf\",\n        newvals=new_fields\n    )\n```\n\n#### save_figure_as_image(figure: Figure, images_folder: str = '.', file_prefix: str = '') \u2192 str | None\n\nTry to save the image data from Figure object, and return\nthe file name, if successful.\n\nFigure needs to have byte stream and that needs to be recognized\nas image format for successful save.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nFigure to Image\n    ${image_file_path} =     Save figure as image\n    ...             figure=pdf_figure_object\n    ...             images_folder=/tmp/images\n    ...             file_prefix=file_name_here\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef figure_to_image():\n    image_file_path = pdf.save_figure_as_image(\n        figure=\"pdf_figure_object\"\n        images_folder=\"/tmp/images\"\n        file_prefix=\"file_name_here\"\n    )\n```\n\n* **Parameters:**\n  * **figure** \u2013 PDF Figure object which will be saved as an image.\n    The PDF Figure object can be determined from the Get All Figures keyword\n  * **images_folder** \u2013 directory where image files will be created\n  * **file_prefix** \u2013 image filename prefix\n* **Returns:**\n  image filepath or None\n\n#### save_figures_as_images(source_path: str | None = None, images_folder: str = '.', pages: str | None = None, file_prefix: str = '') \u2192 List[str]\n\nSave figures from given PDF document as image files.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nFigures to Images\n    ${image_filenames} =    Save figures as images\n    ...             source_path=/tmp/sample.pdf\n    ...             images_folder=/tmp/images\n    ...             pages=${4}\n    ...             file_prefix=file_name_here\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef figures_to_images():\n    image_filenames = pdf.save_figures_as_image(\n        source_path=\"/tmp/sample.pdf\"\n        images_folder=\"/tmp/images\"\n        pages=4\n        file_prefix=\"file_name_here\"\n    )\n```\n\n* **Parameters:**\n  * **source_path** \u2013 filepath to PDF document\n  * **images_folder** \u2013 directory where image files will be created\n  * **pages** \u2013 target figures in the pages, can be single page or range,\n    default None means that all pages are scanned for figures to save\n    (numbers start from 1)\n  * **file_prefix** \u2013 image filename prefix\n* **Returns:**\n  list of image filenames created\n\n#### save_pdf(output_path: str, reader: PdfReader | None = None)\n\nSave the contents of a pypdf reader to a new file.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nSave changes to PDF\n    Save PDF    /tmp/output.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef save_changes_to_pdf():\n    pdf.save_pdf(output_path=\"output/output.pdf\")\n```\n\n* **Parameters:**\n  * **output_path** \u2013 filepath to target PDF\n  * **reader** \u2013 a pypdf reader (defaults to currently active document)\n\n#### set_anchor_to_element(locator: str, trim: bool = True, pagenum: int | str = 1, ignore_case: bool = False) \u2192 bool\n\nSets main anchor point in the document for further searches.\n\nThis is used internally in the library and can work with multiple anchors at\nthe same time if such are found.\n\n* **Parameters:**\n  * **locator** \u2013 Element to set anchor to. This can be prefixed with either\n    \u201ctext:\u201d, \u201csubtext:\u201d, \u201cregex:\u201d or \u201ccoords:\u201d to find the anchor by text or\n    coordinates. The \u201ctext\u201d strategy is assumed if no such prefix is specified.\n    (text search is case-sensitive; use ignore_case param for controlling it)\n  * **trim** \u2013 Automatically trim leading/trailing whitespace from the text\n    elements. (switched on by default)\n  * **pagenum** \u2013 Page number where search is performed on, defaults to 1 (first\n    page).\n  * **ignore_case** \u2013 Do a case-insensitive search when set to True.\n* **Returns:**\n  True if at least one anchor was found.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n     ${success} =  Set Anchor To Element    Invoice Number\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    success = pdf.set_anchor_to_element(\"Invoice Number\")\n```\n\n#### set_convert_settings(line_margin: float | None = None, word_margin: float | None = None, char_margin: float | None = None, boxes_flow: float | None = 0.5)\n\nChange settings for PDFMiner document conversion.\n\nline_margin controls how textboxes are grouped - if conversion results in\ntexts grouped into one group then set this to lower value\n\nword_margin controls how spaces are inserted between words - if conversion\nresults in text without spaces then set this to lower value\n\nchar_margin controls how characters are grouped into words - if conversion\nresults in individual characters instead of then set this to higher value\n\nboxes_flow controls how much horizontal and vertical position of the text\nmatters when determining the order of text boxes. Value can be between range\nof -1.0 (only horizontal position matters) to +1.0 (only vertical position\nmatters). This feature (advanced layout analysis) can be disabled by setting\nvalue to None thus bottom left corner of the text box is used to determine\norder of the text boxes.\n\n* **Parameters:**\n  * **line_margin** \u2013 relative margin between bounding lines, default 0.5\n  * **word_margin** \u2013 relative margin between words, default 0.1\n  * **char_margin** \u2013 relative margin between characters, default 2.0\n  * **boxes_flow** \u2013 positioning of the text boxes based on text, default 0.5\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n***Settings***\nLibrary    RPA.PDF\n\n***Tasks***\nExample Keyword\n    Set Convert Settings  line_margin=0.00000001\n    ${texts}=  Get Text From PDF  /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.set_convert_settings(boxes_flow=None)\n    texts = pdf.get_text_from_pdf(\"/tmp/sample.pdf\")\n```\n\n#### set_field_value(field_name: str, value: Any, source_path: str | None = None) \u2192 None\n\nSet value for field with given name on the active document.\n\nTries to match with field\u2019s identifier directly or its label. When ticking\ncheckboxes, try with the /Yes string value as simply Yes might not work\nwith most previewing apps.\n\n* **Parameters:**\n  * **field_name** \u2013 Field to update.\n  * **value** \u2013 New value for the field.\n  * **source_path** \u2013 Source PDF file path.\n* **Raises:**\n  **ValueError** \u2013 When field can\u2019t be found or more than one field matches\n  the given field_name.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n    Open PDF    ./tmp/sample.pdf\n    Set Field Value    phone_nr    077123123\n    Save Field Values    output_path=./tmp/output.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.open_pdf(\"./tmp/sample.pdf\")\n    pdf.set_field_value(\"phone_nr\", \"077123123\")\n    pdf.save_field_values(output_path=\"./tmp/output.pdf\")\n```\n\n#### switch_to_pdf(source_path: str | Path | None = None) \u2192 None\n\nSwitch library\u2019s current fileobject to already opened file\nor open a new file if not opened.\n\nThis is done automatically in the PDF library keywords.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nJump to another PDF\n    Switch to PDF    /tmp/another.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef jump_to_another_pdf():\n    pdf.switch_to_pdf(\"/tmp/sample.pdf\")\n```\n\n* **Parameters:**\n  **source_path** \u2013 filepath to the source pdf.\n* **Raises:**\n  **ValueError** \u2013 if PDF filepath is not given and there are no active\n  file to activate.\n\n#### template_html_to_pdf(template: str, output_path: str, variables: dict | None = None, encoding: str = 'utf-8', margin: float = 0, working_directory: str | None = None) \u2192 None\n\nUse HTML template file or content to generate PDF file.\n\nIt provides an easy method of generating a PDF document from an HTML formatted\ntemplate file or HTML content string with variable substitution.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nCreate PDF from HTML template file\n    ${TEMPLATE}=    Set Variable    order.template\n    ${PDF}=         Set Variable    result.pdf\n    &{DATA}=        Create Dictionary\n    ...             name=Robot Generated\n    ...             email=robot@domain.com\n    ...             zip=00100\n    ...             items=Item 1, Item 2\n    Template HTML to PDF\n    ...    template=${TEMPLATE}\n    ...    output_path=${PDF}\n    ...    variables=${DATA}\n\nCreate PDF from HTML content\n    ${HTML}=        Set Variable    <html><body><h1>{{title}}</h1><p>{{content}}</p></body></html>\n    ${PDF}=         Set Variable    result.pdf\n    &{DATA}=        Create Dictionary\n    ...             title=My Report\n    ...             content=This is the content\n    Template HTML to PDF\n    ...    template=${HTML}\n    ...    output_path=${PDF}\n    ...    variables=${DATA}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\np = PDF()\n\n# Using template file\norders = [\"item 1\", \"item 2\", \"item 3\"]\ndata = {\n    \"name\": \"Robot Process\",\n    \"email\": \"robot@domain.com\",\n    \"zip\": \"00100\",\n    \"items\": \"<br/>\".join(orders),\n}\np.template_html_to_pdf(\"order.template\", \"order.pdf\", data)\n\n# Using HTML content directly\nhtml_content = \"<html><body><h1>{{title}}</h1><p>{{content}}</p></body></html>\"\ndata = {\"title\": \"My Report\", \"content\": \"This is the content\"}\np.template_html_to_pdf(html_content, \"report.pdf\", data)\n```\n\n* **Parameters:**\n  * **template** \u2013 filepath to HTML template file OR HTML content string.\n    If the file path exists, it will be read as a template file.\n    If the file path does not exist, the string is treated as HTML content.\n  * **output_path** \u2013 filepath where to save PDF document\n  * **variables** \u2013 dictionary of variables to fill into template, defaults to {}\n  * **encoding** \u2013 codec used for text I/O\n  * **margin** \u2013 page margin, default is set to 0\n  * **working_directory** \u2013 directory where to look for HTML linked\n    resources, by default uses the current working directory\n\n#### NOTE\n**Line Break Handling**: When using HTML content with `<br/>` or `<br>` tags,\nthese are automatically converted to paragraph breaks to improve text extraction.\nHowever, for optimal line break preservation in `get_text_from_pdf()`,\nconsider using proper HTML block elements like `<p>` or `<div>` instead of `<br/>` tags.\n\nExample for better line breaks:\n\n```default\n# Instead of: \"<p>Line 1<br/>Line 2</p>\"\n# Use: \"<p>Line 1</p><p>Line 2</p>\"\n```\n"
  },
  {
    "module": "RPA.Robocorp.Process.Process",
    "markdown": "# Python API\n\n## Process\n\n### *class* RPA.Robocorp.Process.Process(workspace_id: str | None = None, process_id: str | None = None, workspace_api_key: str | None = None, \\*\\*kwargs)\n\nA library for interacting with Control Room (CR) Process API endpoints.\n\nSee [Unattended processes](https://robocorp.com/docs/control-room/unattended) for information about process run, step run and work\nitem states.\n\nSee [APIs and webhooks](https://robocorp.com/docs/control-room/apis-and-webhooks) for information about Control Room APIs.\n\nThe Process API endpoint is defined by RC_API_PROCESS_HOST environment variable,\nwhich is available during Robocorp Workforce Agent runs.\n\n**Examples**\n\n**Robot Framework**\n\nIn the following example a task creates two input work items,\nand starts a process with those items. This results in 2 different\nprocess runs in the Control Room.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Robocorp.Process\nLibrary    RPA.Robocorp.Vault\n\n*** Keywords ***\nInitialize Process Library\n    ${secrets}=  Get Secret  ProcessAPI\n    Set Credentials\n    ...   ${secrets}[workspace_id]\n    ...   ${secrets}[process_id]\n    ...   ${secrets}[apikey]\n\n*** Tasks ***\nStart process with work items\n    [Setup]   Initialize Process Library\n    &{item1}=  Create Dictionary  fname=Mark  lname=Monkey\n    &{item2}=  Create Dictionary  fname=John  lname=Doe\n    @{items}=  Create List  ${item1}   ${item2}\n    Start Process  work_items=${items}  batch=True\n```\n\n**Robot Framework**\n\nIn the following example a task creates work item with files.\nTo include files in a work item, the item needs to be created\nbefore starting the process (note. different start keyword than above).\n\nIn this example I am using same keywords and settings from above example.\n\n```robotframework\n*** Tasks ***\nStart process with work items\n    [Setup]   Initialize Process Library\n    &{data}=  Create Dictionary  fname=Mark  lname=Monkey\n    @{files}=  Create List\n    ...   ${CURDIR}${/}workdata.xlsx\n    ...   ${CURDIR}${/}other.csv\n    ${item_id}=    Create Input Work Item\n    ...   payload=${data}\n    ...   files=${files}\n    Start Configured Process\n    ...  config_type=work_items\n    ...  extra_info=${item_id}\n```\n\nDownload from process runs artifacts all matching files\n\n```robotframework\n*** Settings ***\nLibrary      RPA.Robocorp.Process\nLibrary      RPA.Robocorp.Vault\nLibrary      RPA.HTTP\nTask Setup   Set Control Room Variables\n\n*** Keywords ***\nDownload Artifacts Matching\n    [Arguments]   ${filematch}\n    @{workitems}=   List Process Work Items\n    FOR  ${item}  IN  @{workitems}\n        @{artifacts}=   List Run Artifacts\n        ...  process_run_id=${item}[processRunId]\n        ...  step_run_id=${item}[activityRunId]\n        FOR  ${artifact}  IN  @{artifacts}\n            IF  \"${filematch}\"  IN   \"${artifact}[fileName]\"\n                ${download_link}=   Get Robot Run Artifact\n                ...  process_run_id=${item}[processRunId]\n                ...  step_run_id=${item}[activityRunId]\n                ...  artifact_id=${artifact}[id]\n                ...  filename=${artifact}[fileName]\n                Download\n                ...  url=${download_link}\n                ...  target=%{ROBOT_ARTIFACTS}${/}${artifact}[fileName]\n                ...  overwrite=${TRUE}\n                ...  stream=${TRUE}\n            END\n        END\n    END\n```\n\n**Python**\n\nList work items in Control Room and retry failed items.\n\n```python\nfrom RPA.Robocorp.Process import Process\nfrom RPA.Robocorp.Vault import Vault\n\nsecrets = Vault().get_secret(\"ProcessAPI\")\nprocess = Process(\n    secrets[\"workspace_id\"],\n    secrets[\"process_id\"],\n    secrets[\"apikey\"]\n)\n\n\ndef retry_failed_items():\n    items = process.list_process_work_items()\n    for item in items:\n        if item[\"state\"] == \"FAILED\":\n            print(\"FAILED work item: %s\" % item[\"id\"])\n            result = process.retry_work_item(item[\"id\"])\n            print(result)\n\nif __name__ == \"__main__\":\n    retry_failed_items()\n```\n\nDownload from process runs artifacts all \u201c.xlsx\u201d files\n\n```python\nfrom RPA.Robocorp.Process import Process\nfrom RPA.HTTP import HTTP\n\ndef download_artifacts_matching(filematch=\".xlsx\"):\n    work_items = process.list_process_work_items()\n    for item in work_items:\n        artifacts = process.list_run_artifacts(\n            process_run_id=item[\"processRunId\"],\n            step_run_id=item[\"activityRunId\"]\n        )\n        for artifact in artifacts:\n            if filematch in artifact[\"fileName\"]:\n                download_link = process.get_robot_run_artifact(\n                    process_run_id=item[\"processRunId\"],\n                    step_run_id=item[\"activityRunId\"],\n                    artifact_id=artifact[\"id\"],\n                    filename=artifact[\"fileName\"]\n                )\n                target_filepath = os.path.join(\n                    os.getenv(\"ROBOT_ARTIFACTS\"),\n                    f\"{artifact['fileName']}\"\n                )\n                HTTP().download(\n                    url=download_link,\n                    target_file=target_filepath,\n                    overwrite=True,\n                    stream=True\n                )\n```\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* base_api *: str*\n\n#### create_input_work_item(payload: Any | None = None, files: str | List | None = None, process_id: str | None = None) \u2192 int\n\nCreate an input work item for a process\n\n* **Parameters:**\n  * **payload** \u2013 work item data\n  * **files** \u2013 absolute filepaths as single string or list\n  * **process_id** \u2013 specific process to which item belongs to\n* **Returns:**\n  The integer that represents the work item id\n\n#### get_process_id_by_name(process_name: str, workspace_id: str | None = None) \u2192 int | None\n\nGet a process id of the process by name\n\n* **Parameters:**\n  * **process_name** \u2013 name of the process in the Control Room\n  * **workspace_id** \u2013 specific Control Room workspace to which process belongs to\n* **Returns:**\n  the next iteration id or None\n\n#### get_process_run_status(process_run_id: str, step_run_id: str | None = None, process_id: str | None = None) \u2192 Dict[str, Any]\n\nGet a process run status by run id\n\n* **Parameters:**\n  * **process_run_id** \u2013 id of the process run\n  * **step_run_id** \u2013 id of the process step run\n  * **process_id** \u2013 specific process to which runs belongs to\n* **Returns:**\n  the response JSON\n\n#### get_robot_run_artifact(process_run_id: str, step_run_id: str, artifact_id: str, filename: str, process_id: str | None = None) \u2192 str\n\nGet a download URL for a process run artifact\n\n* **Parameters:**\n  * **process_run_id** \u2013 id of the process run\n  * **step_run_id** \u2013 id of the process step run\n  * **artifact_id** \u2013 id of the run artifact\n  * **filename** \u2013 filename of the run artifact\n  * **process_id** \u2013 specific process to which runs belongs to\n* **Returns:**\n  url for file download\n\n#### get_work_item(workitem_id: str, include_data: bool = False, process_id: str | None = None) \u2192 Dict[str, Any]\n\nGet work item from Control Room\n\n* **Parameters:**\n  * **workitem_id** \u2013 id of the work item\n  * **include_data** \u2013 include work item payload and files in\n    the response (default False)\n  * **process_id** \u2013 specific process to which runs belongs to\n* **Returns:**\n  the JSON of the work items associated with a given process\n\n#### *property* headers *: Dict[str, str]*\n\n#### list_process_run_work_items(process_run_id: str | None = None, process_id: str | None = None, include_data: bool = False, item_state: str | None = None)\n\nList work items belonging to a specific process run\n\n* **Parameters:**\n  * **process_run_id** \u2013 specific process step run to which items\n    belongs to\n  * **process_id** \u2013 specific process to which items belongs to\n  * **include_data** \u2013 include work item payload and files in\n    the response (default False)\n  * **item_state** \u2013 state of work items to return (default all)\n\n#### list_process_runs(run_state: str | None = None, limit: int | None = 10, process_id: str | None = None) \u2192 str | None | Any\n\nList of runs related to a process\n\n* **Parameters:**\n  * **run_state** \u2013 state of runs to return (default all)\n  * **limit** \u2013 number of runs to return (default 10)\n  * **process_id** \u2013 specific process to which runs belongs to\n* **Returns:**\n  the JSON data of the process runs based on the provided parameters\n\n#### list_process_runs_in_workspace(run_state: str | None = None, limit: int | None = 10, workspace_id: str | None = None) \u2192 str | None | Any\n\nList all process runs in a workspace\n\n* **Parameters:**\n  * **run_state** \u2013 state of runs to return (default all)\n  * **limit** \u2013 number of runs to return (default 10)\n  * **workspace_id** \u2013 specific Control Room workspace to which process belongs to\n* **Returns:**\n  the JSON data of the process runs based on the provided parameters\n\n#### list_process_work_items(process_id: str | None = None, include_data: bool = False, item_state: str | None = None) \u2192 str | None | Any\n\nList work items belonging to a process\n\n* **Parameters:**\n  * **include_data** \u2013 include work item payload and files in\n    the response (default False)\n  * **item_state** \u2013 state of work items to return (default all)\n  * **process_id** \u2013 specific process to which items belongs to\n* **Returns:**\n  the JSON data of the process runs based on the provided parameters\n\n#### list_processes(workspace_id: str | None = None) \u2192 Dict[str, Any]\n\nList all processes in a workspace\n\n* **Parameters:**\n  **workspace_id** \u2013 specific Control Room workspace to which process belongs to\n* **Returns:**\n  the JSON data of the process runs based on the provided parameters\n\n#### list_run_artifacts(process_run_id: str, step_run_id: str, process_id: str | None = None) \u2192 Dict[str, Any]\n\nList Robot run artifacts\n\n* **Parameters:**\n  * **process_run_id** \u2013 id of the process run\n  * **step_run_id** \u2013 id of the process step run\n  * **process_id** \u2013 specific process to which runs belongs to\n* **Returns:**\n  the response JSON\n\n#### process_api(process_id: str | None = None) \u2192 str\n\n#### register_file_upload(filepath: str, workitem_filename: str, workitem_id: str, process_id: str | None = None) \u2192 Tuple[str, Dict[str, Any]]\n\n#### retry_work_item(work_item_id: str, process_id: str | None = None) \u2192 Dict[str, Any]\n\nRetry processing of work item in FAILED state\n\n* **Parameters:**\n  * **work_item_id** \u2013 ID of the work item to retry\n  * **process_id** \u2013 specific process to start\n* **Returns:**\n  the response JSON\n\n#### set_apikey(apikey: str | None = None) \u2192 None\n\nSet Workspace API access key\n\n* **Parameters:**\n  **apikey** \u2013 workspace API access key\n\n#### set_credentials(workspace_id: str | None = None, process_id: str | None = None, apikey: str | None = None) \u2192 None\n\nSet credentials needed by the Process API\n\n* **Parameters:**\n  * **workspace_id** \u2013 ID of the Control Room workspace\n  * **process_id** \u2013 ID of the Control Room process\n  * **apikey** \u2013 workspace API access key\n\n#### set_process_id(process_id: str | None = None) \u2192 None\n\nSet Control Room process ID\n\n* **Parameters:**\n  **process_id** \u2013 ID of the Control Room process\n\n#### set_workspace_id(workspace_id: str | None = None) \u2192 None\n\nSet Control Room workspace ID\n\n* **Parameters:**\n  **workspace_id** \u2013 ID of the Control Room workspace\n\n#### start_configured_process(config_type: ConfigurationType = ConfigurationType.default, extra_info: str | List | None = None, process_id: str | None = None) \u2192 str\n\nStart a Control Room process with the provided configuration\n\n* **Parameters:**\n  * **config_type** \u2013 type of the start, (ConfigurationType.default)\n  * **extra_info** \u2013 data to be sent with the start, for example. work item IDs\n  * **process_id** \u2013 specific process to start\n* **Returns:**\n  string of the request response\n\n#### start_process(work_items: Dict | List[Dict] | None = None, batch: bool = False, process_id: str | None = None) \u2192 Dict[str, Any]\n\nStart a Control Room process\n\n* **Parameters:**\n  * **work_items** \u2013 input work items for the process (default empty)\n  * **batch** \u2013 set to True if sending list of workitems to start each\n    as a separate run\n  * **process_id** \u2013 specific process to start\n* **Returns:**\n  JSON of the request response\n\nTable showing different results depending on parameter\nvalues.\n\n| work_items   | batch   | result                                                                          |\n|--------------|---------|---------------------------------------------------------------------------------|\n| None         | False   | Trigger a process with empty a work item                                        |\n| None         | True    | Error. work_items needs to be a list                                            |\n| dict         | False   | Trigger a process with a work item containing payload of a dict                 |\n| dict         | True    | Error. work_items needs to be a list                                            |\n| list         | False   | Trigger a process with a work item containing payload of a list                 |\n| list         | True    | Trigger multiple process runs with work items each containing payload of a dict |\n\n#### upload_file_to_s3(filepath: str, workitem_filename: str, data: Any) \u2192 Tuple[str, str]\n\n#### workspace_api(workspace_id: str | None = None) \u2192 str\n"
  },
  {
    "module": "RPA.Robocorp.Vault.Vault",
    "markdown": "# Python API\n\n## Secrets\n\n### *class* RPA.Robocorp.Vault.Vault(\\*args, \\*\\*kwargs)\n\nVault is a library for interacting with secrets stored in the [Robocorp\nControl Room Vault](https://robocorp.com/docs-robot-framework/development-guide/variables-and-secrets/vault) (by default) or file-based secrets, which can be taken\ninto use by setting some environment variables.\n\nRobocorp Vault relies on environment variables, which are normally set\nautomatically by the Robocorp Work Agent or Assistant when a run is\ninitialized by the Robocorp Control Room. When developing robots locally\nin VSCode, you can use the [Robocorp Code Extension](https://sema4.ai/docs/automation/visual-studio-code/extension-features#connecting-to-control-room-vault) to set these\nvariables automatically as well.\n\nAlternatively, you may set these environment variable manually using\n[rcc](https://robocorp.com/docs/rcc/workflow) or directly in some other fashion. The specific variables which\nmust exist are:\n\n- `RC_API_SECRET_HOST`: URL to Robocorp Vault API\n- `RC_API_SECRET_TOKEN`: API Token for Robocorp Vault API\n- `RC_WORKSPACE_ID`: Control Room Workspace ID\n\nFile-based secrets can be set by defining two environment variables.\n\n- `RPA_SECRET_MANAGER`: RPA.Robocorp.Vault.FileSecrets\n- `RPA_SECRET_FILE`: Absolute path to the secrets database file\n\nExample content of local secrets file:\n\n```json\n{\n    \"swaglabs\": {\n        \"username\": \"standard_user\",\n        \"password\": \"secret_sauce\"\n    }\n}\n```\n\nOR\n\n```YAML\nswaglabs:\n    username: standard_user\n    password: secret_sauce\n```\n\n**Examples of Using Secrets in a Robot**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    Collections\nLibrary    RPA.Robocorp.Vault\n\n*** Tasks ***\nReading secrets\n    ${secret}=    Get Secret  swaglabs\n    Log Many      ${secret}\n\nModifying secrets\n    ${secret}=          Get Secret      swaglabs\n    ${level}=           Set Log Level   NONE\n    Set To Dictionary   ${secret}       username    nobody\n    Set Log Level       ${level}\n    Set Secret          ${secret}\n```\n\n**Python**\n\n```python\nfrom RPA.Robocorp.Vault import Vault\n\nVAULT = Vault()\n\ndef reading_secrets():\n    print(f\"My secrets: {VAULT.get_secret('swaglabs')}\")\n\ndef modifying_secrets():\n    secret = VAULT.get_secret(\"swaglabs\")\n    secret[\"username\"] = \"nobody\"\n    VAULT.set_secret(secret)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* adapter\n\n#### get_secret(secret_name: str) \u2192 Secret\n\nRead a secret from the configured source, e.g. Robocorp Vault,\nand return it as a `Secret` object.\n\n* **Parameters:**\n  **secret_name** \u2013 Name of secret\n\n#### set_secret(secret: Secret) \u2192 None\n\nOverwrite an existing secret with new values.\n\nNote: Only allows modifying existing secrets, and replaces\n: all values contained within it.\n\n* **Parameters:**\n  **secret** \u2013 Secret as a `Secret` object, from e.g. `Get Secret`\n"
  },
  {
    "module": "RPA.Robocorp.Vault.Vault",
    "markdown": "# Python API\n\n## Secrets\n\n### *class* RPA.Robocorp.Vault.Vault(\\*args, \\*\\*kwargs)\n\nVault is a library for interacting with secrets stored in the [Robocorp\nControl Room Vault](https://robocorp.com/docs-robot-framework/development-guide/variables-and-secrets/vault) (by default) or file-based secrets, which can be taken\ninto use by setting some environment variables.\n\nRobocorp Vault relies on environment variables, which are normally set\nautomatically by the Robocorp Work Agent or Assistant when a run is\ninitialized by the Robocorp Control Room. When developing robots locally\nin VSCode, you can use the [Robocorp Code Extension](https://sema4.ai/docs/automation/visual-studio-code/extension-features#connecting-to-control-room-vault) to set these\nvariables automatically as well.\n\nAlternatively, you may set these environment variable manually using\n[rcc](https://robocorp.com/docs/rcc/workflow) or directly in some other fashion. The specific variables which\nmust exist are:\n\n- `RC_API_SECRET_HOST`: URL to Robocorp Vault API\n- `RC_API_SECRET_TOKEN`: API Token for Robocorp Vault API\n- `RC_WORKSPACE_ID`: Control Room Workspace ID\n\nFile-based secrets can be set by defining two environment variables.\n\n- `RPA_SECRET_MANAGER`: RPA.Robocorp.Vault.FileSecrets\n- `RPA_SECRET_FILE`: Absolute path to the secrets database file\n\nExample content of local secrets file:\n\n```json\n{\n    \"swaglabs\": {\n        \"username\": \"standard_user\",\n        \"password\": \"secret_sauce\"\n    }\n}\n```\n\nOR\n\n```YAML\nswaglabs:\n    username: standard_user\n    password: secret_sauce\n```\n\n**Examples of Using Secrets in a Robot**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    Collections\nLibrary    RPA.Robocorp.Vault\n\n*** Tasks ***\nReading secrets\n    ${secret}=    Get Secret  swaglabs\n    Log Many      ${secret}\n\nModifying secrets\n    ${secret}=          Get Secret      swaglabs\n    ${level}=           Set Log Level   NONE\n    Set To Dictionary   ${secret}       username    nobody\n    Set Log Level       ${level}\n    Set Secret          ${secret}\n```\n\n**Python**\n\n```python\nfrom RPA.Robocorp.Vault import Vault\n\nVAULT = Vault()\n\ndef reading_secrets():\n    print(f\"My secrets: {VAULT.get_secret('swaglabs')}\")\n\ndef modifying_secrets():\n    secret = VAULT.get_secret(\"swaglabs\")\n    secret[\"username\"] = \"nobody\"\n    VAULT.set_secret(secret)\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* adapter\n\n#### get_secret(secret_name: str) \u2192 Secret\n\nRead a secret from the configured source, e.g. Robocorp Vault,\nand return it as a `Secret` object.\n\n* **Parameters:**\n  **secret_name** \u2013 Name of secret\n\n#### set_secret(secret: Secret) \u2192 None\n\nOverwrite an existing secret with new values.\n\nNote: Only allows modifying existing secrets, and replaces\n: all values contained within it.\n\n* **Parameters:**\n  **secret** \u2013 Secret as a `Secret` object, from e.g. `Get Secret`\n"
  },
  {
    "module": "RPA.Robocorp.WorkItems.WorkItems",
    "markdown": "# Python API\n\n### *class* RPA.Robocorp.WorkItems.WorkItems(autoload: bool = True, root: str | None = None, default_adapter: ~typing.Type[~RPA.Robocorp.WorkItems.BaseAdapter] | str = <class 'RPA.Robocorp.WorkItems.RobocorpAdapter'>, auto_parse_email: ~typing.Dict[str | ~typing.Tuple[str, ...], str | ~typing.Tuple[str, ...]] | None = {'rawEmail': 'parsedEmail', ('email.text', '_\\_mail.html'): ('email.body', 'parsedEmail.Body')})\n\nA library for interacting with Control Room work items.\n\nWork items are used for managing data that go through multiple\nsteps and tasks inside a process. Each step of a process receives\ninput work items from the previous step, and creates output work items for\nthe next step.\n\n**Item structure**\n\nA work item\u2019s data payload is JSON and allows storing anything that is\nserializable. This library by default interacts with payloads that\nare a dictionary of key-value pairs, which it treats as individual\nvariables. These variables can be exposed to the Robot Framework task\nto be used directly.\n\nIn addition to the data section, a work item can also contain files,\nwhich are stored by default in Robocorp Control Room. Adding and using\nfiles with work items requires no additional setup from the user.\n\n**Loading inputs**\n\nThe library automatically loads the first input work item, if the\nlibrary input argument `autoload` is truthy (default).\n\nAfter an input has been loaded its payload and files can be accessed\nthrough corresponding keywords, and optionally these values can be modified.\n\n**E-mail triggering**\n\nSince a process can be started in Control Room by sending an e-mail, a body\nin Text/JSON/YAML/HTML format can be sent as well and this gets attached to the\ninput work item with the `rawEmail` payload variable. This library automatically\nparses the content of it and saves into `parsedEmail` the dictionary\ntransformation of the original e-mail.\n\nIf \u201cParse email\u201d Control Room configuration option is enabled (recommended), then\nyour e-mail is automatically parsed in the work item under the `email` payload\nvariable, which is a dictionary containing a `body` holding the final parsed form\nof the interpreted e-mail body. The payload variable `parsedEmail` is still\navailable for backwards compatibility reasons and holds the very same body inside\nthe `parsedEmail[Body]`.\n\nE-mail attachments will be added into the work item as files. Read more on:\n[https://robocorp.com/docs-robot-framework/control-room/unattended/email-trigger](https://robocorp.com/docs-robot-framework/control-room/unattended/email-trigger)\n\nExample:\n\nAfter starting the process by sending an e-mail with a body like:\n\n```json\n{\n    \"message\": \"Hello world!\"\n}\n```\n\nThe robot can use the parsed e-mail body\u2019s dictionary:\n\n```robotframework\n*** Tasks ***\nUsing Parsed Emails\n    ${mail} =    Get Work Item Variable    email\n    Set Work Item Variables    &{mail}[body]\n    ${message} =     Get Work Item Variable     message\n    Log    ${message}    # will print \"Hello world!\"\n```\n\nThe behaviour can be disabled by loading the library with\n`auto_parse_email=${None}` or altered by providing to it a dictionary with one\n\u201ckey: value\u201d where the key is usually \u201cemail.text\u201d (deprecated \u201crawEmail\u201d, the\nvariable set by Control Room, which acts as source for the parsed (deprecated raw)\ne-mail data) and the value can be \u201cemail.body\u201d (deprecated \u201cparsedEmail\u201d, where the\nparsed e-mail data gets stored into), value which can be customized and retrieved\nwith `Get Work Item Variable`.\n\n**Creating outputs**\n\nIt\u2019s possible to create multiple new work items as an output from a\ntask. With the keyword `Create Output Work Item` a new empty item\nis created as a child for the currently loaded input.\n\nAll created output items are sent into the input queue of the next\nstep in the process.\n\n**Active work item**\n\nKeywords that read or write from a work item always operate on the currently\nactive work item. Usually that is the input item that has been automatically\nloaded when the execution started, but the currently active item is changed\nwhenever the keywords `Create Output Work Item` or `Get Input Work Item`\nare called. It\u2019s also possible to change the active item manually with the\nkeyword `Set current work item`.\n\n**Saving changes**\n\nWhile a work item is loaded automatically when a suite starts, changes are\nnot automatically reflected back to the source. The work item will be modified\nlocally and then saved when the keyword `Save Work Item` is called.\nThis also applies to created output work items.\n\nIt is recommended to defer saves until all changes have been made to prevent\nleaving work items in a half-modified state in case of failures.\n\n**Local Development**\n\nWhile Control Room is the default implementation, it can also be replaced\nwith a custom adapter. The selection is based on either the `default_adapter`\nargument for the library, or the `RPA_WORKITEMS_ADAPTER` environment\nvariable. The library has a built-in alternative adapter called FileAdapter for\nstoring work items to disk.\n\nThe FileAdapter uses a local JSON file for input work items.\nIt\u2019s a list of work items, each of which has a data payload and files.\n\nAn example of a local file with one work item:\n\n```json\n[\n    {\n        \"payload\": {\n            \"variable1\": \"a-string-value\",\n            \"variable2\": [\"a\", \"list\", \"value\"]\n        },\n        \"files\": {\n            \"file1\": \"path/to/file.ext\"\n        }\n    }\n]\n```\n\nOutput work items (if any) are saved to an adjacent file\nwith the same name, but with the extension `.output.json`. You can specify\nthrough the \u201cRPA_OUTPUT_WORKITEM_PATH\u201d env var a different path and name for this\nfile.\n\n**Simulating the Cloud with Robocorp Code VSCode Extension**\n\nIf you are developing in VSCode with the [Robocorp Code extension](https://robocorp.com/docs-robot-framework/developer-tools/visual-studio-code/extension-features), you can\nutilize the built in local development features described in the\n[Developing with work items locally](https://robocorp.com/docs-robot-framework/development-guide/control-room/work-items#developing-with-work-items-locally) section of the\n[Using work items](https://robocorp.com/docs-robot-framework/development-guide/control-room/work-items) development guide.\n\n**Examples**\n\n**Robot Framework**\n\nIn the following example a task creates an output work item,\nand attaches some variables to it.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Robocorp.WorkItems\n\n*** Tasks ***\nSave variables to Control Room\n    Create Output Work Item\n    Set work item variables    user=Dude    mail=address@company.com\n    Save Work Item\n```\n\nIn the next step of the process inside a different robot, we can use\npreviously saved work item variables. Also note how the input work item is\nloaded implicitly when the suite starts.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Robocorp.WorkItems\n\n*** Tasks ***\nUse variables from Control Room\n    Set task variables from work item\n    Log    Variables are now available: s${user}, ${mail}\n```\n\n**Python**\n\nThe library can also be used through Python, but it does not implicitly\nload the first work item.\n\n```python\nimport logging\nfrom RPA.Robocorp.WorkItems import WorkItems\n\ndef list_variables(item_id):\n    library = WorkItems()\n    library.get_input_work_item()\n\n    variables = library.get_work_item_variables()\n    for variable, value in variables.items():\n        logging.info(\"%s = %s\", variable, value)\n```\n\n#### EMAIL_BODY_LOADERS *= [('JSON', <function loads>), ('YAML', <function full_load>)]*\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### ROBOT_LISTENER_API_VERSION *= 2*\n\n#### *property* active_input *: WorkItem | None*\n\n#### *property* adapter\n\n#### add_work_item_file(path, name=None)\n\nAdd given file to work item.\n\n* **Parameters:**\n  * **path** \u2013 Path to file on disk\n  * **name** \u2013 Destination name for file. If not given, current name\n    of local file is used.\n\n**NOTE**: Files are not uploaded before work item is saved\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Add work item file    output.xls\n    Save Work Item\n```\n\n#### add_work_item_files(pattern)\n\nAdd all files that match given pattern to work item.\n\n* **Parameters:**\n  **pattern** \u2013 Path wildcard pattern\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Add work item files    %{ROBOT_ROOT}/generated/*.csv\n    Save Work Item\n```\n\n#### clear_work_item()\n\nRemove all data and files in the current work item.\n\nExample:\n\n```robotframework\n*** Tasks ***\nClearing a work item\n    Clear work item\n    Save work item\n```\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nwi.get_input_work_item()\nwi.clear_work_item()\nwi.save_work_item()\n```\n\n#### create_output_work_item(variables: dict | None = None, files: str | List[str] | None = None, save: bool = False) \u2192 WorkItem\n\nCreate a new output work item with optional variables and files.\n\nAn output work item is always created as a child for an input item, therefore\na non-released input is required to be loaded first.\nAll changes to the work item are done locally and are sent to the output queue\nafter the keyword `Save Work Item` is called only, except when save is\nTrue.\n\n* **Parameters:**\n  * **variables** \u2013 Optional dictionary with variables to be set into the new\n    output work item.\n  * **files** \u2013 Optional list or comma separated paths to files to be included\n    into the new output work item.\n  * **save** \u2013 Automatically call `Save Work Item` over the newly created\n    output work item.\n* **Returns:**\n  The newly created output work item object.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Tasks ***\nCreate output items with variables then save\n    ${customers} =  Load customer data\n    FOR     ${customer}    IN    @{customers}\n        Create Output Work Item\n        Set Work Item Variables    id=${customer.id}\n        ...     name=${customer.name}\n        Save Work Item\n    END\n\nCreate and save output items with variables and files in one go\n    ${customers} =  Load customer data\n    FOR     ${customer}    IN    @{customers}\n        &{customer_vars} =    Create Dictionary    id=${customer.id}\n        ...     name=${customer.name}\n        Create Output Work Item     variables=${customer_vars}\n        ...     files=devdata${/}report.csv   save=${True}\n    END\n```\n\n**Python**\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nwi.get_input_work_item()\ncustomers = wi.get_work_item_variable(\"customers\")\nfor customer in customers:\n    wi.create_output_work_item(customer, save=True)\n```\n\n#### *property* current *: WorkItem*\n\n#### delete_work_item_variables(\\*names, force=True)\n\nDelete variable(s) from the current work item.\n\n* **Parameters:**\n  * **names** \u2013 Names of variables to remove\n  * **force** \u2013 Ignore variables that don\u2019t exist in work item\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Delete work item variables    username    email\n    Save Work Item\n```\n\n#### for_each_input_work_item(keyword_or_func: str | Callable, \\*args, items_limit: int = 0, return_results: bool = True, \\*\\*kwargs) \u2192 List[Any]\n\nRun a keyword or function for each work item in the input queue.\n\nAutomatically collects and returns a list of results, switch\n`return_results` to `False` for avoiding this.\n\n* **Parameters:**\n  * **keyword_or_func** \u2013 The RF keyword or Py function you want to map through\n    all the work items\n  * **args** \u2013 Variable list of arguments that go into the called keyword/function\n  * **kwargs** \u2013 Variable list of keyword arguments that go into the called\n    keyword/function\n  * **items_limit** \u2013 Limit the queue item retrieval to a certain amount,\n    otherwise all the items are retrieved from the queue until depletion\n  * **return_results** \u2013 Collect and return a list of results given each\n    keyword/function call if truthy\n\nExample:\n\n```robotframework\n*** Tasks ***\nLog Payloads\n    @{lengths} =     For Each Input Work Item    Log Payload\n    Log   Payload lengths: @{lengths}\n\n*** Keywords ***\nLog Payload\n    ${payload} =     Get Work Item Payload\n    Log To Console    ${payload}\n    ${len} =     Get Length    ${payload}\n    [Return]    ${len}\n```\n\nOR\n\n```python\nimport logging\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nlibrary = WorkItems()\n\ndef log_payload():\n    payload = library.get_work_item_payload()\n    print(payload)\n    return len(payload)\n\ndef log_payloads():\n    library.get_input_work_item()\n    lengths = library.for_each_input_work_item(log_payload)\n    logging.info(\"Payload lengths: %s\", lengths)\n\nlog_payloads()\n```\n\n#### get_current_work_item() \u2192 WorkItem\n\nGet the currently active work item.\n\nThe current work item is used as the target by other keywords\nin this library.\n\nKeywords `Get Input Work Item` and `Create Output Work Item`\nset the active work item automatically, and return the created\ninstance.\n\nWith this keyword the active work item can be retrieved manually.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${input} =    Get Current Work Item\n    ${output} =   Create Output Work Item\n    Set Current Work Item    ${input}\n```\n\n#### get_input_work_item(\\_internal_call: bool = False) \u2192 WorkItem\n\nLoad the next work item from the input queue, and set it as the active work\nitem.\n\nEach time this is called, the previous input work item is released (as DONE)\nprior to reserving the next one.\nIf the library import argument `autoload` is truthy (default),\nthis is called automatically when the Robot Framework suite\nstarts.\n\n#### get_work_item_file(name, path=None) \u2192 str\n\nGet attached file from work item to disk.\nReturns the absolute path to the created file.\n\n* **Parameters:**\n  * **name** \u2013 Name of attached file\n  * **path** \u2013 Destination path of file. If not given, current\n    working directory is used.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${path}=    Get work item file    input.xls\n    Open workbook    ${path}\n```\n\n#### get_work_item_files(pattern, dirname=None) \u2192 List[str]\n\nGet files attached to work item that match given pattern.\nReturns a list of absolute paths to the downloaded files.\n\n* **Parameters:**\n  * **pattern** \u2013 Filename wildcard pattern\n  * **dirname** \u2013 Destination directory, if not given robot root is used\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${paths}=    Get work item files    customer_*.xlsx\n    FOR  ${path}  IN  @{paths}\n        Handle customer file    ${path}\n    END\n```\n\n#### get_work_item_payload()\n\nGet the full JSON payload for a work item.\n\n**NOTE**: Most use cases should prefer higher-level keywords.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${payload}=    Get work item payload\n    Log    Entire payload as dictionary: ${payload}\n```\n\n#### get_work_item_variable(name, default=<object object>)\n\nReturn a single variable value from the work item,\nor default value if defined and key does not exist.\n\nIf key does not exist and default is not defined, raises KeyError.\n\n* **Parameters:**\n  * **name** \u2013 Name of variable\n  * **default** \u2013 Default value if key does not exist\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nUsing a work item\n    ${username}=    Get work item variable    username    default=guest\n```\n\nPython Example:\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nwi.get_input_work_item()\ncustomers = wi.get_work_item_variable(\"customers\")\nprint(customers)\n```\n\n#### get_work_item_variables()\n\nRead all variables from the current work item and\nreturn their names and values as a dictionary.\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${variables}=    Get work item variables\n    Log    Username: ${variables}[username], Email: ${variables}[email]\n```\n\nPython Example:\n\n> from RPA.Robocorp.WorkItems import WorkItems\n> wi = WorkItems()\n> wi.get_input_work_item()\n> input_wi = wi.get_work_item_variables()\n> print(input_wi[\u201cusername\u201d])\n> print(input_wi[\u201cemail\u201d])\n\n#### inputs *: List[WorkItem]*\n\nInput work items\n\n#### list_work_item_files()\n\nList the names of files attached to the current work item.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${names}=    List work item files\n    Log    Work item has files with names: ${names}\n```\n\n#### list_work_item_variables()\n\nList the variable names for the current work item.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${variables}=    List work item variables\n    Log    Available variables in work item: ${variables}\n```\n\n#### outputs *: List[WorkItem]*\n\nOutput work items\n\n#### release_input_work_item(state: State | str, exception_type: Error | str | None = None, code: str | None = None, message: str | None = None, \\_internal_release: bool = False)\n\nRelease the lastly retrieved input work item and set its state.\n\nThis can be released with DONE or FAILED states. With the FAILED state, an\nadditional exception can be sent to Control Room describing the problem that\nyou encountered by specifying a type and optionally a code and/or message.\nAfter this has been called, no more output work items can be created\nunless a new input work item has been loaded again.\n\n* **Parameters:**\n  * **state** \u2013 The status on the last processed input work item\n  * **exception_type** \u2013 Error type (BUSINESS, APPLICATION). If this is not\n    specified, then the cloud will assume UNSPECIFIED\n  * **code** \u2013 Optional error code identifying the exception for future\n    filtering, grouping and custom retrying behaviour in the cloud\n  * **message** \u2013 Optional human-friendly error message supplying additional\n    details regarding the sent exception\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Login into portal\n        ${user} =     Get Work Item Variable    user\n        ${doc} =    Get Work Item Variable    doc\n        TRY\n            Login Keyword    ${user}\n            Upload Doc Keyword    ${doc}\n\n        EXCEPT    Login Failed\n            Release Input Work Item     FAILED\n            ...    exception_type=APPLICATION\n            ...    code=LOGIN_PORTAL_DOWN\n            ...    message=Unable to login, retry again later.\n\n        EXCEPT    Format Error    AS    ${err}\n            ${message} =    Catenate\n            ...    Document format is not correct and cannot be uploaded.\n            ...    Correct the format in this work item and try again.\n            ...    Full error message received: ${err}\n            Release Input Work Item     FAILED\n            ...    exception_type=BUSINESS\n            ...    code=DOC_FORMAT_ERROR\n            ...    message=${message}\n\n        END\n```\n\nOR\n\n```python\nfrom RPA.Robocorp.WorkItems import State, WorkItems\n\nlibrary = WorkItems()\n\ndef process_and_set_state():\n    library.get_input_work_item()\n    library.release_input_work_item(State.DONE)\n    print(library.current.state)  # would print \"State.DONE\"\n\nprocess_and_set_state()\n```\n\n#### remove_work_item_file(name, missing_ok=True)\n\nRemove attached file from work item.\n\n* **Parameters:**\n  * **name** \u2013 Name of attached file\n  * **missing_ok** \u2013 Do not raise exception if file doesn\u2019t exist\n\n**NOTE**: Files are not deleted before work item is saved\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Remove work item file    input.xls\n    Save Work Item\n```\n\n#### remove_work_item_files(pattern, missing_ok=True)\n\nRemoves files attached to work item that match the given pattern.\n\n* **Parameters:**\n  * **pattern** \u2013 Filename wildcard pattern\n  * **missing_ok** \u2013 Do not raise exception if file doesn\u2019t exist\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Remove work item files    *.xlsx\n    Save Work Item\n```\n\n#### root\n\nVariables root object in payload\n\n#### save_work_item()\n\nSave the current data and files in the work item. If not saved,\nall changes are discarded when the library goes out of scope.\n\n#### set_current_work_item(item: WorkItem)\n\nSet the currently active work item.\n\nThe current work item is used as the target by other keywords\nin this library.\n\nKeywords `Get Input Work Item` and `Create Output Work Item`\nset the active work item automatically, and return the created\ninstance.\n\nWith this keyword the active work item can be set manually.\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nCreating outputs\n    ${input}=    Get Input Work Item\n    ${output}=   Create Output Work Item\n    Set current work item    ${input}\n```\n\nPython Example:\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nparent_wi = wi.get_input_work_item()\nchild_wi = wi.create_output_work_item()\nwi.set_current_work_item(parent_wi)\n```\n\n#### set_task_variables_from_work_item()\n\nConvert all variables in the current work item to\nRobot Framework task variables, see [variable scopes](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-scopes).\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    # Work item has variable INPUT_URL\n    Set task variables from work item\n    Log    The variable is now available: ${INPUT_URL}\n```\n\n#### set_work_item_payload(payload)\n\nSet the full JSON payload for a work item.\n\n* **Parameters:**\n  **payload** \u2013 Content of payload, must be JSON-serializable\n\n**NOTE**: Most use cases should prefer higher-level keywords.\nUsing this keyword may cause errors when getting the payload via\nthe normal `Get work item variable` and\n`Get work item variables` keywords if you do not set the payload\nto a `dict`.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${output}=    Create dictionary    url=example.com    username=Mark\n    Set work item payload    ${output}\n```\n\n#### set_work_item_variable(name, value)\n\nSet a single variable value in the current work item.\n\n* **Parameters:**\n  * **name** \u2013 Name of variable\n  * **value** \u2013 Value of variable\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nExample task\n    Set work item variable    username    MarkyMark\n    Save Work Item\n```\n\nPython Example:\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\ncustomers = [{\"id\": 1, \"name\": \"Apple\"}, {\"id\": 2, \"name\": \"Microsoft\"}]\nwi = WorkItems()\nwi.get_input_work_item()\nwi.set_work_item_variable(\"customers\", customers)\n```\n\n#### set_work_item_variables(\\*\\*kwargs)\n\nSet multiple variables in the current work item.\n\n* **Parameters:**\n  **kwargs** \u2013 Pairs of variable names and values\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Set work item variables    username=MarkyMark    email=mark@example.com\n    Save Work Item\n```\n"
  },
  {
    "module": "RPA.RobotLogListener.RobotLogListener",
    "markdown": "# Python API\n\n## RobotLogListener\n\n### *class* RPA.RobotLogListener.RobotLogListener\n\nRobotLogListener is a library for controlling logging during\na Robot Framework execution using the listener API.\n\n**About keyword parameters**\n\nParameters names and keywords for keywords Mute Run On Failure and Register Protected Keywords\ndo not need to be full names of keywords, ie. all keywords matching even partially will be affected.\nRun Keyword would match all BuiltIn library keywords (17 keywords in RF 3.2.1) and of course all\nRun Keyword named keywords in any resource and/or library file which are imported would be matched also.\n\n**Mute Run On Failure**\n\nThis keyword is to be used specifically with RPA.Browser.Selenium library, which extends\nSeleniumLibrary.  Normally most of the SeleniumLibrary keywords execute run_on_failure\nbehaviour, which can be set at library initialization. By default this behaviour is running\nCapture Page Screenshot keyword on failure.\n\nIn the example task Check the official website below the keyword Run Keyword is muted and when\nit runs the keyword Element Should Be Visible then those failures do not create page screenshots\ninto log file.\n\nIt is also possible to change default failure behaviour by giving parameter\noptional_keyword_to_run for Mute Run On Failure, see task Check the official website with error log.\nThis optional keyword would be then executed on failure. Due to the underlying SeleniumLibrary\nimplementation this keyword can\u2019t have arguments.\n\nExample of using Mute Run On Failure without and with optional keyword to run.\n\n```robotframework\n*** Settings ***\nLibrary         RPA.Browser.Selenium\nLibrary         RPA.RobotLogListener\nTask Setup      Set Task Variable   ${TRIES}   1\nTask Teardown   Close All Browsers\n\n*** Tasks ***\nCheck the official website\n   Mute Run On Failure   Run Keyword\n   Open Available Browser   https://www.robocorp.com\n   Check for visible element\n   Capture Page Screenshot\n\nCheck the official website with error log\n   Mute Run On Failure   Run Keyword  optional_keyword_to_run=Log tries\n   Open Available Browser   https://www.robocorp.com\n   Check for visible element\n   Capture Page Screenshot\n\n*** Keywords ***\nCheck for visible element\n   FOR  ${idx}  IN RANGE  1   20\n      Set Task Variable   ${TRIES}   ${idx}\n      ${status}   Run Keyword And Return Status   Element Should Be Visible  id:xyz\n      Exit For Loop If   '${status}' == 'PASS'\n      Sleep  2s\n   END\n\nLog tries\n   Log  Checked element visibility ${TRIES} times\n```\n\n**Register Protected Keywords**\n\nThis keyword is used to totally disable logging for named keywords. In the example below\nthe keyword This will not output is protected and it will not be logging into Robot Framework\nlog files.\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary         RPA.RobotLogListener\n\n*** Tasks ***\nProtecting keywords\n   This will not output        # will output because called before register\n   Register Protected Keywords    This will not output\n   This will not output        # is now registered\n   This will output\n\n*** Keywords ***\nThis will not output\n   Log   1\n\nThis will output\n   Log   2\n```\n\n**Python**\n\n```python\nfrom robot.libraries.BuiltIn import BuiltIn, RobotNotRunningError\nfrom RPA.RobotLogListener import RobotLogListener\n\ntry:\n   BuiltIn().import_library(\"RPA.RobotLogListener\")\nexcept RobotNotRunningError:\n   pass\n\nclass CustomLibrary:\n\n   def __init__(self):\n      listener = RobotLogListener()\n      listener.register_protected_keywords(\n            [\"CustomLibrary.special_keyword\"]\n      )\n\n   def special_keyword(self):\n      print('will not be written to log')\n      return 'not shown in the log'\n```\n\n#### INFO_LEVEL_KEYWORDS *= []*\n\n#### KEYWORDS_TO_MUTE *= []*\n\n#### KEYWORDS_TO_PROTECT *= ['rpa.robocloud.secrets.', 'rpa.robocorp.vault.', 'rpa.mfa.get_oauth_token', 'rpa.mfa.refresh_oauth_token']*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### ROBOT_LISTENER_API_VERSION *= 2*\n\n#### end_keyword(name, attributes)\n\nListener method for keyword end.\n\n* **Parameters:**\n  * **name** \u2013 keyword name\n  * **attributes** \u2013 keyword attributes\n\nIf name exists in the protected keywords list then log level is\nrestored back to level it was before settings to NONE.\n\n#### mute_run_on_failure(keywords: str | List | None = None, optional_keyword_to_run: str | None = None) \u2192 None\n\nSet keywords which should not execute SeleniumLibrary\ndefault behaviour of running keyword on failure.\n\n* **Parameters:**\n  * **keywords** \u2013 list of keywords to mute\n  * **optional_keyword_to_run** \u2013 name of the keyword to execute\n    if keyword defined by keywords fail\n\nKeyword names do not need to be full names of keywords, ie. all keywords\nmatching even partially will be affected. Run Keyword would match all\nBuiltIn library keywords (17 keywords in RF 3.2.1) and of course all\nRun Keyword named keywords in any resource and/or library file which\nare imported would be matched also.\n\nBy default SeleniumLibrary executes Capture Page Screenshot\non failure.\n\nIf optional_keyword_to_run is not given then nothing is done\non failure, but this can be set to override SeleniumLibrary\ndefault behaviour for a set of keywords.\n\n#### only_info_level(names: str | List | None = None)\n\nRegister keywords that are allowed only INFO level logging\n\n* **Parameters:**\n  **names** \u2013 list of keywords to protect\n\n#### register_protected_keywords(names: str | List | None = None) \u2192 None\n\nRegister keywords that are not going to be logged into Robot Framework logs.\n\n* **Parameters:**\n  **names** \u2013 list of keywords to protect\n\n#### start_keyword(name, attributes)\n\nListener method for keyword start.\n\n* **Parameters:**\n  * **name** \u2013 keyword name\n  * **attributes** \u2013 keyword attributes\n\nIf name exists in the protected keywords list then log level is\ntemporarily set to NONE.\n"
  },
  {
    "module": "RPA.Salesforce.Salesforce",
    "markdown": "# Python API\n\n## Salesforce\n\n### *class* RPA.Salesforce.Salesforce(sandbox: bool = False, domain: str = 'login')\n\nSalesforce is a library for accessing Salesforce using REST API.\nThe library extends [simple-salesforce library](https://github.com/simple-salesforce/simple-salesforce).\n\nMore information available at [Salesforce REST API Developer Guide](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_what_is_rest_api.htm).\n\n**Dataloader**\n\nThe keyword execute_dataloader_import can be used to mimic\n[Salesforce Dataloader](https://developer.salesforce.com/docs/atlas.en-us.dataLoader.meta/dataLoader/data_loader.htm) import behaviour.\n\ninput_object can be given in different formats. Below is an example where\ninput is in RPA.Table format in **method a** and list format in **method b**.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Salesforce\nLibrary     RPA.Database\nTask Setup  Authorize Salesforce\n\n*** Tasks ***\n# Method a\n${orders}=        Database Query Result As Table\n...               SELECT * FROM incoming_orders\n${status}=        Execute Dataloader Insert\n...               ${orders}  ${mapping_dict}  Tilaus__c\n# Method b\n${status}=        Execute Dataloader Insert\n...               ${WORKDIR}${/}orders.json  ${mapping_dict}  Tilaus__c\n```\n\nExample file **orders.json**\n\n```json\n[\n    {\n        \"asiakas\": \"0015I000002jBLIQA2\"\n    },\n    {\n        \"asiakas\": \"0015I000002jBLDQA2\"\n    },\n]\n```\n\nmapping_object describes how the input data fields are mapped into Salesforce\nobject attributes. In the example, the mapping defines that asiakas attribute in the\ninput object is mapped into Tilaaja_\\_c attribute of Tilaus_\\_c custom Salesforce object.\n\n```json\n{\n    \"Tilaus__c\": {\n        \"asiakas\": \"Tilaaja__c\"\n    },\n}\n```\n\nObject type could be, for example, Tilaus_\\_c.\n\n**Salesforce object operations**\n\nFollowing operations can be used to manage Salesforce objects:\n\n* Get Salesforce Object By Id\n* Create Salesforce Object\n* Update Salesforce Object\n* Upsert Salesforce Object\n* Delete Salesforce Object\n* Get Salesforce Object Metadata\n* Describe Salesforce Object\n\nThere are two ways to set the Salesforce domain. You can set the domain at time of\nlibrary import or using the Set Domain keyword.\n\nThere are several ways to declare a domain at time of library import:\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Salesforce    sandbox=${TRUE}\n```\n\nOr using the domain to your Salesforce My domain:\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Salesforce    domain=\"robocorp\"\n```\n\nThe domain can also be set using the keyword Set Domain:\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Salesforce\n\n*** Tasks ***\n# Sets the domain for a sandbox environment\nSet Domain    sandbox\n\n# Sets the domain to a Salseforce My domain\nSet Domain    robocorp\n\n# Sets to domain to the default of 'login'\nSet Domain\n```\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Salesforce\nTask Setup  Authorize Salesforce\n\n*** Variables ***\n${ACCOUNT_NOKIA}    0015I000002jBLDQA2\n\n*** Tasks ***\nChange account details in Salesforce\n    &{account}=      Get Salesforce Object By Id   Account  ${ACCOUNT_NOKIA}\n    &{update_obj}=   Create Dictionary   Name=Nokia Ltd  BillingStreet=Nokia bulevard 1\n    ${result}=       Update Salesforce Object  Account  ${ACCOUNT_NOKIA}  ${update_obj}\n\n*** Keywords ***\nAuthorize Salesforce\n    ${secrets}=     Get Secret   salesforce\n    Auth With Token\n    ...        username=${secrets}[USERNAME]\n    ...        password=${secrets}[PASSWORD]\n    ...        api_token=${secrets}[API_TOKEN]\n```\n\n**Python**\n\n```python\nimport pprint\nfrom RPA.Salesforce import Salesforce\nfrom RPA.Robocorp.Vault import FileSecrets\n\npp = pprint.PrettyPrinter(indent=4)\nfilesecrets = FileSecrets(\"secrets.json\")\nsecrets = filesecrets.get_secret(\"salesforce\")\n\nsf = Salesforce()\nsf.auth_with_token(\n    username=secrets[\"USERNAME\"],\n    password=secrets[\"PASSWORD\"],\n    api_token=secrets[\"API_TOKEN\"],\n)\nnokia_account_id = \"0015I000002jBLDQA2\"\naccount = sf.get_salesforce_object_by_id(\"Account\", nokia_account_id)\npp.pprint(account)\nbilling_information = {\n    \"BillingStreet\": \"Nokia Bulevard 1\",\n    \"BillingCity\": \"Espoo\",\n    \"BillingPostalCode\": \"01210\",\n    \"BillingCountry\": \"Finland\",\n}\nresult = sf.update_salesforce_object(\"Account\", nokia_account_id, billing_information)\nprint(f\"Update result: {result}\")\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### account *= {'Id': None, 'Name': None}*\n\n#### add_product_into_opportunity(product_name: str, quantity: int, opportunity_id: str | None = None, pricebook_name: str | None = None, custom_total_price: float | None = None) \u2192 bool\n\nAdd Salesforce Product into Opportunity.\n\n* **Parameters:**\n  * **product_name** \u2013 type of the product in the Pricelist\n  * **quantity** \u2013 number of products to add\n  * **opportunity_id** \u2013 identifier of Opportunity, default None\n  * **pricebook_name** \u2013 name of the pricelist, default None\n  * **custom_total_price** \u2013 price that overrides quantity and product price,\n    default None\n* **Returns:**\n  True is operation is successful or False\n\n#### auth_with_connected_app(username: str, password: str, api_token: str, consumer_key: str, consumer_secret: str, embed_api_token: bool = False) \u2192 None\n\nAuthorize to Salesforce with security token, username,\npassword, connected app key, and connected app secret\ncreating instance.\n\n* **Parameters:**\n  * **username** \u2013 Salesforce API username\n  * **password** \u2013 Salesforce API password\n  * **api_token** \u2013 Salesforce API security token\n  * **consumer_key** \u2013 Salesforce connected app client ID\n  * **consumer_secret** \u2013 Salesforce connected app client secret\n  * **embed_api_token** \u2013 Embed API token to password (default: False)\n\n**Python**\n\n```python\nfrom RPA.Salesforce import Salesforce\nfrom RPA.Robocorp.Vault import Vault\n\nSF = Salesforce(domain=\"robocorp-testing-stuff.develop.my\")\nVAULT = Vault()\n\nsecrets = VAULT.get_secret(\"salesforce\")\nSF.auth_with_connected_app(\n    username=secrets[\"USERNAME\"],\n    password=secrets[\"PASSWORD\"],\n    api_token=secrets[\"API_TOKEN\"],\n    consumer_key=secrets[\"CONSUMER_KEY\"],\n    consumer_secret=secrets[\"CONSUMER_SECRET\"],\n)\n```\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary  RPA.Salesforce   domain=robocop-testing-stuff.develop.my\nLibrary  RPA.Robocorp.Vault\n\n*** Tasks ***\nAuthenticate to Salesforce using connected app\n    ${secrets}=  Get Secret  salesforce\n\n    Auth with connected app\n    ...  username=${secrets}[USERNAME]\n    ...  password=${secrets}[PASSWORD]\n    ...  api_token=${secrets}[API_TOKEN]\n    ...  consumer_key=${secrets}[CONSUMER_KEY]\n    ...  consumer_secret=${secrets}[CONSUMER_SECRET]\n```\n\n#### auth_with_token(username: str, password: str, api_token: str) \u2192 None\n\nAuthorize to Salesforce with security token, username\nand password creating instance.\n\n* **Parameters:**\n  * **username** \u2013 Salesforce API username\n  * **password** \u2013 Salesforce API password\n  * **api_token** \u2013 Salesforce API security token\n\n#### create_new_opportunity(close_date: str, opportunity_name: str, stage_name: str = 'Closed Won', account_name: str | None = None) \u2192 Any\n\nCreate Salesforce Opportunity object.\n\n* **Parameters:**\n  * **close_date** \u2013 closing date for the Opportunity, format \u2018YYYY-MM-DD\u2019\n  * **opportunity_name** \u2013 as string\n  * **stage_name** \u2013 needs to be one of the defined stages,\n    defaults to \u201cClosed Won\u201d\n  * **account_name** \u2013 by default uses previously set account, defaults to None\n* **Returns:**\n  created opportunity or False\n\n#### create_salesforce_object(object_type: str, object_data: Any) \u2192 dict\n\nCreate Salesforce object by type and data.\n\n* **Parameters:**\n  * **object_type** \u2013 Salesforce object type\n  * **object_data** \u2013 Salesforce object data\n* **Raises:**\n  **SalesforceDataNotAnDictionary** \u2013 when object_data is not dictionary\n* **Returns:**\n  resulting object as dictionary\n\n#### delete_salesforce_object(object_type: str, object_id: str) \u2192 bool\n\nDelete Salesfoce object by type and id.\n\n* **Parameters:**\n  * **object_type** \u2013 Salesforce object type\n  * **object_id** \u2013 Salesforce object id\n* **Returns:**\n  True if successful\n\n#### describe_salesforce_object(object_type: str) \u2192 dict\n\nGet Salesfoce object description by type.\n\n* **Parameters:**\n  **object_type** \u2013 Salesforce object type\n* **Returns:**\n  object description as dictionary\n\n#### execute_apex(apex: str, apex_data: Dict | None = None, apex_method: str = 'POST', \\*\\*kwargs)\n\nExecute APEX operation.\n\nThe APEX classes can be added via Salesforce Developer console\n(from menu: File > New > Apex Class).\n\nPermissions for the APEX classes can be set via Salesforce Setup\n(Apex Classes -> Security).\n\n* **Parameters:**\n  * **apex** \u2013 endpoint of the APEX operation\n  * **apex_data** \u2013 data to be sent to the APEX operation\n  * **apex_method** \u2013 operation method\n  * **kwargs** \u2013 additional arguments to be passed to the APEX request\n* **Returns:**\n  result of the APEX operation\n\n**Python**\n\n```python\nfrom RPA.Salesforce import Salesforce\n\nSF = Salesforce(domain=\"robocorp-testing-stuff.develop.my\")\n# authenticate to Salesforce\nSF.execute_apex(apex=\"MyClass\", apex_data={\"data\": \"value\"})\nresult = SF.execute_apex(\n    apex=\"getAccount/?id=0017R00002xmXB1QAM\",\n    apex_method=\"GET\")\n```\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary  RPA.Salesforce   domain=robocop-testing-stuff.develop.my\n\n*** Tasks ***\nExecuting APEX operations\n    # Authenticate to Salesforce\n\n    &{apex_data}=  Create Dictionary  data=value\n    ${result}=     Execute APEX  MyClass  apex_data=${apex_data}\n    ${result}=     Execute APEX\n    ...  apex=getAccount/?id=0017R00002xmXB1QAM\n    ...  apex_method=GET\n```\n\n#### execute_dataloader_insert(input_object: Any, mapping_object: Any, object_type: str) \u2192 bool\n\nKeyword mimics Salesforce Dataloader \u2018insert\u2019 behaviour by taking\nin a input_object\\`representing dictionary of data to input into Salesforce,\na \\`mapping_object representing dictionary mapping the input keys into\nSalesforce keys, an object_type representing Salesforce object which\nDatahandler will handle with operation type.\n\nStores operation successes into Salesforce.dataloader_success array.\nStores operation errors into Salesforce.dataloader_errors.\n\nThese can be retrieved with keywords get_dataloader_success_table and\nget_dataloader_error_table which return corresponding data as\nRPA.Table.\n\n* **Parameters:**\n  * **input_object** \u2013 filepath or list of dictionaries\n  * **mapping_object** \u2013 filepath or dictionary\n  * **object_type** \u2013 Salesforce object type\n* **Returns:**\n  True if operation is successful\n\n#### get_dataloader_error_table() \u2192 Table\n\nReturn Dataloader error entries as RPA.Table\n\n#### get_dataloader_success_table() \u2192 Table\n\nReturn Dataloader success entries as RPA.Table\n\n#### get_domain() \u2192 str\n\nUsed to determine the current domain that has been set\n\n* **Returns:**\n  string of the currently set domain\n\n#### get_opportunity_id(opportunity_name: str) \u2192 Any\n\nGet ID of an Opportunity linked to set account.\n\n* **Parameters:**\n  **opportunity_name** \u2013 opportunity to query\n* **Returns:**\n  Id of the opportunity or False\n\n#### get_pricebook_entries() \u2192 dict\n\nGet all pricebook entries.\n\n* **Returns:**\n  query result\n\n#### get_pricebook_id(pricebook_name: str) \u2192 Any\n\nGet ID of a pricelist.\n\nReturns False if unique Id is not found.\n\n* **Parameters:**\n  **pricebook_name** \u2013 pricelist to query\n* **Returns:**\n  Id of the pricelist or False\n\n#### get_products_in_pricelist(pricebook_name: str) \u2192 dict\n\nGet all products in a pricelist.\n\n* **Parameters:**\n  **pricebook_name** \u2013 pricelist to query\n* **Returns:**\n  products in dictionary\n\n#### get_salesforce_object_by_id(object_type: str, object_id: str) \u2192 dict\n\nGet Salesforce object by id and type.\n\n* **Parameters:**\n  * **object_type** \u2013 Salesforce object type\n  * **object_id** \u2013 Salesforce object id\n* **Returns:**\n  dictionary of object attributes\n\n#### get_salesforce_object_metadata(object_type: str) \u2192 dict\n\nGet Salesfoce object metadata by type.\n\n* **Parameters:**\n  **object_type** \u2013 Salesforce object type\n* **Returns:**\n  object metadata as dictionary\n\n#### *property* instance\n\n#### read_dictionary_from_file(mapping_file: str) \u2192 dict\n\nRead dictionary from file.\n\n* **Parameters:**\n  **mapping_file** \u2013 path to the file\n* **Returns:**\n  file content as dictionary\n\n#### salesforce_query(sql_string: str, as_table: bool = False) \u2192 dict | Table\n\nPerform SQL query and return result as dict or Table.\n\n* **Parameters:**\n  * **sql_string** \u2013 SQL clause to perform.\n  * **as_table** \u2013 Set to True if the result should be of RPA.Tables.Table\n    type. (dictionary is returned by default)\n* **Returns:**\n  Result of the SQL query.\n\n#### salesforce_query_result_as_table(sql_string: str) \u2192 Table\n\nShorthand for `Salesforce Query    ${sql_string}    as_table=${True}`.\n\n* **Parameters:**\n  **sql_string** \u2013 SQL clause to perform.\n* **Returns:**\n  Result of the SQL query as RPA.Tables.Table.\n\n#### *property* session_id\n\n#### set_account(account_name: str = '', account_id: str = '') \u2192 bool\n\nSet account name and id by giving either parameter.\n\nCan be used together with keywords:\n: - get_opportunity_id\n  - create_new_opportunity\n\n* **Parameters:**\n  * **account_name** \u2013 string, defaults to \u201c\u201d\n  * **account_id** \u2013 string, defaults to \u201c\u201d\n* **Returns:**\n  True if account was found from Salesforce, else False\n\n#### set_domain(domain: str = 'login') \u2192 None\n\nUsed to set the domain the Auth With Token keyword will use. To set\nthe domain to \u2018test\u2019 or if using a sandbox environment use \u201csandbox\u201d as the\ndomain. If you have a Salsesforce My domain you may also input that name. If\nthe domain argument is not used the default domain is \u201clogin\u201d.\n\n* **Parameters:**\n  **domain** \u2013 \u201csandbox\u201d or the name of the Salesforce My domain;\n  if no argument provided defaults to \u201clogin\u201d\n\n#### set_pricebook(pricebook_name: str) \u2192 None\n\nSets Pricebook to be used in Salesforce operations.\n\n* **Parameters:**\n  **pricebook_name** \u2013 pricelist to use\n\n#### update_salesforce_object(object_type: str, object_id: str, object_data: Any) \u2192 bool\n\nUpdate Salesfoce object by type, id and data.\n\n* **Parameters:**\n  * **object_type** \u2013 Salesforce object type\n  * **object_id** \u2013 Salesforce object id\n  * **object_data** \u2013 Salesforce object data\n* **Raises:**\n  **SalesforceDataNotAnDictionary** \u2013 when object_data is not dictionary\n* **Returns:**\n  True if successful\n\n#### upsert_salesforce_object(object_type: str, object_id: str, object_data: Any) \u2192 bool\n\nUpsert Salesfoce object by type, id and data.\n\n* **Parameters:**\n  * **object_type** \u2013 Salesforce object type\n  * **object_id** \u2013 Salesforce object id\n  * **object_data** \u2013 Salesforce object data\n* **Raises:**\n  **SalesforceDataNotAnDictionary** \u2013 when object_data is not dictionary\n* **Returns:**\n  True if successful\n"
  },
  {
    "module": "RPA.SAP.SAP",
    "markdown": "# Python API\n\n## SAP\n\n### *class* RPA.SAP.SAP(\\*args, \\*\\*kwargs)\n\nThis library wraps the upstream [SapGuiLibrary](https://frankvanderkuur.github.io/SapGuiLibrary.html).\n\nThe SapGuiLibrary is a library that enables users to create tests for the Sap Gui application\n\nThe library uses the Sap Scripting Engine, therefore Scripting must be enabled in Sap in order for this library to work.\n\n**Opening a connection / Before running tests**\n\nFirst of all, you have to **make sure the Sap Logon Pad is started**. You can automate this process by using the AutoIT library or the Process Library.\n\nAfter the Sap Login Pad is started, you can connect to the Sap Session using the keyword connect to session.\n\nIf you have a successful connection you can use Open Connection to open a new connection from the Sap Logon Pad or Connect To Existing Connection to connect to a connection that is already open.\n\n**Locating or specifying elements**\n\nYou need to specify elements starting from the window ID, for example, wnd[0]/tbar[1]/btn[8]. In some cases the SAP ID contains backslashes. Make sure you escape these backslashes by adding another backslash in front of it.\n\n**Screenshots (on error)**\n\nThe SapGUILibrary offers an option for automatic screenshots on error. Default this option is enabled, use keyword disable screenshots on error to skip the screenshot functionality. Alternatively, this option can be set at import.\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### click_element(element_id)\n\nPerforms a single click on a given element. Used only for buttons, tabs and menu items.\n\nIn case you want to change a value of an element like checkboxes of selecting an option in dropdown lists, use select checkbox or select from list by label instead.\n\n#### click_toolbar_button(table_id, button_id)\n\nClicks a button of a toolbar within a GridView \u2018table_id\u2019 which is contained within a shell object. Use the Scripting tracker recorder to find the \u2018button_id\u2019 of the button to click\n\n#### connect_to_existing_connection(connection_name)\n\nConnects to an open connection. If the connection matches the given connection_name, the session is connected to this connection.\n\n#### connect_to_session(explicit_wait=0)\n\nConnects to an open session SAP.\n\nSee Opening a connection / Before running tests for details about requirements before connecting to a session.\n\nOptionally set explicit wait can be used to set the explicit wait time.\n\n**Examples**:\n\n|                    |                     |\n|--------------------|---------------------|\n| **Keyword**        | **Attributes**      |\n| connect to session |                     |\n| connect to session | 3                   |\n| connect to session | explicit_wait=500ms |\n\n#### disable_screenshots_on_error()\n\nDisables automatic screenshots on error.\n\n#### doubleclick_element(element_id, item_id, column_id)\n\nPerforms a double-click on a given element. Used only for shell objects.\n\n#### element_should_be_present(element_id, message=None)\n\nChecks whether an element is present on the screen.\n\n#### element_value_should_be(element_id, expected_value, message=None)\n\nChecks whether the element value is the same as the expected value. The possible expected values depend on the type of element (see usage).\n\nUsage:\n\n|                  |                                   |\n|------------------|-----------------------------------|\n| **Element type** | **possible values**               |\n| textfield        | text                              |\n| label            | text                              |\n| checkbox         | checked / unchecked               |\n| radiobutton      | checked / unchecked               |\n| combobox         | text of the option to be expected |\n\n#### element_value_should_contain(element_id, expected_value, message=None)\n\nChecks whether the element value contains the expected value. The possible expected values depend on the type of element (see usage).\n\nUsage:\n\n|                  |                                   |\n|------------------|-----------------------------------|\n| **Element type** | **possible values**               |\n| textfield        | text                              |\n| label            | text                              |\n| combobox         | text of the option to be expected |\n\n#### enable_screenshots_on_error()\n\nEnables automatic screenshots on error.\n\n#### focus_and_click(element_id: str, wait_time: float | None = None)\n\nSet focus into the element and click it.\n\nNote. The default library wait time can be adjusted using Set Explicit Wait keyword. Library\u2019s explicit_wait will be used if wait_time parameter is not set.\n\n* **Parameters:**\n  **element_id** \u2013 locator for the element :param wait_time: the wait time after the action\n\n#### focus_and_input_text(element_id: str, text: str, wait_time: float | None = None)\n\nSet focus into the element and input text into it.\n\nNote. The default library wait time can be adjusted using Set Explicit Wait keyword. Library\u2019s explicit_wait will be used if wait_time parameter is not set.\n\n* **Parameters:**\n  **element_id** \u2013 locator for the element :param text: text to be inputted :param wait_time: the wait time after the action\n\n#### generic_click_element(element_id, click_type='press')\n\nPerforms a single click on a given element.\n\nDiffers from Click Element keyword so that element type is ignored, instead click_type (either press or select) is performed on the element if possible.\n\nIn case you want to change a value of an element like checkboxes of selecting an option in dropdown lists, use select checkbox or select from list by label instead.\n\n* **Parameters:**\n  **element_id** \u2013 locator for the element :param click_type: either `press` (default) or `select`\n\n#### generic_input_password(element_id, password)\n\nInserts the given password into the text field identified by locator.\n\nThis keyword does NOT depend on the type of the element. Will set password to the element\u2019s \u2018text\u2019 attribute if possible.\n\nThe password is not recorded in the log.\n\n* **Parameters:**\n  **element_id** \u2013 locator for the element :param password: password to be inputted\n\n#### generic_input_text(element_id, text)\n\nInserts the given text into the text field identified by locator. Use keyword input password to insert a password in a text field.\n\nThis keyword does NOT depend on the type of the element. Will set text to the element\u2019s \u2018text\u2019 attribute if possible.\n\n* **Parameters:**\n  **element_id** \u2013 locator for the element :param text: text to be inputted\n\n#### get_cell_value(table_id, row_num, col_id)\n\nReturns the cell value for the specified cell.\n\n* **Parameters:**\n  **table_id** \u2013 locator for the table element :param row_num: table row number :param col_id: table cell id :return: text in the specified cell\n\n#### get_element_location(element_id)\n\nReturns the Sap element location for the given element.\n\n#### get_element_type(element_id)\n\nReturns the Sap element type for the given element.\n\n#### get_element_type_of_object(element)\n\nReturns the Sap element type for the given element.\n\n* **Parameters:**\n  **element** \u2013 SAP element :return: type of the SAP element\n\n#### get_row_count(table_id)\n\nReturns the number of rows found in the specified table.\n\n#### get_scroll_position(element_id)\n\nReturns the scroll position of the scrollbar of an element \u2018element_id\u2019 that is contained within a shell object.\n\n#### get_statusbar_type(window: str | None = 'wnd[0]') \u2192 str\n\nRetrieves the messageType in the statusbar the given window.\n\nTakes screenshot on error.\n\n* **Parameters:**\n  **window** \u2013 locator for the statusbar, default \u2018wnd[0]\u2019 :return: messageType of the /sbar element or empty string\n\n#### get_value(element_id)\n\nGets the value of the given element. The possible return values depend on the type of element (see Return values).\n\nReturn values:\n\n|                  |                             |\n|------------------|-----------------------------|\n| **Element type** | **Return values**           |\n| textfield        | text                        |\n| label            | text                        |\n| checkbox         | checked / unchecked         |\n| radiobutton      | checked / unchecked         |\n| combobox         | text of the selected option |\n| guibutton        | text                        |\n| guititlebar      | text                        |\n| guistatusbar     | text                        |\n| guitab           | text                        |\n\n#### get_window_title(locator)\n\nRetrieves the window title of the given window.\n\n#### input_password(element_id, password)\n\nInserts the given password into the text field identified by locator. The password is not recorded in the log.\n\n#### input_text(element_id, text)\n\nInserts the given text into the text field identified by locator. Use keyword input password to insert a password in a text field.\n\n#### maximize_window(window=0)\n\nMaximizes the SapGui window.\n\n#### open_connection(connection_name)\n\nOpens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.\n\n#### press_f1(element_id: str)\n\nCalls the PressF1 function on the passed element id. The element can be a textfield or a GridView inside a shell.\n\n* **Parameters:**\n  **element_id** \u2013 id of the SAP element\n\n#### press_f4(element_id: str)\n\nCalls the PressF4 function on the passed element id. The element can be a textfield or a GridView inside a shell.\n\n* **Parameters:**\n  **element_id** \u2013 id of the SAP element\n\n#### run_transaction(transaction)\n\nRuns a Sap transaction. An error is given when an unknown transaction is specified.\n\n#### scroll(element_id, position)\n\nScrolls the scrollbar of an element \u2018element_id\u2019 that is contained within a shell object. \u2018Position\u2019 is the number of rows to scroll.\n\n#### select_checkbox(element_id)\n\nSelects checkbox identified by locator. Does nothing if the checkbox is already selected.\n\n#### select_context_menu_item(element_id, menu_or_button_id, item_id)\n\nSelects an item from the context menu by clicking a button or right-clicking in the node context menu.\n\n#### select_from_list_by_label(element_id, value)\n\nSelects the specified option from the selection list.\n\n#### select_node(tree_id, node_id, expand=False)\n\nSelects a node of a TableTreeControl \u2018tree_id\u2019 which is contained within a shell object.\n\nUse the Scripting tracker recorder to find the \u2018node_id\u2019 of the node. Expand can be set to True to expand the node. If the node cannot be expanded, no error is given.\n\n#### select_node_link(tree_id, link_id1, link_id2)\n\nSelects a link of a TableTreeControl \u2018tree_id\u2019 which is contained within a shell object.\n\nUse the Scripting tracker recorder to find the \u2018link_id1\u2019 and \u2018link_id2\u2019 of the link to select.\n\n#### select_radio_button(element_id)\n\nSets radio button to the specified value.\n\n#### select_table_column(table_id, column_id)\n\nSelects an entire column of a GridView \u2018table_id\u2019 which is contained within a shell object.\n\nUse the Scripting tracker recorder to find the \u2018column_id\u2019 of the column to select.\n\n#### select_table_row(table_id, row_num)\n\nSelects an entire row of a table. This can either be a TableControl or a GridView \u2018table_id\u2019 which is contained within a shell object. The row is an index to select the row, starting from 0.\n\n#### send_vkey(vkey_id, window=0)\n\nSends a SAP virtual key combination to the window, not into an element. If you want to send a value to a text field, use input text instead.\n\nTo send a vkey, you can either use te **VKey ID** or the **Key combination**.\n\nSap Virtual Keys (on Windows)\n\n|             |                     |             |                     |             |                     |\n|-------------|---------------------|-------------|---------------------|-------------|---------------------|\n| **VKey ID** | **Key combination** | **VKey ID** | **Key combination** | **VKey ID** | **Key combination** |\n| **0**       | Enter               | **26**      | Ctrl + F2           | **72**      | Ctrl + A            |\n| **1**       | F1                  | **27**      | Ctrl + F3           | **73**      | Ctrl + D            |\n| **2**       | F2                  | **28**      | Ctrl + F4           | **74**      | Ctrl + N            |\n| **3**       | F3                  | **29**      | Ctrl + F5           | **75**      | Ctrl + O            |\n| **4**       | F4                  | **30**      | Ctrl + F6           | **76**      | Shift + Del         |\n| **5**       | F5                  | **31**      | Ctrl + F7           | **77**      | Ctrl + Ins          |\n| **6**       | F6                  | **32**      | Ctrl + F8           | **78**      | Shift + Ins         |\n| **7**       | F7                  | **33**      | Ctrl + F9           | **79**      | Alt + Backspace     |\n| **8**       | F8                  | **34**      | Ctrl + F10          | **80**      | Ctrl + Page Up      |\n| **9**       | F9                  | **35**      | Ctrl + F11          | **81**      | Page Up             |\n| **10**      | F10                 | **36**      | Ctrl + F12          | **82**      | Page Down           |\n| **11**      | F11 or Ctrl + S     | **37**      | Ctrl + Shift + F1   | **83**      | Ctrl + Page Down    |\n| **12**      | F12 or ESC          | **38**      | Ctrl + Shift + F2   | **84**      | Ctrl + G            |\n| **14**      | Shift + F2          | **39**      | Ctrl + Shift + F3   | **85**      | Ctrl + R            |\n| **15**      | Shift + F3          | **40**      | Ctrl + Shift + F4   | **86**      | Ctrl + P            |\n| **16**      | Shift + F4          | **41**      | Ctrl + Shift + F5   | **87**      | Ctrl + B            |\n| **17**      | Shift + F5          | **42**      | Ctrl + Shift + F6   | **88**      | Ctrl + K            |\n| **18**      | Shift + F6          | **43**      | Ctrl + Shift + F7   | **89**      | Ctrl + T            |\n| **19**      | Shift + F7          | **44**      | Ctrl + Shift + F8   | **90**      | Ctrl + Y            |\n| **20**      | Shift + F8          | **45**      | Ctrl + Shift + F9   | **91**      | Ctrl + X            |\n| **21**      | Shift + F9          | **46**      | Ctrl + Shift + F10  | **92**      | Ctrl + C            |\n| **22**      | Ctrl + Shift + 0    | **47**      | Ctrl + Shift + F11  | **93**      | Ctrl + V            |\n| **23**      | Shift + F11         | **48**      | Ctrl + Shift + F12  | **94**      | Shift + F10         |\n| **24**      | Shift + F12         | **70**      | Ctrl + E            | **97**      | Ctrl + #            |\n| **25**      | Ctrl + F1           | **71**      | Ctrl + F            |             |                     |\n\nExamples:\n\n|             |                   |          |\n|-------------|-------------------|----------|\n| **Keyword** | **Attributes**    |          |\n| send_vkey   | 8                 |          |\n| send_vkey   | Ctrl + Shift + F1 |          |\n| send_vkey   | Ctrl + F7         | window=1 |\n\n#### set_cell_value(table_id, row_num, col_id, text)\n\nSets the cell value for the specified cell of a GridView \u2018table_id\u2019 which is contained within a shell object.\n\nUse the Scripting tracker recorder to find the \u2018col_id\u2019 of the cell to set.\n\n#### set_explicit_wait(speed)\n\nSets the delay time that is waited after each SapGui keyword.\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like 1 second or 700 ms.\n\nThis functionality is designed to be used for demonstration and debugging purposes. It is not advised to use this keyword to wait for an element to appear or function to finish.\n\n**Possible time formats:**\n\n|             |                                       |\n|-------------|---------------------------------------|\n| miliseconds | milliseconds, millisecond, millis, ms |\n| seconds     | seconds, second, secs, sec, s         |\n| minutes     | minutes, minute, mins, min, m         |\n\n**Example:**\n\n|                   |                |\n|-------------------|----------------|\n| **Keyword**       | **Attributes** |\n| Set explicit wait | 1              |\n| Set explicit wait | 3 seconds      |\n| Set explicit wait | 500 ms         |\n\n#### set_focus(element_id)\n\nSets the focus to the given element.\n\n#### take_screenshot(screenshot_name='sap-screenshot')\n\nTakes a screenshot, only if \u2018screenshots on error\u2019 has been enabled, either at import of with keyword enable screenshots on error.\n\nThis keyword uses Robots\u2019 internal Screenshot library.\n\n#### unselect_checkbox(element_id)\n\nRemoves selection of checkbox identified by locator. Does nothing if the checkbox is not selected.\n"
  },
  {
    "module": "RPA.Slack.Slack",
    "markdown": "# Python API\n\n## Slack\n\n### *class* RPA.Slack.Slack\n\nRPA Framework library for Slack operations.\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### slack_message_using_webhook(webhook_url: str, channel: str, sender: str, text: str, icon_emoji: str | None = None)\n\nSend message to Slack channel using webhook.\n\n* **Parameters:**\n  * **webhook_url** \u2013 needs to be configured for the Slack server\n  * **channel** \u2013 channel needs to exist in the Slack server\n  * **sender** \u2013 shown in the message post as sender\n  * **text** \u2013 text for the message post\n  * **icon_emoji** \u2013 icon for the message post, defaults to None\n\n#### slack_raw_message(webhook: str, message: str | dict, channel: str | None = None)\n\nSend Slack message by custom JSON content.\n\n* **Parameters:**\n  * **webhook_url** \u2013 needs to be configured for the Slack server\n  * **message** \u2013 dictionary or string defining message content and structure\n  * **channel** \u2013 can be used to set channel into message structure\n"
  },
  {
    "module": "RPA.Smartsheet.Smartsheet",
    "markdown": "# Python API\n\n## Smartsheet\n\n### *class* RPA.Smartsheet.Smartsheet(access_token: str | None = None, max_retry_time: str | int = 30)\n\n*Smartsheet* is a library for accessing Smartsheet using the\n[Smartsheet API 2.0](https://smartsheet.redoc.ly/). It extends [smartsheet-python-sdk](https://github.com/smartsheet/smartsheet-python-sdk).\n\n### Getting started\n\nTo use this library, you need to have a Smartsheet account and an API token.\nYou can get your API token from the [Smartsheet Developer Portal](https://smartsheet-platform.github.io/api-docs/).\nThis library currently only supports raw token authentication. Once\nobtained, you can configure the access token using the `Set Access Token`\nkeyword or via the `access_token` argument in the library import.\n\n### Working on a sheet\n\nThe library supports working on a single sheet at a time. To select a sheet\nto work on, use the `Select Sheet` keyword. This will set the sheet as\nthe active sheet for all subsequent operations. Some operations\nupdate the sheet, but this will not necessarily be reflected in the active\nsheet. To refresh the active sheet, use the `Refresh Sheet` keyword.\n\n### Native Smartsheet objects\n\nYou can retrieve the native Smartsheet object from many keywords by\nspecifying the `native` argument. The default will return a more\ncommon Python object, such as a dictionary or list. The native object\nis a class from the [smartsheet-python-sdk](https://github.com/smartsheet/smartsheet-python-sdk) library and will have\nadditional methods and attributes. The most important attributes\navailable for most native objects are (some may be unavailable\nfor some objects):\n\n- `id`: the unique identifier of the object\n- `name`: the name of the object\n- `title`: the title of a column\n- `permalink`: the URL to the object\n\n#### ROBOT_AUTO_KEYWORDS *= False*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### ROW_EXCLUDES *= ['filteredOutRows', 'linkInFromCellDetails', 'linksOutToCellsDetails', 'nonexistentCells']*\n\nList of supported options to remove cells from rows.\n\n#### ROW_INCLUDES *= {'attachmentFiles': None, 'attachments': 'attachments', 'discussions': 'discussions', 'filters': 'filteredOut', 'rowId': None, 'rowPermalink': 'permalink'}*\n\nDictionary of supported additional objects to ask for via `include`\nparameters for rows. Key is the name of the option, value is the\nAPI attribute or function to call.\n\n#### SEARCH_INCLUDES *= {'favoriteFlag': None}*\n\nDictionary of supported additional objects to ask for via `include`\nparameters for searches. Key is the name of the option, value is the\nAPI attribute or function to call.\n\n#### SEARCH_SCOPES *= ['attachments', 'cellData', 'comments', 'folderNames', 'reportNames', 'sheetNames', 'sightNames', 'summaryFields', 'templateNames', 'workspaceNames']*\n\n#### SHEET_INCLUDES *= {'attachmentFiles': None, 'attachments': 'attachments', 'discussions': 'discussions', 'rowId': None, 'rowPermalink': 'permalink'}*\n\nDictionary of supported additional objects to ask for via `include`\nparameters for sheets. Key is the name of the option, value is the\nAPI attribute or function to call.\n\n#### add_column(title: str, column_type: str = 'TEXT_NUMBER', formula: str | None = None, hidden: bool = False, index: int | None = None, description: str | None = None, primary: bool = False, format_string: str | None = None, locked: bool = False, options: List[str] | None = None, symbol: str | None = None, validation: bool = False, width: int | None = None)\n\nAdds a column to the current sheet.\n\n* **Parameters:**\n  * **title** \u2013 Column title.\n  * **column_type** \u2013 Column type, must be a [supported type](https://smartsheet.redoc.ly/tag/columnsRelated/#section/Column-Types).\n    Defaults to `TEXT_NUMBER`.\n  * **formula** \u2013 Formula for the column (e.g., `=data@row`).\n    Defaults to `None`.\n  * **hidden** \u2013 Whether the column is hidden. Defaults to `False`.\n  * **index** \u2013 Index of the column. You can insert a column into\n    and existing sheet by setting this index. Index is zero-based.\n    Defaults to `None` which will add the column to the end of\n    the sheet.\n  * **description** \u2013 Column description. Defaults to `None`.\n  * **primary** \u2013 Whether the column is considered the primary\n    key for indexing and searching. Defaults to `False`.\n  * **format_string** \u2013 Column format using a [format descriptor](https://smartsheet.redoc.ly/#section/API-Basics/Formatting)\n    string. Defaults to `None`.\n  * **locked** \u2013 Whether the column is locked. Defaults to `False`.\n  * **options** \u2013 List of options for a `PICKLIST` or\n    `MULTI_PICKLIST` column. Defaults to `None`.\n  * **symbol** \u2013 When a `CHECKBOX` or `PICKLIST` column has a\n    display symbol, you can set the type of symbols by selected an\n    appropriate string from the [symbol columns](https://smartsheet.redoc.ly/tag/columnsRelated/#section/Column-Types/Symbol-Columns) definitions.\n    Defaults to `None`.\n  * **validation** \u2013 Whether validation has been enabled. Defaults\n    to `False`.\n  * **width** \u2013 Column width in pixels. Defaults to `None`.\n\nExample:\n\n```robotframework\nAdd Column  Title  TEXT_NUMBER\nAdd Column  Description  TEXT_NUMBER  description=This is a description\nAdd Column  Formula  TEXT_NUMBER  formula==data@row\n```\n\n```python\nss = Smartsheet(access_token=access_token)\nss.add_column(title=\"Title\", column_type=\"TEXT_NUMBER\")\nss.add_column(title=\"Description\", column_type=\"TEXT_NUMBER\", description=\"This is a description\")\nss.add_column(title=\"Formula\", column_type=\"TEXT_NUMBER\", formula=\"=data@row\")\n```\n\n#### add_columns(columns: List[Dict | Column] | None = None) \u2192 List[Column]\n\nAdds columns to the current sheet. Columns must be defined as\na list of dictionaries or Column objects. Dictionaries can have\nadditional keys set, see `Add Column` keyword for more information.\n\nColumn types must be supported by the [Smartsheet API](https://smartsheet.redoc.ly/tag/columnsRelated#section/Column-Types)\n\n* **Parameters:**\n  **columns** \u2013 Columns as a list of dictionaries or Column\n  objects.\n\n#### add_rows(data: List | Table, native: bool = False) \u2192 List[OrderedDict | Row]\n\nAdds rows to the current sheet with the provided data.\n\nYou can provide the data in several ways:\n\n* As a list of dictionaries: each list item represents a row\n  as a single dictionary. The keys of the dictionary are the\n  column IDs or Titles and the values are the values for the\n  cells.\n* As a list of lists of dictionaries: each sub list item is\n  a row and each dictionary is a cell. The keys of the dictionary\n  should match cell attributes, e.g., `column_id`, `title`,\n  `value`, etc. See the \n\n  ```\n  `smartsheet API docs`_\n  ```\n\n   for more\n  information. The dictionary keys must be provided in snake\n  case. You must use this method to set formulas on the row.\n* As a list of native `Row` objects: each `Row` object is a\n  native object from the API with new values for the cells.\n* As a `Table` object: the columns of the Table must either\n  be the column IDs or Titles.\n\nExamples:\n\n*Robot Framework:*\n\n```robotframework\n${row1}=  Create Dictionary  column1=value1  column2=value2\n${row2}=  Create Dictionary  column1=value3  column2=value4\n${row3}=  Create Dictionary  column1=value5  column2=value6\n${data} =  Create List  ${row1}  ${row2}  ${row3}\nAdd Rows  ${data}\n```\n\n*Python:*\n\n```python\nss = Smartsheet(access_token=access_token)\nrow1 = {\"column1\": \"value1\", \"column2\": \"value2\"}\nrow2 = {\"column1\": \"value3\", \"column2\": \"value4\"}\nrow3 = {\"column1\": \"value5\", \"column2\": \"value6\"}\ndata = [row1, row2, row3]\nss.set_rows(data)\n```\n\n#### convert_row_to_dict(row: Row) \u2192 OrderedDict\n\nConverts a row object to a dictionary.\n\n#### convert_sheet_to_table(sheet: Sheet | None = None) \u2192 Table\n\nConverts the current sheet to table. You can provide a differnt\nnative sheet object to be converted via the `sheet` parameter.\n\nThis keyword attempts to return the sheet as a table via\n`RPA.Tables`, but if that library is not available in this\ncontext, the sheet is returned as its native data model (e.g.,\nno operation is performed).\n\nIf the sheet contains additional data from the `include`\nargument, they will be appended to the end of the table as\nadditional columns in the data model. These additional objects\nwill be attached as a list of objects depending on the items\nrequested.\n\n<!-- warn:\n\nOnly the following supported additional data requests\nare supported when unpacking a Sheet object.\n\n* ``attachments``: The value for the cell will be a list of\nnative Attachment object.\n* ``attachmentFiles``: The value for the cell will be a list of\nfile paths to the local copies of each attachment. This\noperation may be resource intensive for many attachments.\n* ``discussions``: The value for the cell will be a list of\nnative Discussion objects.\n* ``rowPermalink``: The value for the cell will be a single\nstring representing the URL to the permalink. -->\n\n#### create_sheet(name: str, columns: List[Dict | Column] | None = None, from_sheet_id: str | int | None = None) \u2192 Sheet\n\nCreates a new sheet with the given name and columns, then sets\nthe current sheet to the new sheet and returns it as a native\nSmartsheet object.\n\n* **Parameters:**\n  * **name** \u2013 Name of the new sheet.\n  * **columns** \u2013 List of columns to create in the new sheet.\n  * **from_sheet_id** \u2013 Sheet ID to use as a template for the new\n    sheet.\n\nExample:\n\n```robotframework\n${columns}=  Create List  Name  Email\n${sheet}=  Create Sheet  My new sheet  ${columns}\n```\n\n```python\nss = Smartsheet(access_token=access_token)\ncolumns = [\n    {\"title\": \"Name\", \"type\": \"TEXT_NUMBER\"},\n    {\"title\": \"Email\", \"type\": \"TEXT_NUMBER\"},\n]\nsheet = ss.create_sheet(\"My new sheet\", columns)\n```\n\n#### download_attachment(attachment: int | str | Dict | Attachment, download_path: str | Path | None = None) \u2192 Path\n\nDownloads the provided attachment from the currently selected\nsheet to the provided download_path, which defaults to\nthe `${OUTPUT_DIR}`.\n\nThe attachment can be provided as an integer representing the\nattachments ID, a dictionary with at least the key `id` or as\nthe native `Attachment` data model type.\n\n* **Parameters:**\n  * **attachment** \u2013 An integar representing the attachment ID, a\n    dictionary with at least the key `id`, or a native\n    `Attachment` data model object.\n  * **download_path** \u2013 The path to save the attachment to.\n\nExamples:\n\n*Robot Framework:*\n\n```robotframework\n${attachment}=  Get Attachment  123456789\n${path}=  Download Attachment  ${attachment}\nLog  ${path}\n```\n\n*Python:*\n\n```python\nss = Smartsheet(access_token=access_token)\nattachment = ss.get_attachment(123456789)\npath = ss.download_attachment(attachment)\nprint(path)\n```\n\n#### get_application_constants() \u2192 ServerInfo\n\nGets application constants from the server. This is not\nnecessary for most automation scenarios, but may be useful for\ndebugging or for other advanced scenarios.\n\n#### get_cell_history(row: int | Row, column: int | str | Column) \u2192 List[Cell] | None\n\nRetrieves the history of a cell in a row of the current sheet.\n\n* **Parameters:**\n  * **row** \u2013 The row ID, row number, or a Row object.\n  * **column** \u2013 The column ID or title.\n\nExamples:\n\n*Robot Framework:*\n\n```robotframework\n${cell_history}=  Get Cell History  1  Approval\nFOR  ${revision} IN  @{cell_history}\n    Log  Modified by ${revision.modified_by.email}\nEND\n```\n\n*Python:*\n\n```python\nss = Smartsheet(access_token=access_token)\ncell_history = ss.get_cell_history(1, \"Approval\")\nfor revision in cell_history:\n    print(f\"Modified by {revision.modified_by.email}\")\n```\n\n#### get_current_user() \u2192 User\n\nGets the current authenticated user, which is also set in\nthe library\u2019s memory as the current user. Call this again\nif you switch user or begin to impersonate a user.\n\n#### get_row(row: int | Row, include: str | List[Any] | None = None, exclude: str | List[Any] | None = None, native: bool = False) \u2192 Row | OrderedDict\n\nReturns a single row from the current sheet.\n\nYou can provide the row as a native `Row` object or as an\ninteger representing the row ID.\n\n#### get_sheet(sheet_id: int | None = None, sheet_name: str | None = None, include: str | List[Any] | None = None, row_ids: str | List[Any] | None = None, row_numbers: str | List[Any] | None = None, column_ids: str | List[Any] | None = None, filter_id: int | None = None, native: bool = False, download_path: str | Path | None = None) \u2192 Table | Sheet\n\nRetrieves a sheet from Smartsheet. This keyword also sets\nthe currently selected sheet to the returned sheet.\n\nYou cannot provide both a `sheet_id` and `sheet_name`.\n\n* **Parameters:**\n  * **sheet_id** \u2013 The ID of the sheet to get. You cannot supply\n    both a `sheet_id` and `sheet_name`.\n  * **sheet_name** \u2013 The name of the sheet to get, it will return\n    the first sheet name matching the provided name. You cannot supply\n    both a `sheet_id` and `sheet_name`.\n  * **include** \u2013 Additional metadata which can be retrieved with\n    the table. The list can only contain the following items:\n    `attachments`, `attachmentFiles`, `discussions`,\n    `rowPermalink`, or `ALL`. Note that `attachmentFiles`\n    will only download files if you do not set `native` to\n    `True`.\n  * **row_ids** \u2013 A list of row IDs to include. All other rows\n    will be ignored. The list can be a list object or a\n    comma-separated list as a string.\n  * **row_numbers** \u2013 A list of row numbers to include. All other\n    rows will be ignored. The list can be a list object or a\n    comma-separated list as a string.\n  * **column_ids** \u2013 A list of column IDs to only include, others\n    will not be returned. The list can be a list object or a\n    comma-separated list as a string.\n  * **filter_id** \u2013 The ID of a filter to apply. Filtered out\n    rows will not be included in the resulting table.\n  * **native** \u2013 Defaults to `False`. Set to `True` to change\n    the return type to the native Smartsheet data model. The native\n    type is useful for passing to other keywords as arguments.\n  * **download_path** \u2013 Defaults to `None`. Can be set when\n    `attachmentFiles` is included in the `include` parameter.\n    All attachments will be downloaded to the provided directory.\n\nExample:\n\n```robotframework\n${sheet}=  Get Sheet  sheet_name=My Sheet\nFOR  ${row}  IN  &{sheet}\n    FOR  ${column}  ${value}  IN  &{row}\n        Log  The column ${column} has the value ${value}\n    END\nEND\n```\n\n```python\nss = Smartsheet(access_token=access_token)\nsheet = ss.get_sheet(sheet_name=\"My Sheet\", native=True)\nfor row in sheet:\n    for cell in row:\n        print(f\"The column {cell.column_id} has the value {cell.value}\")\n```\n\n#### get_sheet_owner(sheet_id: int | None = None, sheet_name: str | None = None) \u2192 Tuple[str, int]\n\nReturns the owner\u2019s username and ID for the current sheet.\n\n#### list_attachments() \u2192 List[Attachment] | None\n\nGets a list of all attachments from the currently selected sheet.\n\nThis will include attachments to the sheet, rows, and discussions.\n\nExamples:\n\n*Robot Framework:*\n\n```robotframework\n${attachments}=  List Attachments\nFOR  ${attachment} IN  @{attachments}\n    Log  ${attachment.name}\nEND\n```\n\n*Python:*\n\n```python\nss = Smartsheet(access_token=access_token)\nattachments = ss.list_attachments()\nfor attachment in attachments:\n    print(attachment.name)\n```\n\n#### list_columns(sheet_id: int | None = None, sheet_name: str | None = None) \u2192 List[Column] | None\n\nReturns a list of columns for the current sheet.\n\n* **Parameters:**\n  * **sheet_id** \u2013 The ID of the sheet to get columns from.\n  * **sheet_name** \u2013 The name of the sheet to get columns from.\n\n#### list_sheet_filters(sheet_id: int | None = None, sheet_name: str | None = None) \u2192 List[SheetFilter] | None\n\nReturns a list of available filters for the current sheet. You\ncan specify a different sheet via the `sheet_id` or\n`sheet_name` parameters.\n\nThe returned list of filters can be used with the `filter_id`\nargument of the `get_sheet` keyword.\n\nExample:\n\n```robotframework\n${filters}=  List Sheet Filters\nFOR  ${filter}  IN  @{filters}\n    ${filtered_sheet}=  Get Sheet\n    ...  sheet_name=My sheet\n    ...  filter_id=${filter.id}\n    Log  There are ${len(filtered_sheet)} rows in the filtered sheet\nEND\n```\n\n```python\nss = Smartsheet(access_token=access_token)\nmy_sheet_id = 123456789\nfilters = ss.list_sheet_filters()\nfor filter in filters:\n    filtered_sheet = ss.get_sheet(\n        sheet_id=my_sheet_id,\n        filter_id=filter.id,\n        native=True,\n    )\n    print(\n        f\"There are {len(filtered_sheet.rows)} rows in the \"\n        f\"filtered sheet\"\n    )\n```\n\n#### list_sheets(use_cache: bool = True) \u2192 List[Sheet]\n\nLists all sheets available for the authenticated account. Uses\ncached lists if available unless `use_cache` is set to `False`.\n\nThe cached lists is used for other keywords, so if you need to\nrefresh the cache for other keywords to use, you must do so\nvia this keyword.\n\n* **Parameters:**\n  **use_cache** \u2013 Defaults to `True`. You can set to `False`\n  to force a reload of the cached list of sheets.\n\nExample:\n\n```robotframework\n${sheets}=  List Sheets\nFOR  ${sheet}  IN  @{sheets}\n    Log  ${sheet.name}\n```\n\n```python\nss = SmartsheetLibrary(account_token=account_token)\nsheets = ss.list_sheets()\nfor sheet in sheets:\n    print(sheet.name)\n```\n\n#### refresh_sheet(native: bool = False) \u2192 Table | Sheet\n\nRefreshes the current sheet from the API and returns it\neither as a Table or native data model depending on the\n`native` argument.\n\n#### search(query: str, location: str | None = None, modified_since: str | int | None = None, include: str | List[Any] | None = None, scopes: str | List[Any] | None = None) \u2192 List[Sheet]\n\nSearches for all sheets for text matching the query. Returns\na list of native Smartsheet Sheet objects. You can use the\nadditional parameters to filter the search and increase speed.\n\n* **Parameters:**\n  * **query** \u2013 The text to search for.\n  * **location** \u2013 The location to search. When specified with\n    a value of `personalWorkspace`, the search will be limited\n    to the current user\u2019s personal workspace.\n  * **modified_since** \u2013 The date to search from. This can be\n    either a string or an integer. If an integer is provided, it\n    will be interpreted as a Unix timestamp. If a string is\n    provided, it will be parsed via the Robot Framework time\n    utilities, so you can provided it using keywords like\n    `NOW - 1 day`.\n  * **include** \u2013 When specified with the value of `favoriteFlag`,\n    results will either include a `favorite` attribute or\n    `parentObjectFavorite` attribute depending on the type of\n    object found by the search engine.\n  * **scopes** \u2013 \n\n    If search fails, try using an array for each type\n    of this comma-separated list of search filters. The following\n    strings can be used to filter the search results:\n    > * `attachments`: Search in attachments.\n    > * `cellData`: Search in cell data.\n    > * `comments`: Search in comments.\n    > * `folderNames`: Search in folder names.\n    > * `reportNames`: Search in report names.\n    > * `sheetNames`: Search in sheet names.\n    > * `sightNames`: Search in sight names.\n    > * `summaryFields`: Search in summary fields.\n    > * `templateNames`: Search in template names.\n    > * `workspaceNames`: Search in workspace names.\n\nExample:\n\n```robotframework\n${sheets}=  Search  my search query\nFOR  ${sheet}  IN  @{sheets}\n    Log  ${sheet.name}\n```\n\n```python\nss = Smartsheet(access_token=access_token)\nsheets = ss.search(\"my search query\")\nfor sheet in sheets:\n    print(sheet.name)\n```\n\n#### set_access_token(access_token: str) \u2192 None\n\nSets the access token to be used when accessing the\nSmartsheet API.\n\nLearn more about authenticating to Smartsheets\n[here](https://smartsheet.redoc.ly/#section/API-Basics/Raw-Token-Requests).\n\n* **Parameters:**\n  **access_token** \u2013 The access token created for your\n  Smartsheet user.\n\nExample:\n\n```robotframework\nSet Access Token  ${access_token}\n```\n\n```python\nsmartsheet = Smartsheet(access_token=access_token)\n# or\nsmartsheet.set_access_token(access_token)\n```\n\n#### set_max_retry_time(max_retry_time: str | int) \u2192 int | None\n\nSets the max retry time to use when sending requests to the\nSmartsheet API. Returns the current max retry time.\n\n* **Parameters:**\n  **max_retry_time** \u2013 Maximum time to allow retries of API\n  calls. Can be provided as a time string or int.\n\n#### set_row(row: int | Row, data: Dict | List[Dict] | Row | None = None, native: bool = False) \u2192 Dict | Row\n\nUpdates a single row of the current sheet with the provided data.\n\nYou can provide the row as a native `Row` object or as an\ninteger representing the row ID. You may omit the `data`\nargument if you are providing a native `Row` object.\n\nYou can provide the data in several ways:\n\n* As a dictionary: the keys of the dictionary are the\n  column IDs or Titles and the values are the values for the\n  cells.\n* As a list of dictionaries: each dictionary is a cell. The keys\n  of the dictionary should match cell attributes, e.g., `column_id`,\n  `title`, `value`, etc. See the \n\n  ```\n  `smartsheet API docs`_\n  ```\n\n   for more\n  information. The dictionary keys must be provided in snake case.\n  You must use this method to set formulas on the row.\n* As a native `Row` object: a native object from the API with\n  new values for the cells.\n\nFor examples, see `Set Rows`.\n\n#### set_rows(data: List | Table, native: bool = False) \u2192 List[OrderedDict | Row]\n\nUpdates rows of the current sheet with the provided data.\n\n#### NOTE\nIn order to update rows, you must identify the rows to the\nAPI. You can do this by providing the `rowId` or `rowNumber`\nas a column in the data. The ID must be the API ID, while the\nnumber is the row number per the UI. This can only be excluded\nif the length of the data matches the length of the sheet.\n\nYou can provide the data in several ways:\n\n* As a list of dictionaries: each list item represents a row\n  as a single dictionary. The keys of the dictionary are the\n  column IDs or Titles and the values are the values for the\n  cells.\n* As a list of lists of dictionaries: each sub list item is\n  a row and each dictionary is a cell. The keys of the dictionary\n  should match cell attributes, e.g., `column_id`, `title`,\n  `value`, etc. See the \n\n  ```\n  `smartsheet API docs`_\n  ```\n\n   for more\n  information. The dictionary keys must be provided in snake\n  case. You must use this method to set formulas on the row.\n* As a list of native `Row` objects: each `Row` object is a\n  native object from the API with new values for the cells.\n* As a `Table` object: the columns of the Table must either\n  be the column IDs or Titles.\n\nExamples:\n\n*Robot Framework:*\n\n```robotframework\n${row1}=  Create Dictionary  rowId=123  column1=value1  column2=value2\n${row2}=  Create Dictionary  rowId=456  column1=value3  column2=value4\n${row3}=  Create Dictionary  rowId=789  column1=value5  column2=value6\n${data} =  Create List  ${row1}  ${row2}  ${row3}\nSet Rows  ${data}\n\n# Or work with native row objects to update them.\n${row1}=  Get Row  123\nFOR  ${cell}  IN  @{row1.cells}\n    IF  ${cell.column_id} == 123\n        ${cell.value}=  Set Variable  New Value\n    END\nEND\n${data}=  Create List  ${row1}\nSet Rows  ${data}\n```\n\n*Python:*\n\n```python\nss = Smartsheet(access_token=access_token)\nrow1 = {\"rowId\": 123, \"column1\": \"value1\", \"column2\": \"value2\"}\nrow2 = {\"rowId\": 456, \"column1\": \"value3\", \"column2\": \"value4\"}\nrow3 = {\"rowId\": 789, \"column1\": \"value5\", \"column2\": \"value6\"}\ndata = [row1, row2, row3]\nss.set_rows(data)\n\n# or work with native row objects to update them.\nrow1 = ss.get_row(123)\nfor cell in row1.cells:\n    if cell.column_id == 123:\n        cell.value = \"New Value\"\ndata = [row1]\nss.set_rows(data)\n```\n\n#### *property* sheets *: List[Sheet]*\n\nFull list of cached sheets.\n\n#### unselect_current_sheet() \u2192 None\n\nResets the current sheet to None.\n\n#### update_column(column: int | str | Column, \\*\\*kwargs) \u2192 Column\n\nUpdates a column in the current sheet. See the `Add Column` keyword\nfor a list of supported attributes.\n\n* **Parameters:**\n  * **column** \u2013 Column ID or title.\n  * **kwargs** \u2013 Column attributes to update. See `Add Column` keyword\n    for a list of supported attributes.\n"
  },
  {
    "module": "RPA.Tables.Tables",
    "markdown": "# Python API\n\n## Tables\n\n### *class* RPA.Tables.Tables\n\nTables is a library for manipulating tabular data inside Robot Framework.\n\nIt can import data from various sources and apply different operations to it.\nCommon use-cases are reading and writing CSV files, inspecting files in\ndirectories, or running tasks using existing Excel data.\n\n**Import types**\n\nThe data a table can be created from can be of two main types:\n\n1. An iterable of individual rows, like a list of lists, or list of dictionaries\n2. A dictionary of columns, where each dictionary value is a list of values\n\nFor instance, these two input values:\n\n```python\ndata1 = [\n    {\"name\": \"Mark\", \"age\": 58},\n    {\"name\": \"John\", \"age\": 22},\n    {\"name\": \"Adam\", \"age\": 67},\n]\n\ndata2 = {\n    \"name\": [\"Mark\", \"John\", \"Adam\"],\n    \"age\":  [    58,     22,     67],\n}\n```\n\nWould both result in the following table:\n\n|   Index | Name   |   Age |\n|---------|--------|-------|\n|       0 | Mark   |    58 |\n|       1 | John   |    22 |\n|       2 | Adam   |    67 |\n\n**Indexing columns and rows**\n\nColumns can be referred to in two ways: either with a unique string\nname or their position as an integer. Columns can be named either when\nthe table is created, or they can be (re)named dynamically with keywords.\nThe integer position can always be used, and it starts from zero.\n\nFor instance, a table with columns \u201cName\u201d, \u201cAge\u201d, and \u201cAddress\u201d would\nallow referring to the \u201cAge\u201d column with either the name \u201cAge\u201d or the\nnumber 1.\n\nRows do not have a name, but instead only have an integer index. This\nindex also starts from zero. Keywords where rows are indexed also support\nnegative values, which start counting backwards from the end.\n\nFor instance, in a table with five rows, the first row could be referred\nto with the number 0. The last row could be accessed with either 4 or\n-1.\n\n**Examples**\n\n**Robot Framework**\n\nThe Tables library can load tabular data from various other libraries\nand manipulate it inside Robot Framework.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Tables\n\n*** Keywords ***\nFiles to Table\n    ${files}=    List files in directory    ${CURDIR}\n    ${files}=    Create table    ${files}\n    Filter table by column    ${files}    size  >=  ${1024}\n    FOR    ${file}    IN    @{files}\n        Log    ${file}[name]\n    END\n    Write table to CSV    ${files}    ${OUTPUT_DIR}${/}files.csv\n```\n\n**Python**\n\nThe library is also available directly through Python, where it\nis easier to handle multiple different tables or do more bespoke\nmanipulation operations.\n\n```python\nfrom RPA.Tables import Tables\n\nlibrary = Tables()\norders = library.read_table_from_csv(\n    \"orders.csv\", columns=[\"name\", \"mail\", \"product\"]\n)\n\ncustomers = library.group_table_by_column(rows, \"mail\")\nfor customer in customers:\n    for order in customer:\n        add_cart(order)\n    make_order()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### add_table_column(table: Table, name: str | None = None, values: Any | None = None)\n\nAppend a column to a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **name** \u2013 Name of new column\n  * **values** \u2013 Value(s) for new column\n\nThe `values` can either be a list of values, one for each row, or\none single value that is set for all rows.\n\nExamples:\n\n```robotframework\n# Add empty column\nAdd table column    ${table}\n\n# Add empty column with name\nAdd table column    ${table}    name=Home Address\n\n# Add new column where every every row has the same value\nAdd table column    ${table}    name=TOS    values=${FALSE}\n\n# Add new column where every row has a unique value\n${is_first}=    Create list    ${TRUE}    ${FALSE}    ${FALSE}\nAdd table column    ${table}    name=IsFirst    values=${is_first}\n```\n\n#### add_table_row(table: Table, values: Any | None = None)\n\nAppend rows to a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **values** \u2013 Value(s) for new row\n\nThe `values` can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.\n\nIt can also be a single value that is set for all columns,\nwhich is `None` by default.\n\nExamples:\n\n```robotframework\n# Add empty row\nAdd table row    ${table}\n\n# Add row where every column has the same value\nAdd table row    ${table}    Unknown\n\n# Add values per column\n${values}=    Create dictionary    Username=Mark    Mail=mark@robocorp.com\nAdd table row    ${table}    ${values}\n```\n\n#### clear_table(table: Table)\n\nClear table in-place, but keep columns.\n\n* **Parameters:**\n  **table** \u2013 Table to clear\n\nExample:\n\n```robotframework\nClear table    ${table}\n```\n\n#### copy_table(table: Table) \u2192 Table\n\nMake a copy of a table object.\n\n* **Parameters:**\n  **table** \u2013 Table to copy\n* **Returns:**\n  Table object\n\n${table_copy}=    Copy table    ${table}\n\n#### create_table(data: Dict[int | str, Dict | List | Tuple | NamedTuple | set] | List[Dict | List | Tuple | NamedTuple | set] | Table | None = None, trim: bool = False, columns: List[str] | None = None) \u2192 Table\n\nCreate Table object from data.\n\nData can be a combination of various iterable containers, e.g.\nlist of lists, list of dicts, dict of lists.\n\n* **Parameters:**\n  * **data** \u2013 Source data for table\n  * **trim** \u2013 Remove all empty rows from the end of the worksheet,\n    default False\n  * **columns** \u2013 Names of columns (optional)\n* **Returns:**\n  Table object\n\nSee the main library documentation for more information about\nsupported data types.\n\nExample:\n\n```robotframework\n# Create a new table using a Dictionary of Lists\n# Because of the dictionary keys the column names will be automatically set\n@{Table_Data_name}=    Create List    Mark    John    Amy\n@{Table_Data_age}=    Create List    ${58}    ${22}    ${67}\n&{Table_Data}=    Create Dictionary\n...    name=${Table_Data_name}\n...    age=${Table_Data_age}\n${table}=    Create Table    ${Table_Data}\n```\n\n#### export_table(table: Table, with_index: bool = False, as_list: bool = True) \u2192 List | Dict\n\nConvert a table object into standard Python containers.\n\n* **Parameters:**\n  * **table** \u2013 Table to convert to dict\n  * **with_index** \u2013 Include index in values\n  * **as_list** \u2013 Export data as list instead of dict\n* **Returns:**\n  A List or Dictionary that represents the table\n\nExample:\n\n```robotframework\n${orders}=       Read worksheet as table    orders.xlsx\nSort table by column    ${orders}    CustomerId\n${export}=       Export table    ${orders}\n# The following keyword expects a dictionary:\nWrite as JSON    ${export}\n```\n\n#### filter_empty_rows(table: Table)\n\nRemove all rows from a table which have only `None` values.\n\n* **Parameters:**\n  **table** \u2013 Table to filter\n\nThe filtering will be done in-place.\n\nExample:\n\n```robotframework\nFilter empty rows    ${table}\n```\n\n#### filter_table_by_column(table: Table, column: int | str, operator: str, value: Any)\n\nRemove all rows where column values don\u2019t match the\ngiven condition.\n\n* **Parameters:**\n  * **table** \u2013 Table to filter\n  * **column** \u2013 Column to filter with\n  * **operator** \u2013 Filtering operator, e.g. >, <, ==, contains\n  * **value** \u2013 Value to compare column to (using operator)\n\nSee the keyword `Find table rows` for all supported operators\nand their descriptions.\n\nThe filtering will be done in-place.\n\nExamples:\n\n```robotframework\n# Only accept prices that are non-zero\nFilter table by column    ${table}   price  !=  ${0}\n\n# Remove uwnanted product types\n@{types}=    Create list    Unknown    Removed\nFilter table by column    ${table}   product_type  not in  ${types}\n```\n\n#### filter_table_with_keyword(table: Table, name: str, \\*args)\n\nRun a keyword for each row of a table, then remove all rows where the called\nkeyword returns a falsy value.\n\nCan be used to create custom RF keyword based filters.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify.\n  * **name** \u2013 Keyword name used as filter.\n  * **args** \u2013 Additional keyword arguments to be passed. (optional)\n\nThe row object will be given as the first argument to the filtering keyword.\n\n#### find_table_rows(table: Table, column: int | str, operator: str, value: Any)\n\nFind all the rows in a table which match a condition for a given column.\n\n* **Parameters:**\n  * **table** \u2013 Table to search into.\n  * **column** \u2013 Name or position of the column to compare with.\n  * **operator** \u2013 Comparison operator used with every cell value on the\n    specified column.\n  * **value** \u2013 Value to compare against.\n* **Returns:**\n  New Table object containing all the rows matching the condition.\n\nSupported operators:\n\n| Operator     | Description                             |\n|--------------|-----------------------------------------|\n| >            | Cell value is larger than               |\n| <            | Cell value is smaller than              |\n| >=           | Cell value is larger or equal than      |\n| <=           | Cell value is smaller or equal than     |\n| ==           | Cell value is equal to                  |\n| !=           | Cell value is not equal to              |\n| is           | Cell value is the same object           |\n| not is       | Cell value is not the same object       |\n| contains     | Cell value contains given value         |\n| not contains | Cell value does not contain given value |\n| in           | Cell value is in given value            |\n| not in       | Cell value is not in given value        |\n\nReturns the matches as a new Table instance.\n\nExamples:\n\n```robotframework\n# Find all rows where price is over 200\n@{rows} =    Find table rows    ${table}    Price  >  ${200}\n\n# Find all rows where the status does not contain \"removed\"\n@{rows} =    Find table rows    ${table}    Status  not contains  removed\n```\n\n#### get_table_cell(table: Table, row: int | str, column: int | str) \u2192 Any\n\nGet a cell value from a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to read from\n  * **row** \u2013 Row of cell\n  * **column** \u2013 Column of cell\n* **Returns:**\n  Cell value\n\nExamples:\n\n```robotframework\n# Get the value in the first row and first column\nGet table cell    ${table}    0    0\n\n# Get the value in the last row and first column\nGet table cell    ${table}   -1    0\n\n# Get the value in the last row and last column\nGet table cell    ${table}   -1    -1\n\n# Get the value in the third row and column \"Name\"\nGet table cell    ${table}    2    Name\n```\n\n#### get_table_column(table: Table, column: int | str) \u2192 List\n\nGet all values for a single column in a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to read\n  * **column** \u2013 Column to read\n* **Returns:**\n  List of the rows in the selected column\n\nExample:\n\n```robotframework\n${emails}=    Get table column    ${users}    E-Mail Address\n```\n\n#### get_table_dimensions(table: Table) \u2192 Tuple[int, int]\n\nReturn table dimensions, as (rows, columns).\n\n* **Parameters:**\n  **table** \u2013 Table to inspect\n* **Returns:**\n  Two integer values that represent the number\n  of rows and columns\n\nExample:\n\n```robotframework\n${rows}  ${columns}=    Get table dimensions    ${table}\nLog    Table has ${rows} rows and ${columns} columns.\n```\n\n#### get_table_row(table: Table, row: int | str, as_list: bool = False) \u2192 Dict | List\n\nGet a single row from a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to read\n  * **row** \u2013 Row to read\n  * **as_list** \u2013 Return list instead of dictionary\n* **Returns:**\n  Dictionary or List of table row\n\nExamples:\n\n```robotframework\n# returns the first row in the table\n${first}=    Get table row    ${orders}\n\n# returns the last row in the table\n${last}=      Get table row    ${orders}    -1    as_list=${TRUE}\n```\n\n#### get_table_slice(table: Table, start: int | str | None = None, end: int | str | None = None) \u2192 Table | List[List]\n\nReturn a new Table from a range of given Table rows.\n\n* **Parameters:**\n  * **table** \u2013 Table to read from\n  * **start** \u2013 Start index (inclusive)\n  * **start** \u2013 End index (exclusive)\n* **Returns:**\n  Table object of the selected rows\n\nIf `start` is not defined, starts from the first row.\nIf `end` is not defined, stops at the last row.\n\nExamples:\n\n```robotframework\n# Get all rows except first five\n${slice}=    Get table slice    ${table}    start=5\n\n# Get rows at indexes 5, 6, 7, 8, and 9\n${slice}=    Get table slice    ${table}    start=5    end=10\n\n# Get all rows except last five\n${slice}=    Get table slice    ${table}    end=-5\n```\n\n#### group_table_by_column(table: Table, column: int | str) \u2192 List[Table]\n\nGroup a table by `column` and return a list of grouped Tables.\n\n* **Parameters:**\n  * **table** \u2013 Table to use for grouping\n  * **column** \u2013 Column which is used as grouping criteria\n* **Returns:**\n  List of Table objects\n\nExample:\n\n```robotframework\n# Groups rows of matching customers from the `customer` column\n# and returns the groups or rows as Tables\n@{groups}=    Group table by column    ${orders}    customer\n# An example of how to use the List of Tables once returned\nFOR    ${group}    IN    @{groups}\n    # Process all orders for the customer at once\n    Process order    ${group}\nEND\n```\n\n#### map_column_values(table: Table, column: int | str, name: str, \\*args)\n\nRun a keyword for each cell in a given column, and replace its content with\nthe return value.\n\nCan be used to easily convert column types or values in-place.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify.\n  * **column** \u2013 Column to modify.\n  * **name** \u2013 Mapping keyword name.\n  * **args** \u2013 Additional keyword arguments. (optional)\n\nThe cell value will be given as the first argument to the mapping keyword.\n\nExamples:\n\n```robotframework\n# Convert all columns values to a different type\nMap column values    ${table}    Price    Convert to integer\n\n# Look up values with a custom keyword\nMap column values    ${table}    User     Map user ID to name\n```\n\n#### merge_tables(\\*tables: Table, index: str | None = None) \u2192 Table\n\nCreate a union of two tables and their contents.\n\n* **Parameters:**\n  * **tables** \u2013 Tables to merge\n  * **index** \u2013 Column name to use as index for merge\n* **Returns:**\n  Table object\n\nBy default rows from all tables are appended one after the other.\nOptionally a column name can be given with `index`, which is\nused to merge rows together.\n\nExample:\n\nFor instance, a `name` column could be used to identify\nunique rows and the merge operation should overwrite values\ninstead of appending multiple copies of the same name.\n\n| Name   |   Price |\n|--------|---------|\n| Egg    |      10 |\n| Cheese |      15 |\n| Ham    |      20 |\n\n| Name   |   Stock |\n|--------|---------|\n| Egg    |      12 |\n| Cheese |      99 |\n| Ham    |       0 |\n```robotframework\n${products}=    Merge tables    ${prices}    ${stock}    index=Name\nFOR    ${product}    IN    @{products}\n    Log many\n    ...    Product: ${product}[Name]\n    ...    Price: ${product}[Price]\n    ...    Stock: ${product}[Stock]\nEND\n```\n\n#### pop_table_column(table: Table, column: int | str | None = None) \u2192 Dict | List\n\nRemove column from table and return it.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **column** \u2013 Column to remove\n* **Returns:**\n  Dictionary or List of the removed, popped, column\n\nExamples:\n\n```robotframework\n# Remove column from table and discard it\nPop table column    ${users}   userId\n\n# Remove column from table and iterate over it\n${ids}=    Pop table column    ${users}    userId\nFOR    ${id}    IN    @{ids}\n    Log    User id: ${id}\nEND\n```\n\n#### pop_table_row(table: Table, row: int | str | None = None, as_list: bool = False) \u2192 Dict | List\n\nRemove row from table and return it.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **row** \u2013 Row index, pops first row if none given\n  * **as_list** \u2013 Return list instead of dictionary\n* **Returns:**\n  Dictionary or List of the removed, popped, row\n\nExamples:\n\n```robotframework\n# Pop the firt row in the table and discard it\nPop table row    ${orders}\n\n# Pop the last row in the table and store it\n${row}=      Pop table row    ${data}    -1    as_list=${TRUE}\n```\n\n#### read_table_from_csv(path: str, header: bool | None = None, columns: List[str] | None = None, dialect: str | Dialect | None = None, delimiters: str | None = None, column_unknown: str = 'Unknown', encoding: str | None = None) \u2192 Table\n\nRead a CSV file as a table.\n\n* **Parameters:**\n  * **path** \u2013 Path to CSV file\n  * **header** \u2013 CSV file includes header\n  * **columns** \u2013 Names of columns in resulting table\n  * **dialect** \u2013 Format of CSV file\n  * **delimiters** \u2013 String of possible delimiters\n  * **column_unknown** \u2013 Column name for unknown fields\n  * **encoding** \u2013 Text encoding for input file,\n    uses system encoding by default\n* **Returns:**\n  Table object\n\nBy default attempts to deduce the CSV format and headers\nfrom a sample of the input file. If it\u2019s unable to determine\nthe format automatically, the dialect and header will\nhave to be defined manually.\n\nBuiltin `dialect` values are `excel`, `excel-tab`, and `unix`,\nand `header` is boolean argument (`True`/`False`). Optionally a\nset of valid `delimiters` can be given as a string.\n\nThe `columns` argument can be used to override the names of columns\nin the resulting table. The amount of columns must match the input\ndata.\n\nIf the source data has a header and rows have more fields than\nthe header defines, the remaining values are put into the column\ngiven by `column_unknown`. By default it has the value \u201cUnknown\u201d.\n\nExamples:\n\n```robotframework\n# Source dialect is deduced automatically\n${table}=    Read table from CSV    export.csv\nLog   Found columns: ${table.columns}\n\n# Source dialect is known and given explicitly\n${table}=    Read table from CSV    export-excel.csv    dialect=excel\nLog   Found columns: ${table.columns}\n```\n\n#### rename_table_columns(table: Table, names: List[str | None], strict: bool = False)\n\nRenames columns in the Table with given values. Columns with\nname as `None` will use the previous value.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **names** \u2013 List of new column names\n  * **strict** \u2013 If True, raises ValueError if column lengths\n    do not match\n\nThe renaming will be done in-place.\n\nExamples:\n\n```robotframework\n# Initially set the column names\n${columns}=    Create list   First  Second  Third\nRename table columns    ${table}    ${columns}\n# First, Second, Third\n\n# Update the first and second column names to Uno and Dos\n${columns}=    Create list   Uno  Dos\nRename table columns    ${table}    ${columns}\n# Uno, Dos, Third\n```\n\n#### set_row_as_column_names(table: Table, row: int | str)\n\nSet existing row as names for columns.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **row** \u2013 Row to use as column names\n\nExample:\n\n```robotframework\n# Set the column names based on the first row\nSet row as column names    ${table}    0\n```\n\n#### set_table_cell(table: Table, row: int | str, column: int | str, value: Any)\n\nSet a cell value in a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify to\n  * **row** \u2013 Row of cell\n  * **column** \u2013 Column of cell\n  * **value** \u2013 Value to set\n\nExamples:\n\n```robotframework\n# Set the value in the first row and first column to \"First\"\nSet table cell    ${table}    0    0       First\n\n# Set the value in the last row and first column to \"Last\"\nSet table cell    ${table}   -1    0       Last\n\n# Set the value in the last row and last column to \"Corner\"\nSet table cell    ${table}   -1    -1       Corner\n\n# Set the value in the third row and column \"Name\" to \"Unknown\"\nSet table cell    ${table}    2    Name    Unknown\n```\n\n#### set_table_column(table: Table, column: int | str, values: Any)\n\nAssign values to a column in the table.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **column** \u2013 Column to modify\n  * **values** \u2013 Value(s) to set\n\nThe `values` can either be a list of values, one for each row, or\none single value that is set for all rows.\n\nExamples:\n\n```robotframework\n# Set different value for each row (sizes must match)\n${ids}=    Create list    1  2  3  4  5\nSet table column    ${users}    userId    ${ids}\n\n# Set the same value for all rows\nSet table column    ${users}    email     ${NONE}\n```\n\n#### set_table_row(table: Table, row: int | str, values: Any)\n\nAssign values to a row in the table.\n\n* **Parameters:**\n  * **table** \u2013 Table to modify\n  * **row** \u2013 Row to modify\n  * **values** \u2013 Value(s) to set\n\nThe `values` can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.\n\nIt can also be a single value that is set for all columns.\n\nExamples:\n\n```robotframework\n${columns}=  Create list     One  Two  Three\n${table}=    Create table    columns=${columns}\n\n${values}=   Create list     1  2  3\nSet table row    ${table}    0    ${values}\n\n${values}=   Create dictionary    One=1  Two=2  Three=3\nSet table row    ${table}    1    ${values}\n\nSet table row    ${table}    2    ${NONE}\n```\n\n#### sort_table_by_column(table: Table, column: int | str, ascending: bool = True)\n\nSort a table in-place according to `column`.\n\n* **Parameters:**\n  * **table** \u2013 Table to sort\n  * **column** \u2013 Column to sort with\n  * **ascending** \u2013 Table sort order\n\nExamples:\n\n```robotframework\n# Sorts the `order_date` column ascending\nSort table by column    ${orders}    order_date\n\n# Sorts the `order_date` column descending\nSort table by column    ${orders}    order_date    ascending=${FALSE}\n```\n\n#### table_head(table: Table, count: int = 5, as_list: bool = False) \u2192 Table | List[List]\n\nReturn first `count` rows from a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to read from\n  * **count** \u2013 Number of lines to read\n  * **as_list** \u2013 Return list instead of Table\n* **Returns:**\n  Return Table object or List of the selected rows\n\nExample:\n\n```robotframework\n# Get the first 10 employees\n${first}=    Table head    ${employees}    10\n```\n\n#### table_tail(table: Table, count: int = 5, as_list: bool = False) \u2192 Table | List[List]\n\nReturn last `count` rows from a table.\n\n* **Parameters:**\n  * **table** \u2013 Table to read from\n  * **count** \u2013 Number of lines to read\n  * **as_list** \u2013 Return list instead of Table\n* **Returns:**\n  Return Table object or List of the selected rows\n\nExample:\n\n```robotframework\n# Get the last 10 orders\n${latest}=    Table tail    ${orders}    10\n```\n\n#### trim_column_names(table: Table)\n\nRemove all extraneous whitespace from column names.\n\n* **Parameters:**\n  **table** \u2013 Table to filter\n\nThe filtering will be done in-place.\n\nExample:\n\n```robotframework\n# This example will take colums such as:\n# \"One\", \"Two \", \"  Three \"\n# and trim them to become the below:\n# \"One\", \"Two\", \"Three\"\nTrim column names     ${table}\n```\n\n#### trim_empty_rows(table: Table)\n\nRemove all rows from the *end* of a table\nwhich have only `None` as values.\n\n* **Parameters:**\n  **table** \u2013 Table to filter\n\nThe filtering will be done in-place.\n\nExample:\n\n```robotframework\nTrim empty rows    ${table}\n```\n\n#### write_table_to_csv(table: Table, path: str, header: bool = True, dialect: str | Dialect = Dialect.Excel, encoding: str | None = None, delimiter: str | None = ',')\n\nWrite a table as a CSV file.\n\n* **Parameters:**\n  * **table** \u2013 Table to write\n  * **path** \u2013 Path to write to\n  * **header** \u2013 Write columns as header to CSV file\n  * **dialect** \u2013 The format of output CSV\n  * **encoding** \u2013 Text encoding for output file,\n    uses system encoding by default\n  * **delimiter** \u2013 Delimiter character between columns\n\nBuiltin `dialect` values are `excel`, `excel-tab`, and `unix`.\n\nExample:\n\n```robotframework\n${sheet}=    Read worksheet as table    orders.xlsx    header=${TRUE}\nWrite table to CSV    ${sheet}    output.csv\n```\n"
  },
  {
    "module": "RPA.Twitter.Twitter",
    "markdown": "# Python API\n\n## Twitter\n"
  },
  {
    "module": "RPA.Windows.Windows",
    "markdown": "# Python API\n\n## Windows\n\n### *class* RPA.Windows.Windows(locators_path: str | None = None)\n\nThe Windows is a library that can be used for Windows desktop automation.\n\nLibrary is included in the **rpaframework** package by default, but as shown in the\nbelow example library can be also installed separately without **rpaframework**.\n\n```yaml\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.12.8\n  - pip=24.3.1\n  - pip:\n    - rpaframework-windows==8.0.0 # standalone Windows library (`rpaframework` includes this library)\n```\n\n**About terminology**\n\n**ControlType** is a value referred to by locator keys type: or control. Represents type of application\nobject, which can be e.g. Window, Button or ListItem.\n\n**Element** is an entity of an application structure (e.g. certain button in a window), which can be\nidentified by a locator. (also referred as **Control**)\n\n**WindowsElement** is an library container object for the `Element`. All the keywords returning elements, will in\nfact return `WindowsElement``s. The ones accepting ``locator` or `root_element` as arguments, will accept\n`WindowsElement` as an argument value. (`locator` accepts strings as well)\n\nStructure of the `WindowsElement`\n\n```python\nclass WindowsElement:\n    item: Control        # ``item`` contains object instance of the element\n    locator: str         # ``locator`` that found this element\n    name: str            # ``Name`` attribute of the element\n    automation_id: str   # ``AutomationId`` attribute of the element\n    control_type: str    # ``ControlTypeName`` attribute of the element\n    class_name: str      # ``ClassName`` attribute of the element\n    left: int            # element's rectangle left coordinate\n    right: int           # element's rectangle right coordinate\n    top: int             # element's rectangle top coordinate\n    bottom: int          # element's rectangle bottom coordinate\n    width: int           # element's rectangle horizontal width\n    height: int          # element's rectangle vertical height\n    xcenter: int         # element's rectangle center point x coordinate\n    ycenter: int         # element's rectangle center point y coordinate\n```\n\nExample of the `WindowsElement` usage\n\n```robotframework\n${rows}=    Get Elements    class:DataGridRow\n# ${rows} is a list of ``WindowsElement``s\nFOR    ${row}    IN    @{rows}\n    Log To Console   ${row.name}                # access ``WindowsElement``\n    Log To Console   ${row.item.AutomationId}   # access ``WindowsElement.item`` directly\n    Log To Console   ${row.item.Name}           # same as ``${row.name}``\nEND\n```\n\n**Locators**\n\nLocators are based on different strategies that can used identify Control object.\n\nAvailable strategies that can be used for the locators:\n\n| Key          | Maps to search property                                                                 |\n|--------------|-----------------------------------------------------------------------------------------|\n| name         | Name                                                                                    |\n| class        | ClassName                                                                               |\n| type         | ControlType                                                                             |\n| control      | ControlType                                                                             |\n| id           | AutomationId                                                                            |\n| automationid | AutomationId                                                                            |\n| regex        | RegexName                                                                               |\n| subname      | SubName                                                                                 |\n| index        | foundIndex (int)                                                                        |\n| offset       | offset coordinates (x (int), y (int)) from control center                               |\n| executable   | target window by its executable name                                                    |\n| handle       | target window handle (int)                                                              |\n| desktop      | *SPECIAL* target desktop, no value for the key e.g. desktop:desktop and name:Calculator |\n| process      | *NOT YET SUPPORTED* target window by its executable\u2019s process id                        |\n| depth        | searchDepth (int) for finding Control (default 8)                                       |\n| path         | target element by its index-based path traversal (e.g. path:2|3|8|2)                    |\n\n**About root element on locators**\n\nLocators work on currently active root element. At the start root element is the whole\ndesktop. There are different ways on changing this root element.\n\nKeyword `Control Window` is the most common method of setting certain system window\nas a root element for further actions using locators. In the absence of a provided\nroot_element parameter, here\u2019s how you can control the default root element\nresolving:\n\n> - `Set Anchor`: Sets the active anchor window from which the search begins.\n> - `Control Window`: Controls and focuses on a window and marks it as the current\n>   active window, from which all the subsequent searches will start from in the\n>   absence of a set anchor.\n> - If there\u2019s no set anchor nor active window, then the last resort will be the\n>   \u201cDesktop\u201d element itself.\n\nLocators themselves support cascading syntax (denoted by character > in the locator string),\nwhich can denote root element in \u201cparent (root) & child\u201d terms.\n\nFor example.\n\n```robotframework\nClick  id:controls > id:activate\n```\n\nOn the above example the left side of the > character, id:controls, represents the root element\n(can be called as \u201cparent element\u201d in this case). Right side of the locator string, id:activate,\nrepresents \u201cchild\u201d element and it will be searched under the \u201cparent element\u201d.\n\nThis way element search is more efficient, because search are restricted to certain section of element\ntree which can be quite huge especially on the desktop level and in certain applications.\n\nKeyword examples:\n\n```robotframework\nControl Window    name:Calculator\nControl Window    Calculator  # will execute search by 'name:Calculator'\nControl Window    executable:Spotify.exe\n```\n\nsome example locators, and can be omitted ie. space \\` \\` between locator keys means the same thing as and:\n\n```bash\nid:clearButton\ntype:Group and name:\"Number pad\" > type:Button and index:4\ntype:Group and name:\"Number pad\" > control:Button index:5\nid:Units1 > name:${unit}\nclass:Button offset:370,0\n```\n\n**About locator restrictions**\n\nVisual locators are not supported in this library and they can\u2019t be used in the same chain with these\nWindows locators. Visual locators are supported by the RPA.Desktop library. Locator chaining (image and\nWindows locators) support will be added in the future.\n\nLocator syntax does not yet support OR operation (only AND operations).\n\n**About search depth**\n\nThe library does element search depth by default to the level of 8. This means that locator will look into\n8 levels of elements under element tree of the root element. This can lead into situation where element\ncan\u2019t be found. To fix this it is recommended to set root element which can be found within 8 levels OR\ndefining depth in the locator string to a bigger value, e.g. id:deeplyNestedButton depth:16. Useful\nkeywords for setting root element are `Control Window`, `Set Anchor` and `Get Element`.\n\n**About the path strategy**\n\nWhen automation IDs and names aren\u2019t enough (or not reliable), then you can fallback\nto the positions of elements in a tree. This can be achieved using the path:\nstrategy to specify a list of element positions which indicates how to traverse the\ntree from parent to child beginning with the resolved root.\n\nExample: Calculator > path:2|3|2|8|2 - this locator looks for the \u201cCalculator\u201d\nwindow, then it looks for the 2nd direct child and then it looks for the 3rd one of\nthe previous child and so on until it consumes the path completely. (indexes start\nwith 1)\n\nAn alternative way to get the whole tree to explore it yourself would be to use the\n`Print Tree` keyword.\n\n**Keyboard and mouse**\n\nKeys for the keyboard actions are given using `uiautomation` specification.\n\nSpecial keys which are given within {} syntax.\n\n| Key                 | Maps to action                                                                                                                                                                                                                                       |\n|---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| LBUTTON             | Left mouse button                                                                                                                                                                                                                                    |\n| RBUTTON             | Right mouse button                                                                                                                                                                                                                                   |\n| CANCEL              | Control-break processing                                                                                                                                                                                                                             |\n| MBUTTON             | Middle mouse button (three-button mouse)                                                                                                                                                                                                             |\n| XBUTTON1            | X1 mouse button                                                                                                                                                                                                                                      |\n| XBUTTON2            | X2 mouse button                                                                                                                                                                                                                                      |\n| BACK                | BACKSPACE key                                                                                                                                                                                                                                        |\n| TAB                 | TAB key                                                                                                                                                                                                                                              |\n| CLEAR               | CLEAR key                                                                                                                                                                                                                                            |\n| RETURN              | ENTER key                                                                                                                                                                                                                                            |\n| ENTER               | ENTER key                                                                                                                                                                                                                                            |\n| SHIFT               | SHIFT key                                                                                                                                                                                                                                            |\n| CTRL                | CTRL key                                                                                                                                                                                                                                             |\n| CONTROL             | CTRL key                                                                                                                                                                                                                                             |\n| ALT                 | ALT key                                                                                                                                                                                                                                              |\n| PAUSE               | PAUSE key                                                                                                                                                                                                                                            |\n| CAPITAL             | CAPS LOCK key                                                                                                                                                                                                                                        |\n| KANA                | IME Kana mode                                                                                                                                                                                                                                        |\n| HANGUEL             | IME Hanguel mode (maintained for compatibility; use VK_HANGUL)                                                                                                                                                                                       |\n| HANGUL              | IME Hangul mode                                                                                                                                                                                                                                      |\n| JUNJA               | IME Junja mode                                                                                                                                                                                                                                       |\n| FINAL               | IME final mode                                                                                                                                                                                                                                       |\n| HANJA               | IME Hanja mode                                                                                                                                                                                                                                       |\n| KANJI               | IME Kanji mode                                                                                                                                                                                                                                       |\n| ESC                 | ESC key                                                                                                                                                                                                                                              |\n| ESCAPE              | ESC key                                                                                                                                                                                                                                              |\n| CONVERT             | IME convert                                                                                                                                                                                                                                          |\n| NONCONVERT          | IME nonconvert                                                                                                                                                                                                                                       |\n| ACCEPT              | IME accept                                                                                                                                                                                                                                           |\n| MODECHANGE          | IME mode change request                                                                                                                                                                                                                              |\n| SPACE               | SPACEBAR                                                                                                                                                                                                                                             |\n| PRIOR               | PAGE UP key                                                                                                                                                                                                                                          |\n| PAGEUP              | PAGE UP key                                                                                                                                                                                                                                          |\n| NEXT                | PAGE DOWN key                                                                                                                                                                                                                                        |\n| PAGEDOWN            | PAGE DOWN key                                                                                                                                                                                                                                        |\n| END                 | END key                                                                                                                                                                                                                                              |\n| HOME                | HOME key                                                                                                                                                                                                                                             |\n| LEFT                | LEFT ARROW key                                                                                                                                                                                                                                       |\n| UP                  | UP ARROW key                                                                                                                                                                                                                                         |\n| RIGHT               | RIGHT ARROW key                                                                                                                                                                                                                                      |\n| DOWN                | DOWN ARROW key                                                                                                                                                                                                                                       |\n| SELECT              | SELECT key                                                                                                                                                                                                                                           |\n| PRINT               | PRINT key                                                                                                                                                                                                                                            |\n| EXECUTE             | EXECUTE key                                                                                                                                                                                                                                          |\n| SNAPSHOT            | PRINT SCREEN key                                                                                                                                                                                                                                     |\n| PRINTSCREEN         | PRINT SCREEN key                                                                                                                                                                                                                                     |\n| INSERT              | INS key                                                                                                                                                                                                                                              |\n| INS                 | INS key                                                                                                                                                                                                                                              |\n| DELETE              | DEL key                                                                                                                                                                                                                                              |\n| DEL                 | DEL key                                                                                                                                                                                                                                              |\n| HELP                | HELP key                                                                                                                                                                                                                                             |\n| WIN                 | Left Windows key (Natural keyboard)                                                                                                                                                                                                                  |\n| LWIN                | Left Windows key (Natural keyboard)                                                                                                                                                                                                                  |\n| RWIN                | Right Windows key (Natural keyboard)                                                                                                                                                                                                                 |\n| APPS                | Applications key (Natural keyboard)                                                                                                                                                                                                                  |\n| SLEEP               | Computer Sleep key                                                                                                                                                                                                                                   |\n| NUMPAD0             | Numeric keypad 0 key                                                                                                                                                                                                                                 |\n| NUMPAD1             | Numeric keypad 1 key                                                                                                                                                                                                                                 |\n| NUMPAD2             | Numeric keypad 2 key                                                                                                                                                                                                                                 |\n| NUMPAD3             | Numeric keypad 3 key                                                                                                                                                                                                                                 |\n| NUMPAD4             | Numeric keypad 4 key                                                                                                                                                                                                                                 |\n| NUMPAD5             | Numeric keypad 5 key                                                                                                                                                                                                                                 |\n| NUMPAD6             | Numeric keypad 6 key                                                                                                                                                                                                                                 |\n| NUMPAD7             | Numeric keypad 7 key                                                                                                                                                                                                                                 |\n| NUMPAD8             | Numeric keypad 8 key                                                                                                                                                                                                                                 |\n| NUMPAD9             | Numeric keypad 9 key                                                                                                                                                                                                                                 |\n| MULTIPLY            | Multiply key                                                                                                                                                                                                                                         |\n| ADD                 | Add key                                                                                                                                                                                                                                              |\n| SEPARATOR           | Separator key                                                                                                                                                                                                                                        |\n| SUBTRACT            | Subtract key                                                                                                                                                                                                                                         |\n| DECIMAL             | Decimal key                                                                                                                                                                                                                                          |\n| DIVIDE              | Divide key                                                                                                                                                                                                                                           |\n| F1                  | F1 key                                                                                                                                                                                                                                               |\n| F2                  | F2 key                                                                                                                                                                                                                                               |\n| F3                  | F3 key                                                                                                                                                                                                                                               |\n| F4                  | F4 key                                                                                                                                                                                                                                               |\n| F5                  | F5 key                                                                                                                                                                                                                                               |\n| F6                  | F6 key                                                                                                                                                                                                                                               |\n| F7                  | F7 key                                                                                                                                                                                                                                               |\n| F8                  | F8 key                                                                                                                                                                                                                                               |\n| F9                  | F9 key                                                                                                                                                                                                                                               |\n| F10                 | F10 key                                                                                                                                                                                                                                              |\n| F11                 | F11 key                                                                                                                                                                                                                                              |\n| F12                 | F12 key                                                                                                                                                                                                                                              |\n| F13                 | F13 key                                                                                                                                                                                                                                              |\n| F14                 | F14 key                                                                                                                                                                                                                                              |\n| F15                 | F15 key                                                                                                                                                                                                                                              |\n| F16                 | F16 key                                                                                                                                                                                                                                              |\n| F17                 | F17 key                                                                                                                                                                                                                                              |\n| F18                 | F18 key                                                                                                                                                                                                                                              |\n| F19                 | F19 key                                                                                                                                                                                                                                              |\n| F20                 | F20 key                                                                                                                                                                                                                                              |\n| F21                 | F21 key                                                                                                                                                                                                                                              |\n| F22                 | F22 key                                                                                                                                                                                                                                              |\n| F23                 | F23 key                                                                                                                                                                                                                                              |\n| F24                 | F24 key                                                                                                                                                                                                                                              |\n| NUMLOCK             | NUM LOCK key                                                                                                                                                                                                                                         |\n| SCROLL              | SCROLL LOCK key                                                                                                                                                                                                                                      |\n| LSHIFT              | Left SHIFT key                                                                                                                                                                                                                                       |\n| RSHIFT              | Right SHIFT key                                                                                                                                                                                                                                      |\n| LCONTROL            | Left CONTROL key                                                                                                                                                                                                                                     |\n| LCTRL               | Left CONTROL key                                                                                                                                                                                                                                     |\n| RCONTROL            | Right CONTROL key                                                                                                                                                                                                                                    |\n| RCTRL               | Right CONTROL key                                                                                                                                                                                                                                    |\n| LALT                | Left MENU key                                                                                                                                                                                                                                        |\n| RALT                | Right MENU key                                                                                                                                                                                                                                       |\n| BROWSER_BACK        | Browser Back key                                                                                                                                                                                                                                     |\n| BROWSER_FORWARD     | Browser Forward key                                                                                                                                                                                                                                  |\n| BROWSER_REFRESH     | Browser Refresh key                                                                                                                                                                                                                                  |\n| BROWSER_STOP        | Browser Stop key                                                                                                                                                                                                                                     |\n| BROWSER_SEARCH      | Browser Search key                                                                                                                                                                                                                                   |\n| BROWSER_FAVORITES   | Browser Favorites key                                                                                                                                                                                                                                |\n| BROWSER_HOME        | Browser Start and Home key                                                                                                                                                                                                                           |\n| VOLUME_MUTE         | Volume Mute key                                                                                                                                                                                                                                      |\n| VOLUME_DOWN         | Volume Down key                                                                                                                                                                                                                                      |\n| VOLUME_UP           | Volume Up key                                                                                                                                                                                                                                        |\n| MEDIA_NEXT_TRACK    | Next Track key                                                                                                                                                                                                                                       |\n| MEDIA_PREV_TRACK    | Previous Track key                                                                                                                                                                                                                                   |\n| MEDIA_STOP          | Stop Media key                                                                                                                                                                                                                                       |\n| MEDIA_PLAY_PAUSE    | Play/Pause Media key                                                                                                                                                                                                                                 |\n| LAUNCH_MAIL         | Start Mail key                                                                                                                                                                                                                                       |\n| LAUNCH_MEDIA_SELECT | Select Media key                                                                                                                                                                                                                                     |\n| LAUNCH_APP1         | Start Application 1 key                                                                                                                                                                                                                              |\n| LAUNCH_APP2         | Start Application 2 key                                                                                                                                                                                                                              |\n| OEM_1               | Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the \u2018;:\u2019 key                                                                                                                                                |\n| OEM_PLUS            | For any country/region, the \u2018+\u2019 key                                                                                                                                                                                                                  |\n| OEM_COMMA           | For any country/region, the \u2018,\u2019 key                                                                                                                                                                                                                  |\n| OEM_MINUS           | For any country/region, the \u2018-\u2019 key                                                                                                                                                                                                                  |\n| OEM_PERIOD          | For any country/region, the \u2018.\u2019 key                                                                                                                                                                                                                  |\n| OEM_2               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_3               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_4               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_5               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_6               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_7               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_8               | Used for miscellaneous characters; it can vary by keyboard.                                                                                                                                                                                          |\n| OEM_102             | Either the angle bracket key or the backslash key on the RT 102-key keyboard                                                                                                                                                                         |\n| PROCESSKEY          | IME PROCESS key                                                                                                                                                                                                                                      |\n| PACKET              | Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KeyUp |\n| ATTN                | Attn key                                                                                                                                                                                                                                             |\n| CRSEL               | CrSel key                                                                                                                                                                                                                                            |\n| EXSEL               | ExSel key                                                                                                                                                                                                                                            |\n| EREOF               | Erase EOF key                                                                                                                                                                                                                                        |\n| PLAY                | Play key                                                                                                                                                                                                                                             |\n| ZOOM                | Zoom key                                                                                                                                                                                                                                             |\n| NONAME              | Reserved                                                                                                                                                                                                                                             |\n| PA1                 | PA1 key                                                                                                                                                                                                                                              |\n| OEM_CLEAR           | Clear key                                                                                                                                                                                                                                            |\n\nExamples.\n\n```python\nlib = Windows()\n# {Ctrl}, {Delete} ... are special keys' name in SpecialKeyNames.\nlib.send_keys('{Ctrl}a{Delete}{Ctrl}v{Ctrl}s{Ctrl}{Shift}s{Win}e{PageDown}') #press Ctrl+a, Delete, Ctrl+v, Ctrl+s, Ctrl+Shift+s, Win+e, PageDown\nlib.send_keys('{Ctrl}(AB)({Shift}(123))') #press Ctrl+A+B, type '(', press Shift+1+2+3, type ')', if '()' follows a hold key, hold key won't release util ')'\nlib.send_keys('{Ctrl}{a 3}') #press Ctrl+a at the same time, release Ctrl+a, then type 'a' 2 times\nlib.send_keys('{a 3}{B 5}') #type 'a' 3 times, type 'B' 5 times\nlib.send_keys('{{}Hello{}}abc {a}{b}{c} test{} 3}{!}{a} (){(}{)}') #type: '{Hello}abc abc test}}}!a ()()'\nlib.send_keys('0123456789{Enter}')\nlib.send_keys('ABCDEFGHIJKLMNOPQRSTUVWXYZ{Enter}')\nlib.send_keys('abcdefghijklmnopqrstuvwxyz{Enter}')\nlib.send_keys('`~!@#$%^&*()-_=+{Enter}')\nlib.send_keys('[]{{}{}}\\|;:'\",<.>/?{Enter}')\n```\n\nUsing access key of the element (element property -> AccessKey \u2018alt+s\u2019).\nThe (+s) means that previous special key is kept down until closing parenthesis is reached.\n\nOn the below example this means that \u2018ALT\u2019 key is pressed down, then \u2018+\u2019 and \u2018s\u2019 keys are pressed\ndown before they are all released up.\n\n```robotframework\nSend Keys   keys={Alt}(+s)\n```\n\nMouse clicks can be executed with keywords specific for a type of a click, e.g. `Click` (normal click),\n`Double Click` and `Right Click`.\n\n**How to inspect**\n\nMost common, and recommended by Microsoft, inspector tool for Windows is [Accessibility Insights](https://accessibilityinsights.io/) that\ncan be installed separately. Other options are tools [Inspect Object](https://docs.microsoft.com/en-us/windows/win32/winauto/inspect-objects)  and [UI Automation Verify](https://docs.microsoft.com/en-us/windows/win32/winauto/ui-automation-verify), which\ncan be accessed by installing Windows SDK.\n\nA more programmatic approach is to run `Print Tree    log_as_warnings=${True}`\nkeyword and then observe in the logs the found elements structure starting from\nDesktop (or the currently set anchor / active window) as root. (refer to keyword\u2019s\n[documentation](https://robocorp.com/docs-robot-framework/libraries/rpa-framework/rpa-windows/keywords#print-tree)\nfor more details)\n\n**Recording**\n\nThe package provides some rudimentary inspecting and recording via the\n`windows-record` script, which can be started through the command line (in an\nenvironment containing the `rpaframework-windows` installation).\n\nRecording inspects elements on **mouse click** and can be stopped by pressing the\n**ESC** key. Expected console output:\n\n```winbatch\nC:\\Users\\User\\robots\\> windows-record -v  # or > python -m RPA.Windows -v\nMouse recording started. Use ESC to stop recording.\n\n--------------------------------------------------------------------------------\nCopy-paste the code below into your `*** Tasks ***` or `*** Keywords ***`\n--------------------------------------------------------------------------------\n\nControl Window    name:Calculator and type:WindowControl and class:ApplicationFrameWindow  # handle:9569486\nClick    name:Calculator and id:TitleBar and type:WindowControl and class:ApplicationFrameTitleBarWindow and path:1\nClick    name:\"Display is 0\" and id:CalculatorResults and type:TextControl and path:2|3|2|2\nClick    name:Eight and id:num8Button and type:ButtonControl and class:Button and path:2|3|2|8|9\nClick    name:Nine and id:num9Button and type:ButtonControl and class:Button and path:2|3|2|8|10\nClick    name:Clear and id:clearButton and type:ButtonControl and class:Button and path:2|3|2|5|3\n\n--------------------------------------------------------------------------------\n```\n\nCheck our Portal example in order to learn more abot the path: strategy in\nlocators and how to record elements displaying their paths:\n[https://robocorp.com/portal/robot/robocorp/example-windows-element-path](https://robocorp.com/portal/robot/robocorp/example-windows-element-path)\n\nVideo recorded demo on how to run the recorder script from VSCode:\n[https://www.loom.com/share/2807372359f34b9cbe1bc2df9194ec68](https://www.loom.com/share/2807372359f34b9cbe1bc2df9194ec68)\n\n**Caveats**\n\n- Make sure your *display scaling* is set to *100%*, otherwise you might encounter\n  issues when clicking or interacting with elements. (since offsets and coordinates\n  get distorted)\n- Disturbing the automation (like interacting with your mouse/keyboard) or having\n  other apps obstructing the process interacting with your app of interest will\n  most probably affect the expected behaviour. In order to avoid this, try\n  controlling the app\u2019s main window right before sending clicks or keys. And keep\n  targeting elements through **string locators**, as interacting with Windows\n  element objects previously retrieved will not work as expected in a future\n  altered state of the app (changes under the element structure).\n\n**Example: Robot Framework**\n\nThe library must be imported first.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Windows\n```\n\nWindows Calculator automation task\n\n```robotframework\n*** Tasks ***\nDo some calculations\n    [Setup]  Windows Run   calc.exe\n\n    Control Window    name:Calculator\n    Click    id:clearButton\n    Send Keys   keys=96+4=\n    ${result} =    Get Attribute    id:CalculatorResults    Name\n    Log To Console    ${result}\n\n    @{buttons} =  Get Elements  type:Group and name:\"Number pad\" > type:Button\n    FOR  ${button}  IN  @{buttons}\n        Log To Console   ${button}\n    END\n\n    [Teardown]   Close Current Window\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlibrary = Windows()\n\ndef test_do_some_calculations():\n    library.windows_run(\"calc.exe\")\n    try:\n        library.control_window(\"name:Calculator\")\n        library.click(\"id:clearButton\")\n        library.send_keys(keys=\"96+4=\")\n        result = library.get_attribute(\"id:CalculatorResults\", \"Name\")\n        print(result)\n        buttons = library.get_elements(\n            'type:Group and name:\"Number pad\" > type:Button'\n        )\n        for button in buttons:\n            print(button)\n    finally:\n        library.close_current_window()\n```\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### SIMULATE_MOVE *= False*\n\n#### add_library_components(library_components: List, translation: dict | None = None, translated_kw_names: list | None = None)\n\n#### clear_anchor() \u2192 None\n\nClears control anchor set by `Set Anchor`\n\nThis means that all following keywords accessing elements\nwill use active window or desktop as root element.\n\n#### click(locator: WindowsElement | str, wait_time: float | None = None, timeout: float | None = None) \u2192 WindowsElement\n\nMouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **wait_time** \u2013 time to wait after click, default is a\n    library wait_time, see keyword `Set Wait Time`\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\nClick  id:button1\nClick  id:button2 offset:10,10\n${element}=  Click  name:SendButton  wait_time=5.0\n```\n\n#### close_current_window() \u2192 bool\n\nCloses current active window or logs a warning message.\n\n* **Returns:**\n  True if close was successful, False if not\n\nExample:\n\n```robotframework\n${status}=  Close Current Window\n```\n\n#### close_window(locator: WindowsElement | str | None = None, timeout: float | None = None) \u2192 int\n\nCloses identified windows or logs the problems.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or Control element.\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n* **Returns:**\n  How many windows were found and closed.\n\nExample:\n\n```robotframework\n${closed_count} =     Close Window    Calculator\n```\n\n#### control_child_window(locator: WindowsElement | str | None = None, foreground: bool = True, wait_time: float | None = None, timeout: float | None = None) \u2192 WindowsElement\n\nGet control of child window of the active window\nby locator.\n\n* **Parameters:**\n  * **locator** \u2013 string locator or Control element\n  * **foreground** \u2013 True to bring window to foreground\n  * **wait_time** \u2013 time to wait after activeting a window\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\nControl Window   subname:\"Sage 50\" type:Window\n# actions on the main application window\n# ...\n# get control of child window of Sage application\nControl Child Window   subname:\"Test Company\" depth:1\n```\n\n#### control_window(locator: WindowsElement | str | None = None, foreground: bool = True, wait_time: float | None = None, timeout: float | None = None, main: bool = True) \u2192 WindowsElement\n\nControls the window defined by the locator.\n\nThis means that this window is used as a root element\nfor all the following keywords using locators.\n\nReturns WindowsElement.\n\n* **Parameters:**\n  * **locator** \u2013 string locator or Control element\n  * **foreground** \u2013 True to bring window to foreground\n  * **wait_time** \u2013 time to wait after activating a window\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n  * **main** \u2013 on True (default) starts the search from desktop level, on\n    False it will continue to search for child elements given the set anchor\n    or current active window\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\nControl Window   Calculator\nControl Window   name:Calculator\nControl Window   subname:Notepad\nControl Window   regex:.*Notepad\n${window}=  Control Window   executable:Spotify.exe\n```\n\n#### disable_process_listing() \u2192 None\n\nDisables process iteration in List Windows keyword.\n\n#### double_click(locator: WindowsElement | str, wait_time: float | None = None, timeout: float | None = None) \u2192 WindowsElement\n\nDouble mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **wait_time** \u2013 time to wait after click, default is a\n    library wait_time, see keyword `Set Wait Time`\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${element}=  Double Click  name:ResetButton\n```\n\n#### drag_and_drop(source_element: WindowsElement | str, target_element: WindowsElement | str, speed: float | None = 1.0, copy: bool | None = False, wait_time: float | None = 1.0)\n\nDrag and drop the source element into target element.\n\n* **Parameters:**\n  * **source** \u2013 source element for the operation\n  * **target** \u2013 target element for the operation\n  * **speed** \u2013 adjust speed of operation, bigger value means more speed\n  * **copy** \u2013 on True does copy drag and drop, defaults to move\n  * **wait_time** \u2013 time to wait after drop, default 1.0 seconds\n\nExample:\n\n```robotframework\n# copying a file, report.html, from source (File Explorer) window\n# into a target (File Explorer) Window\n# locator\nDrag And Drop\n...    name:C:\\temp type:Windows > name:report.html type:ListItem\n...    name:%{USERPROFILE}\\Documents\\artifacts type:Windows > name:\"Items View\"\n...    copy=True\n```\n\nExample:\n\n```robotframework\n# moving *.txt files into subfolder within one (File Explorer) window\n${source_dir}=    Set Variable    %{USERPROFILE}\\Documents\\test\nControl Window    name:${source_dir}\n${files}=    Find Files    ${source_dir}${/}*.txt\n# first copy files to folder2\nFOR    ${file}    IN    @{files}\n    Drag And Drop    name:${file.name}    name:folder2 type:ListItem    copy=True\nEND\n# second move files to folder1\nFOR    ${file}    IN    @{files}\n    Drag And Drop    name:${file.name}    name:folder1 type:ListItem\nEND\n```\n\n#### enable_process_listing() \u2192 None\n\nEnables process iteration in List Windows keyword.\n\n#### foreground_window(locator: WindowsElement | str | None = None) \u2192 WindowsElement\n\nBring the current active window or the window defined\nby the locator to the foreground.\n\n* **Parameters:**\n  **locator** \u2013 string locator or Control element\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${window}=  Foreground Window   Calculator\n```\n\n#### get_attribute(locator: WindowsElement | str, attribute: str) \u2192 str\n\nGet attribute value of the element defined by the locator.\n\n* **Parameters:**\n  * **locator** \u2013 string locator or Control element\n  * **attribute** \u2013 name of the attribute to get\n* **Returns:**\n  value of attribute\n\nExample:\n\n```robotframework\n${id}=   Get Attribute  type:Edit name:firstname   AutomationId\n```\n\n#### get_element(locator: WindowsElement | str | None = None, search_depth: int = 8, root_element: WindowsElement | None = None, timeout: float | None = None) \u2192 WindowsElement\n\nGet a Control Windows element defined by the locator.\n\nThe returned element can be used instead of a locator string for other keywords\naccepting the locator parameter.\nKeyword `Get Attribute` can be used to read element attribute values.\n\nIf locator is None, then the returned element will be in this priority:\n\n> 1. root_element if provided.\n> 2. Anchor element if that has been previously set with `Set Anchor`.\n> 3. Current active window if that has been set with `Control Window`.\n> 4. Last resort is the \u201cDesktop\u201d element.\n* **Parameters:**\n  * **locator** \u2013 Locator as a string or as an element object.\n  * **search_depth** \u2013 How deep the element search will traverse. (default 8)\n  * **root_element** \u2013 Will be used as search root element object if provided.\n  * **timeout** \u2013 After how many seconds (float) to give up on search. (see\n    keyword `Set Global Timeout`)\n* **Returns:**\n  The identified WindowsElement object.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nSet Text Into Notepad Window\n    Windows Run    Notepad\n    Control Window      subname:Notepad\n    ${element} =    Get Element    regex:\"Text (E|e)ditor\"\n    Set Value    ${element}    note to myself\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib = Windows()\nlib.windows_run(\"calc.exe\")\none_btn = lib.get_element(\"Calculator > path:2|3|2|8|2\")\nlib.close_window(\"Calculator\")\n```\n\n#### get_elements(locator: WindowsElement | str | None = None, search_depth: int = 8, root_element: WindowsElement | None = None, timeout: float | None = None, siblings_only: bool = True) \u2192 List[WindowsElement]\n\nGet a list of elements matching the locator.\n\nBy default, only the siblings (similar elements on the same level) are taken\ninto account. In order to search globally, turn siblings_only off, but be\naware that this will take more time to process.\n\nNote that if the syntax `parent_locator > child_locator` is used\nin the locator, it is assumed that `parent_locator` returns a\nsingular element - i.e. if the locator `parent_locator` returns multiple\nelements, only the first result is used for further processing, even if\nsiblings_only is off.\n\nFor more details on the rest of parameters, take a look at the `Get Element`\nkeyword.\n\n* **Parameters:**\n  * **locator** \u2013 Locator as a string or as an element object.\n  * **search_depth** \u2013 How deep the element search will traverse. (default 8)\n  * **root_element** \u2013 Will be used as search root element object if provided.\n  * **timeout** \u2013 After how many seconds (float) to give up on search. (see\n    keyword `Set Global Timeout`)\n  * **siblings_only** \u2013 Filter for elements on the same level as the initially\n    found one. Turn it off for a global search. (True by default)\n* **Returns:**\n  A list of matching WindowsElement objects.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nGet Headers On Same Level\n    Set Anchor      id:DataGrid\n    @{elements} =   Get Elements    type:HeaderItem\n    FOR    ${element}    IN    @{elements}\n        Log To Console    ${element.name}\n    END\n\nGet All Calculator Buttons Matching Expression\n    Windows Run    Calc\n    Control Window    subname:Calc\n    @{buttons} =    Get Elements    class:Button regex:.*o.*\n    ...     siblings_only=${False}\n    Log List    ${buttons}\n    ${length} =     Get Length      ${buttons}\n    Log To Console      Number of buttons: ${length}\n```\n\n#### get_keyword_arguments(name)\n\n#### get_keyword_documentation(name)\n\n#### get_keyword_names()\n\n#### get_keyword_source(keyword_name)\n\n#### get_keyword_tags(name)\n\n#### get_keyword_types(name)\n\n#### get_text(locator: WindowsElement | str) \u2192 str\n\nGet text from Control element defined by the locator.\n\nException `ActionNotPossible` is raised if element does not\nallow GetWindowText action.\n\n* **Parameters:**\n  **locator** \u2013 String locator or element object.\n* **Returns:**\n  value of WindowText attribute of an element\n\nExample:\n\n```robotframework\n${date} =  Get Text   type:Edit name:\"Date of birth\"\n```\n\n#### get_value(locator: WindowsElement | str) \u2192 str | None\n\nGet the value of the element defined by the provided locator.\n\nThe `ActionNotPossible` exception is raised if the identified element doesn\u2019t\nsupport value retrieval.\n\n* **Parameters:**\n  **locator** \u2013 String locator or element object.\n* **Returns:**\n  Optionally the value of the identified element.\n\n**Example: Robot Framework**\n\n```robotframework\n${value} =   Get Value   type:DataItem name:column1\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\ntext = lib_win.get_value(\"Rich Text Window\")\nprint(text)\n```\n\n#### is_selected(locator: WindowsElement | str) \u2192 bool | None\n\nGet the selection state of the element defined by the provided locator.\n\nThe `ActionNotPossible` exception is raised if the identified element doesn\u2019t\nsupport selection item retrieval.\n\n* **Parameters:**\n  **locator** \u2013 String locator or element object.\n* **Returns:**\n  Optionally the selection state of the identified element, as a boolean.\n\n**Example: Robot Framework**\n\n```robotframework\n${value} =   Is Selected   type:RadioButtonControl name:Apple\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\nvalue = lib_win.is_selected(\"type:RadioButtonControl name:Apple\")\nprint(value)\n```\n\n#### list_attributes(locator: WindowsElement | str) \u2192 List\n\nList all element attributes.\n\n* **Parameters:**\n  **locator** \u2013 string locator or Control element\n* **Returns:**\n  list of element attributes (strings)\n\n#### list_windows(icons: bool = False, icon_save_directory: str | None = None) \u2192 List[Dict]\n\nList all window element on the system.\n\n* **Parameters:**\n  * **icons** \u2013 on True dictionary will contain Base64\n    string of the icon, default False\n  * **icon_save_directory** \u2013 if set will save retrieved icons\n    into this filepath, by default icon files are not saved\n* **Returns:**\n  list of dictionaries containing information\n  about Window elements\n\nExample:\n\n```robotframework\n${windows}=  List Windows\nFOR  ${window}  IN  @{windows}\n    Log  Window title:${window}[title]\n    Log  Window process name:${window}[name]\n    Log  Window process id:${window}[pid]\n    Log  Window process handle:${window}[handle]\nEND\n```\n\n#### maximize_window(locator: WindowsElement | str | None = None) \u2192 WindowsElement\n\nMaximize the current active window or the window defined\nby the locator.\n\n* **Parameters:**\n  **locator** \u2013 string locator or element\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${window} =    Maximize Window  # Current active window\nMaximize Window    executable:Spotify.exe\n```\n\n#### middle_click(locator: WindowsElement | str, wait_time: float | None = None, timeout: float | None = None) \u2192 WindowsElement\n\nRight mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **wait_time** \u2013 time to wait after click, default is a\n    library wait_time, see keyword `Set Wait Time`\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${element}=  Middle Click  name:button2\n```\n\n#### minimize_window(locator: WindowsElement | str | None = None) \u2192 WindowsElement\n\nMinimize the current active window or the window defined\nby the locator.\n\n* **Parameters:**\n  **locator** \u2013 string locator or element\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${window} =    Minimize Window  # Current active window\nMinimize Window    executable:Spotify.exe\n```\n\n#### print_tree(locator: WindowsElement | str | None = None, max_depth: int = 8, capture_image_folder: str | None = None, log_as_warnings: bool = False, return_structure: bool = False) \u2192 Dict[int, List[WindowsElement]] | None\n\nPrint a tree of control elements.\n\nA Windows application structure can contain multilevel element structure.\nUnderstanding this structure is crucial for creating locators. (based on\ncontrols\u2019 details and their parent-child relationship)\n\nThis keyword can be used to output logs of application\u2019s element structure,\nstarting with the element defined by the provided locator as root. Switch\nthe return_structure parameter to True to get a tree of elements returned\nas well. (off by default to save memory)\n\n- The printed structure displays a tree prefixed with \u201cdepth\u201d - \u201cposition\u201d so\n  you know how deep (0 means root) in the tree you are and on what position\n  (1-indexed) the child you\u2019re looking for is.\n- The returned structure is a dictionary with all the children flattened per\n  depth level. Additionally, these WindowsElement objects contain a relevant\n  locator composed of \u201croot > path\u201d which will help to identify the element in\n  the tree.\n\nPortal example:\n[https://robocorp.com/portal/robot/robocorp/example-windows-element-path](https://robocorp.com/portal/robot/robocorp/example-windows-element-path)\n\n* **Parameters:**\n  * **locator** \u2013 The root of the tree to output.\n  * **max_depth** \u2013 Maximum depth level. (defaults to 8)\n  * **capture_image_folder** \u2013 If set, controls\u2019 images will be captured in this\n    path.\n  * **log_as_warnings** \u2013 Enables highlighted logs (at the beginning of the log\n    file as warnings) and increases visibility in the output console.\n  * **return_structure** \u2013 A flattened tree with all the elements collated by\n    level will be returned if this is enabled.\n* **Returns:**\n  Optionally a dictionary of children per depth level when\n  return_structure is enabled.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nDisplay Element Structure\n    ${tree} =   Print Tree      Calculator > path:2|3|2|8\n    ...     return_structure=${True}\n    Log To Console      ${tree}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib = Windows()\ntree = lib.print_tree(\"Calculator > path:2|3|2|8\", return_structure=True)\nprint(tree)\n```\n\n#### restore_window(locator: WindowsElement | str | None = None) \u2192 WindowsElement\n\nWindow restore the current active window or the window\ndefined by the locator.\n\n* **Parameters:**\n  **locator** \u2013 string locator or element\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${window} =    Restore Window  # Current active window\nRestore Window    executable:Spotify.exe\n```\n\n#### right_click(locator: WindowsElement | str, wait_time: float | None = None, timeout: float | None = None) \u2192 WindowsElement\n\nRight mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **wait_time** \u2013 time to wait after click, default is a\n    library wait_time, see keyword `Set Wait Time`\n  * **timeout** \u2013 float value in seconds, see keyword\n    `Set Global Timeout`\n* **Returns:**\n  WindowsElement object\n\nExample:\n\n```robotframework\n${element}=  Right Click  name:MenuButton\n```\n\n#### run_keyword(name, args, kwargs=None)\n\n#### screenshot(locator: WindowsElement | str, filename: str | Path) \u2192 str\n\nTake a screenshot of the element defined by the locator.\n\nAn ActionNotPossible exception is raised if the element doesn\u2019t allow being\ncaptured.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **filename** \u2013 Image file name/path. (can be absolute/relative)\n* **Raises:**\n  **ActionNotPossible** \u2013 When the element can\u2019t be captured.\n* **Returns:**\n  Absolute file path of the taken screenshot image.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nTake Screenshots\n    Screenshot    desktop    desktop.png\n    Screenshot    subname:Notepad    ${OUTPUT_DIR}${/}notepad.png\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\nlib = Windows()\n\ndef take_screenshots():\n    lib.screenshot(\"desktop\", \"desktop.png\")\n    lib.screenshot(\"subname:Notepad\", \"output/notepad.png\")\n```\n\n#### select(locator: WindowsElement | str, value: str) \u2192 WindowsElement\n\nSelect a value on the passed element if such action is supported.\n\nThe `ActionNotPossible` exception is raised when the element does not allow\nthe Select action. This is usually used with combo box elements.\n\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **value** \u2013 String value to select on Control element\n* **Returns:**\n  The controlled Windows element.\n\n**Example: Robot Framework**\n\n> **\\* Settings \\***\n> Library     RPA.Windows\n\n> **\\* Tasks \\***\n> Set Notepad Size\n\n> > Select    id:FontSizeComboBox    22\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib = Windows()\n\ndef set_notepad_size():\n    lib.select(\"id:FontSizeComboBox\", \"22\")\n```\n\n#### send_keys(locator: WindowsElement | str | None = None, keys: str | None = None, interval: float = 0.01, wait_time: float | None = None, send_enter: bool = False)\n\nSend keys to desktop, current window or to Control element\ndefined by given locator.\n\nIf `locator` is None then keys are sent to desktop.\n\nException `ActionNotPossible` is raised if element does not\nallow SendKeys action.\n\n* **Parameters:**\n  * **locator** \u2013 Optional string locator or element object.\n  * **keys** \u2013 The keys to send.\n  * **interval** \u2013 Time between each sent key. (defaults to 0.01 seconds)\n  * **wait_time** \u2013 Time to wait after sending all the keys. (defaults to\n    library\u2019s set value, see keyword `Set Wait Time`)\n  * **send_enter** \u2013 If True then the {Enter} key is pressed at the end of the\n    sent keys.\n* **Returns:**\n  The element identified through locator.\n\nExample:\n\n```robotframework\nSend Keys  desktop   {Ctrl}{F4}\nSend Keys  keys={Ctrl}{F4}   # locator will be NONE, keys sent to desktop\nSend Keys  id:input5  username   send_enter=${True}\n${element}=   Get Element   id:pass\nSend Keys  ${element}  password   send_enter=${True}\n```\n\n#### set_anchor(locator: WindowsElement | str, timeout: float | None = None) \u2192 None\n\nSet anchor to an element specified by the locator.\n\nAll following keywords using locators will use this element\nas a root element. Specific use case could be setting\nanchor to TableControl element and then getting column data\nbelonging to that TableControl element.\n\nTo release anchor call `Clear Anchor` keyword.\n\n* **Parameters:**\n  * **locator** \u2013 string locator or Control element\n  * **timeout** \u2013 timeout in seconds for element lookup (default 10.0)\n\nExample:\n\n```robotframework\nSet Anchor  type:Table name:Orders depth:16\nFOR  ${row}  IN RANGE  200\n    ${number}=  Get Value   name:number row ${row}\n    Exit For Loop If   $number == ${EMPTY}\n    ${sum}=  Get Value   name:sum row ${row}\n    Log   Order number:${number} has sum:{sum}\nEND\nClear Anchor\n```\n\n#### set_focus(locator: WindowsElement | str) \u2192 None\n\nSet view focus to the element defined by the locator.\n\n* **Parameters:**\n  **locator** \u2013 String locator or element object.\n\nExample:\n\n```robotframework\nSet Focus  name:Buy type:Button\n```\n\n#### set_global_timeout(timeout: float) \u2192 float\n\nSet global timeout for element search. Applies also\nto `Control Window` keyword.\n\nBy default, the library has a timeout of 10 seconds.\n\n* **Parameters:**\n  **timeout** \u2013 float value in seconds\n* **Returns:**\n  previous timeout value\n\nExample:\n\n```robotframework\n${old_timeout}=  Set Global Timeout  20\n${old_timeout}=  Set Global Timeout  9.5\n```\n\n#### set_mouse_movement(simulate: bool) \u2192 bool\n\nEnable or disable mouse movement simulation during clicks and other actions.\n\nReturns the previous set value as True/False.\n\n* **Parameters:**\n  **simulate** \u2013 Decide whether to simulate the move. (OFF by default)\n* **Returns:**\n  Previous state.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nDisable Mouse Move\n    ${previous} =   Set Mouse Movement      ${True}\n    Log To Console   Previous mouse simulation: ${previous} (now enabled)\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\nprevious = lib_win.set_mouse_movement(True)\nprint(f\"Previous mouse simulation: {previous} (now enabled)\")\n```\n\n#### set_value(locator: ~RPA.core.windows.locators.WindowsElement | str | None = None, value: str | None = None, append: bool = False, enter: bool = False, newline: bool = False, send_keys_fallback: bool = True, validator: ~typing.Callable | None = <function set_value_validator>) \u2192 WindowsElement\n\nSet value of the element defined by the locator.\n\n*Note:* An anchor will work only on element structures where you can\nrely on the stability of that root/child element tree, as remaining the same.\nUsually these kind of structures are tables. (but not restricted to)\n\n*Note:* It is important to set `append=${True}` if you want to keep the\ncurrent text in the element. Other option is to read the current text into a\nvariable, then modify that value as you wish and pass it to the `Set Value`\nkeyword for a complete text replacement. (without setting the append flag)\n\nThe following exceptions may be raised:\n\n> - `ActionNotPossible` if the element does not allow the SetValue action\n>   to be run on it nor having `send_keys_fallback=${True}`.\n> - `ValueError` if the new value to be set can\u2019t be set correctly.\n* **Parameters:**\n  * **locator** \u2013 String locator or element object.\n  * **value** \u2013 String value to be set.\n  * **append** \u2013 False for setting the value, True for appending it. (OFF by\n    default)\n  * **enter** \u2013 Set it to True to press the *Enter* key at the end of the\n    input. (nothing is pressed by default)\n  * **newline** \u2013 Set it to True to add a new line at the end of the value. (no\n    EOL included by default; this won\u2019t work with send_keys_fallback enabled)\n  * **send_keys_fallback** \u2013 Tries to set the value by sending it through keys\n    if the main way of setting it fails. (enabled by default)\n  * **validator** \u2013 Function receiving two parameters post-setting, the expected\n    and the current value, which returns True if the two values match. (by\n    default, the keyword will raise if the values are different, set this to\n    None to disable validation or pass your custom function instead)\n* **Returns:**\n  The element object identified through the passed locator.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nSet Values In Notepad\n    Set Value   type:DataItem name:column1   ab c  # Set value to \"ab c\"\n    # Press ENTER after setting the value.\n    Set Value    type:Edit name:\"File name:\"    console.txt   enter=${True}\n\n    # Add newline (manually) at the end of the string. (Notepad example)\n    Set Value    name:\"Text Editor\"  abc\\n\n    # Add newline with parameter.\n    Set Value    name:\"Text Editor\"  abc   newline=${True}\n\n    # Clear Notepad window and start appending text.\n    Set Anchor  name:\"Text Editor\"\n    # All the following keyword calls will use the anchor element as a\n    #  starting point, UNLESS they specify a locator explicitly or\n    #  `Clear Anchor` is used.\n    ${time} =    Get Time\n    # Clears with `append=${False}`. (default)\n    Set Value    value=The time now is ${time}\n    # Append text and add a newline at the end.\n    Set Value    value= and it's the task run time.   append=${True}\n    ...    newline=${True}\n    # Continue appending and ensure a new line at the end by pressing\n    #  the Enter key this time.\n    Set Value    value=But this will appear on the 2nd line now.\n    ...    append=${True}   enter=${True}   validator=${None}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\nlocator = \"Document - WordPad > Rich Text Window\"\nelem = lib_win.set_value(locator, value=\"My text\", send_keys_fallback=True)\ntext = lib_win.get_value(elem)\nprint(text)\n```\n\n#### set_wait_time(wait_time: float) \u2192 float\n\nSet library wait time for action keywords.\n\nThe wait_time is spent after each keyword performing\nmouse or keyboard action.\n\nLibrary default wait_time is 0.5\n\nReturns value of the previous wait_time value.\n\n* **Parameters:**\n  **wait_time** \u2013 float value (in seconds), e.g. 0.1\n* **Returns:**\n  previous wait value\n\nExample:\n\n```robotframework\n${old_wait_time}=  Set Wait Time  0.2\n```\n\n#### windows_run(text: str, wait_time: float = 3.0) \u2192 None\n\nUse Windows Run window to launch an application.\n\nActivated by pressing Win + R. Then the app name is typed in and finally the\n\u201cEnter\u201d key is pressed.\n\n* **Parameters:**\n  * **text** \u2013 Text to enter into the Run input field. (e.g. Notepad)\n  * **wait_time** \u2013 Time to sleep after the searched app is executed. (3s by\n    default)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRun Notepad\n    Windows Run   notepad\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\nlib = Windows()\n\ndef run_notepad():\n    lib.windows_run(\"notepad\")\n```\n\n#### windows_search(text: str, wait_time: float = 3.0) \u2192 None\n\nUse Windows search window to launch application.\n\nActivated by pressing win + s.\n\n* **Parameters:**\n  * **text** \u2013 text to enter into search input field\n  * **wait_time** \u2013 sleep time after search has been entered (default 3.0 seconds)\n\nExample:\n\n```robotframework\nWindows Search   Outlook\n```\n"
  },
  {
    "module": "RPA.Word.Application.Application",
    "markdown": "# Python API\n\n## Excel.Application\n\n### *class* RPA.Word.Application.Application(autoexit: bool = True)\n\nWord.Application is a library for controlling the Word application.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary                 RPA.Word.Application\nTask Setup              Open Application\nSuite Teardown          Quit Application\n\n*** Tasks ***\nOpen existing file\n    Open File           old.docx\n    Write Text          Extra Line Text\n    Write Text          Another Extra Line of Text\n    Save Document AS    ${CURDIR}${/}new.docx\n    ${texts}=           Get all Texts\n    Close Document\n```\n\n**Python**\n\n```python\nfrom RPA.Word.Application import Application\n\napp = Application()\napp.open_application()\napp.open_file('old.docx')\napp.write_text('Extra Line Text')\napp.save_document_as('new.docx')\napp.quit_application()\n```\n\n**Caveats**\n\nThis library works on a Windows operating system with UI enabled only, and you must\nensure that you open the app first with `Open Application` before running any\nother relevant keyword which requires to operate on an open app. The application is\nautomatically closed at the end of the task execution, so this can be changed by\nimporting the library with the autoexit=${False} setting.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Excel|Outlook|Word.Application    autoexit=${False}\n```\n\nIf you\u2019re running the Process by Control Room through a custom self-hosted Worker\nservice, then please make sure that you enable an RDP session by ticking \u201cUse\nDesktop Connection\u201d under the Step configuration.\n\nIf you still encounter issues with opening a document, please ensure that file can\nbe opened first manually and dismiss any alert potentially blocking the process.\n\nCheck the documentation below for more info:\n\n- [https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop](https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop)\n\n#### APP_DISPATCH *= 'Word.Application'*\n\n#### FILEFORMATS *= {'DEFAULT': 'wdFormatDocumentDefault', 'HTML': 'wdFormatHTML', 'OPENDOCUMENT': 'wdFormatOpenDocumentText', 'PDF': 'wdFormatPDF', 'RTF': 'wdFormatRTF', 'WORD97': 'wdFormatDocument97'}*\n\n#### ROBOT_LIBRARY_DOC_FORMAT *= 'REST'*\n\n#### ROBOT_LIBRARY_SCOPE *= 'GLOBAL'*\n\n#### *property* app\n\n#### close_document(save_changes: bool = False) \u2192 None\n\nClose the active document and app (if open).\n\n* **Parameters:**\n  **save_changes** \u2013 Enable changes saving on quit. (False by default)\n\n#### copy_selection_to_clipboard()\n\nCopy current text selection to clipboard.\n\n#### create_new_document() \u2192 None\n\nCreate new document for Word application\n\n#### export_to_pdf(filename: str) \u2192 None\n\nExport active document into PDF file.\n\n* **Parameters:**\n  **filename** \u2013 PDF to export WORD into\n\n#### find_text(text: str, cursor_position: CursorPosition = CursorPosition.NO_MOVE, copy: bool = False) \u2192 None\n\nFind text in the document.\n\n* **Parameters:**\n  * **text** \u2013 text to find\n  * **cursor_position** \u2013 where to move cursor after finding text\n  * **copy** \u2013 copy found text into clipboard\n* **Raises:**\n  **AssertionError** \u2013 if text is not found\n\n#### get_all_texts() \u2192 str\n\nGet all texts from active document\n\n* **Returns:**\n  texts\n\n#### get_current_line() \u2192 str\n\nGet the text of the current line in the document.\n\n#### get_number_of_lines() \u2192 int\n\nGet the number of lines in the document.\n\n#### move_horizontally(characters: int = 0) \u2192 Any\n\nMove cursor horizontally from current cursor position.\n\nRemember that if cursor is already at the start the cursor can\u2019t move\nleft and if cursor is already at the end the cursor can\u2019t move right.\n\n* **Parameters:**\n  **characters** \u2013 characters to move\n\n#### move_to_end() \u2192 None\n\nMove cursor to the end of the document.\n\n#### move_to_line_end() \u2192 None\n\nMove cursor to end of the line on the current cursor position.\n\n#### move_to_line_start() \u2192 None\n\nMove cursor to start of the line on the current cursor position.\n\n#### move_to_top() \u2192 None\n\nMove cursor to the top of the document.\n\n#### move_vertically(lines: int = 0) \u2192 Any\n\nMove cursor vertically from current cursor position.\n\nRemember that if cursor is already at the top the cursor can\u2019t\nmove up and if cursor is already at the bottom the cursor can\u2019t\nmove down.\n\n* **Parameters:**\n  **lines** \u2013 lines to move\n\n#### open_application(visible: bool = False, display_alerts: bool = False) \u2192 None\n\nOpen the application.\n\n* **Parameters:**\n  * **visible** \u2013 Show the window on opening. (False by default)\n  * **display_alerts** \u2013 Display alert popups. (False by default)\n\n#### open_file(filename: str, read_only: bool = True) \u2192 None\n\nOpen Word document with filename.\n\n* **Parameters:**\n  **filename** \u2013 Word document path\n\n#### paste_from_clipboard() \u2192 None\n\nPaste content from clipboard to the document\u2019s\ncurrent cursor position.\n\n#### quit_application(save_changes: bool = False) \u2192 None\n\nQuit the application.\n\n* **Parameters:**\n  **save_changes** \u2013 Enable to save changes on quit. (False by default)\n\n#### replace_text(find: str, replace: str) \u2192 None\n\nReplace text in active document\n\n* **Parameters:**\n  * **find** \u2013 text to replace\n  * **replace** \u2013 new text\n\n#### save_document() \u2192 None\n\nSave active document\n\n#### save_document_as(filename: str, fileformat: str | None = None) \u2192 None\n\nSave document with filename and optionally with given fileformat\n\n* **Parameters:**\n  * **filename** \u2013 where to save document\n  * **fileformat** \u2013 see @FILEFORMATS dictionary for possible format,\n    defaults to None\n\n#### select_current_paragraph()\n\nSelect text in current active paragraph.\n\n#### select_paragraph(count: int = 1)\n\nSelect paragraph(s) from current cursor position.\n\nNegative count moves cursor up number of paragraphs and\npositive count moves cursor down number of paragraphs.\n\n* **Parameters:**\n  **count** \u2013 number of paragraphs to select\n\n#### set_footer(text: str) \u2192 None\n\nSet footer for the active document\n\n* **Parameters:**\n  **text** \u2013 footer text to set\n\n#### set_header(text: str) \u2192 None\n\nSet header for the active document\n\n* **Parameters:**\n  **text** \u2013 header text to set\n\n#### set_object_property(object_instance, property_name: str, value: str)\n\nSet the property of any object.\n\nThis is a utility keyword for Robot Framework syntax to set object\nproperty values.\n\n```robotframework\n${new_value}=    Replace String    ${value}    10.132.    5511.11.\nSet Object Property    ${result}    Value    ${new_value}\n```\n\n* **Parameters:**\n  * **object_instance** \u2013 object instance to set the property\n  * **property_name** \u2013 property name to set\n  * **value** \u2013 value to set\n\n#### write_text(text: str, cursor_position: CursorPosition = CursorPosition.NO_MOVE, end_of_text: bool = True) \u2192 None\n\nWrites given text at the end of the document\n\n* **Parameters:**\n  * **text** \u2013 string to write\n  * **cursor_position** \u2013 where to move cursor before writing\n  * **end_of_text** \u2013 if True moves cursor to the end of the text\n    before writing\n"
  }
]